[{"title":"frontend-master","category":".","id":"frontend-master"},{"title":".wip","category":null,"id":".wip","index":0},{"title":"Topics","category":".wip","id":"topics","index":1},{"title":"Accessibility","category":"topics","id":"accessibility_topics","algorithm":"Accessibility\n==\n\n## Glossary\n\n- **Accessibility** -\n- **WAI-ARIA** - Web Accessibility Initiative - Accessible Rich Internet Applications. Commonly shortened to ARIA.\n\n## What is Accessibility?\n\nMaking sure that the content and the websites we create are usable to people with impairments or disabilities.\n\n## WebAIM Checklist\n\nThe following is a checklist that contains recommendations for implementing HTML-related principles and techniques for those seeking WCAG 2.0 conformance (it is NOT the Web Content Accessibility Guidelines (WCAG) 2.0).\n\n- **Perceivable** - Web content is made available to the senses - sight, hearing, and/or touch.\n  - Text Alternatives: Provide text alternatives for any non-text content.\n  - Time-based Media: Provide alternatives for time-based media.\n  - Adaptable: Create content that can be presented in different ways (for example simpler layout) without losing information or structure.\n  - Distinguishable: Make it easier for users to see and hear content including separating foreground from background.\n- **Operable** - Interface forms, controls, and navigation are operable.\n  - Keyboard Accessible: Make all functionality available from a keyboard.\n  - Enough Time: Provide users enough time to read and use content.\n  - Seizures: Do not design content in a way that is known to cause seizures.\n  - Navigable: Provide ways to help users navigate, find content, and determine where they are.\n- **Understandable** - Content and interface are understandable.\n  - Readable: Make text content readable and understandable.\n  - Predictable: Make Web pages appear and operate in predictable ways.\n  - Input Assistance: Help users avoid and correct mistakes.\n- **Robust** - Content can be used reliably by a wide variety of user agents, including assistive technologies.\n  - Compatible: Maximize compatibility with current and future user agents, including assistive technologies.\n\n**Source:** http://webaim.org/standards/wcag/checklist\n\n## Focus\n\n- Making sure your application has a sensible tab order is important.\n- HTML forms and inputs are focusable and handle keyboard events by default.\n- Focus tab order relies on the DOM order in the HTML.\n- Be careful when using CSS when changing the order of elements on the screen, it can cause the order to be unintuitive and messy.\n- `tabindex` attribute:\n  - `-1`: Not in the natural tab order, but programatically focusable using JavaScript with `focus()` method. Useful for off-screen content which later appears on screen. Children elements are **NOT** pulled out of the tab order.\n  - `0`: In the natural tab order and can be programatically focused.\n  - `1` (bigger than 1): In the natural tab order but jumped in front of the tab order regardless of where it is in the DOM. It can be considered an anti-pattern.\n- Add focus behavior to interactive controls, like buttons, tabs, dropdowns, stuff that users will interactive with.\n- Use skip links to allow users to skip directly to the main content without having to tab through all the navigation.\n- `document.activeElement` is useful in tracking the current element that has focus on.\n\n## Semantics\n\n- Using proper labeling not only helps accessibility but it makes the element easier to target for all users!\n- Use `<label>` with `for` attributes for form elements.\n- Use `alt` attribute for `<img>` elements. Alt text must describe the image.\n- TODO\n\n## Navigating Content\n\n- MacOS comes built-in with VoiceOver. Press <kbd>CMD</kbd> + <kbd>F5</kbd> to activate.\n  - Activate Web Rotor with <kbd>Ctrl</kbd> + <kbd>Option</kbd> + <kbd>U</kbd>. Web Rotor displays landmarks, headings, links and more on the page and allows you to jump to them directly.\n- Heading weight should be decided by its importance on the page and not how big it should look, as the heading tag chosen affects the order the headings are listed on screen readers.\n- Use HTML5 semantic tags like `<main>`, `<nav>`, `<header>`, `<aside>`, `<article>`, `<section>`, `<footer>` to indicate landmarks on the page.\n\n## ARIA\n\n- Express semantics that HTML can't express on its own.\n- Accessibility tree = DOM + ARIA.\n- ARIA attributes\n  - Allow us to modify the accessibility tree before they are exposed to assistive technologies.\n  - DO NOT modify the element appearance.\n  - DO NOT modify element behaviour.\n  - DO NOT add focusability.\n  - DO NOT add keyboard event handling.\n- E.g. for custom checkboxes, adding ARIA attributes is not sufficient, you will need to write your own JavaScript to emulate the native behaviour to synchronize the ARIA attributes and values with the actual visual state, such as toggling using clicks and hitting spacebar. It's probably not worth it to reinvent the wheel by writing your own custom widgets that already exist in HTML5.\n- ARIA can add semantics to elements that have no native semantics, such as `<div>`. ARIA can also modify element semantics.\n- ARIA allows developers to create accessible widgets that do not exist in HTML5, such as a tree widget.\n- `aria-role` attributes tell assistive technologies that the element should follow that role's accessibility patterns. There are well-defined roles in the HTML spec. Do not define them on your own.\n  - `tabindex=\"0\"` is usually added to it elements that have `role` added so that it can be focused.\n- Assistive labelling\n  - `aria-label` is useful for labelling buttons where the content is empty or contains only icons.\n  - `aria-labelledby` is similar to `<label>` elements, and can be used on any elements.\n    ```html\n    /* Normal label example */\n    <input type=\"radio\" id=\"coffee-label\">\n    <label for=\"coffee-label\">Coffee</label>\n\n    /* aria-labelledby example */\n    <div role=\"radio\" aria-labelledby=\"coffee-label\"></div>\n    <span id=\"coffee-label\">Coffee</span>\n    ```\n- ARIA Relationships\n  - ARIA relationship attributes create semantic relationships between elements on the page. The `aria-labelledby` attribute in the previous example indicates that the `<div>` is labelled by the element with that `id`.\n  - Possible relationship attributes include `aria-activedescendent`, `aria-describedby`, `aria-labelledby`, `aria-owns`, `aria-posinset` and `aria-setsize`.\n- With ARIA, you can expose only relevant parts of the page to accessibility tree. Elements can be hidden via:\n  - Setting `visibility`: `<button style=\"visibility: hidden\">`.\n  - Setting `display`: `<button style=\"display: none\">`.\n  - HTML5 `hidden` attribute: `<span hidden>`. This makes the element hidden to everyone.\n  - `aria-hidden` attribute: `<div aria-hidden=\"true\">`. This makes the element hidden to screenreaders too. Note that `aria-hidden` attribute requires an explicit value of `true` or `false`.\n- Technique for screenreader-only text:\n  ```\n  .screenreader {\n    position: absolute;\n    left: -1000px;\n    width: 1px;\n    height: 1px;\n    overflow: hidden;\n  }\n  ```\n- `aria-live` attribute can be used to grab the assistive technology's attention to cause it to announce updates to the user. Practically, include `aria-live` attributes in the initial page load. The different `aria-live` values include:\n  - `off` (default) - Updates will not be presented unless the region is currently focused.\n  - `polite` - Assistive technologies should announce updates at the next graceful opportunity, such as at the end of speaking the current sentence on when the user pauses typing. Such as receiving new chat messages.\n  - `assertive` - Highest priority and assistive technologies should notify the user immediately. Examples include server status error alerts.\n- `aria-atomic` attribute indicates whether the entire region should be presented as a whole when communicating updates. Such as a date widget comprising of multiple `<input>` fields for day/month/year. When the user changes a field, the full contents of the widget will be read out. It takes in a `true` or `false` value.\n- `aria-relevant` attribute indicates what types of changes should be presented to the user.\n  - `additions` - Element nodes are added to the DOM within the live region.\n  - `removals` - Text or element nodes within the live region are removed from the DOM.\n  - `text` - Text is added to any DOM descendant nodes of the live region.\n  - `all` - Equivalent to the combination of all values, `additions removals text`.\n  - `additions text` (default) - Equivalent to the combination of values, `additions text`.\n- `aria-busy` attribute indicates the assistive technologies should ignore changes to the element, such as when things are loading, for example after a temporary connectivity loss. It takes in `true` or `false`. It takes in a `true` or `false` value.\n\n## Style\n\n#### Introduction\n\n- Ensure elements are styled to support the existing accessibility work, such as adding styles for `:focus` and the various ARIA states.\n- Flexible user interface that can handle being zoomed or scaled up, for users who have trouble reading smaller text.\n- Color choices and the importance of contrast, making sure we are not conveying information just with color alone.\n\n#### Focus\n\n- As much as possible, leave the default focus in place. Do not remove the `:focus` styling just because it does not fit into your design or looks odd! - A good technique is to use a similar styling as `:hover` for `:focus`.\n- Some CSS resets would kill off the focus styling, so it's important to be aware of them and get them back.\n\n#### Styling with ARIA\n\nConsider using ARIA attributes in your CSS selectors to reduce some noise in your CSS. For custom toggle buttons, instead of doing this,\n\n```html\n<div class=\"toggle pressed\" role=\"button\" tabindex=\"0\" aria-pressed=\"true\"></div> /* On */\n<div class=\"toggle\" role=\"button\" tabindex=\"0\" aria-pressed=\"false\"></div> /* Off */\n\n.toggle.pressed {\n  ...\n}\n```\n\nyou can do this instead:\n\n```html\n<div class=\"toggle\" role=\"button\" tabindex=\"0\" aria-pressed=\"true\"></div> /* On */\n<div class=\"toggle\" role=\"button\" tabindex=\"0\" aria-pressed=\"false\"></div> /* Off */\n\n.toggle[aria-pressed=\"true\"] {\n  ...\n}\n```\n\nwhich removes the need for toggling the `press` class on the element.\n\n#### Responsive Design\n\nResponsive design is also beneficial for accessibility when zooming the page transforms the page into the mobile layout instead.\n\nUse a meta viewport tag:\n\n```\n<meta name=\"viewport\" content=\"width=device-width initial-scale=\"1\">\n```\n\n`user-scalable=no` is an anti-pattern for accessibility.\n\nUse relative units like `%`, `em` and `rem`. The differences are as follows:\n\n- `%` - Relative to the containing block.\n- `em` - Relative to the `font-size` of the parent.\n- `rem` - Relative to the `font-size` of the root, which is the `<html>` element.\n\nInteractive interface elements such as buttons should be large enough, have enough spacing around itself so that they do not overlap with other interactive elements.\n\n#### Color and Contrast\n\nContrast ratio is the ratio of luminance between the foreground color (such as text) and the background color. For text and images, aim for a large contrast ratio of 7:1 and for larger text (over 18 point or 14 point bold), aim for at least 4.5:1.\n\nChrome Devtools has an Accessibility audit feature that can flag the contrast issues on your page.\n\nColor should not be used as the sole method of conveying content or distinguishing visual elements, such as only changing the `border-color` of `<input>` fields that have error to red. These changes will not be obvious/visible to people with color blindness. An error message below the field will be helpful.\n\nSome users might be using a High Contrast mode which allows a user to invert the background and foreground colors to read text better. Ensure that your page also looks fine on High Contrast mode which you can simulate with a [Chrome High Contrast extension](https://chrome.google.com/webstore/detail/high-contrast/djcfdncoelnlbldjfhinnjlhdjlikmph?hl=en).\n\n#### Assessing Impact of Accessibility Issues\n\nFixing accessibility issues is like fixing bugs; it is best looked at through the lens of impact. How can you have the most impact on users with the least amount of effort?\n\n- How frequent is this piece of UI used? Is it part of a critical flow?\n- How badly does this accessibility issue affect your users?\n- How expensive is it going to cost to fix?\n\n###### References\n\n- https://www.udacity.com/course/web-accessibility--ud891\n","filetype":".md","index":2},{"title":"Browser","category":"topics","id":"browser_topics","algorithm":"Browser\n==\n\n## Glossary\n\n- **BOM** - The Browser Object Model (BOM) is a browser-specific convention referring to all the objects exposed by the web browser. The `window` object is one of them.\n- **CSSOM** - CSS Object Model.\n- **DOM** - The Document Object Model (DOM) is a cross-platform and language-independent convention for representing and interacting with objects in HTML, XHTML, and XML documents.\n- **Reflow** - When the changes affect document contents or structure, or element position, a reflow (or relayout) happens.\n- **Repaint** - When changing element styles which don't affect the element's position on a page (such as `background-color`, `border-color`, `visibility`), the browser just repaints the element again with the new styles applied (that means a \"repaint\" or \"restyle\" is happening).\n- **Composite** - TODO\n\n## Rendering\n\nHigh level flow of how browsers render a webpage:\n\n1. DOM\n  - The DOM (Document Object Model) is formed from the HTML that is received from a server.\n  - Characters -> Tokens -> Nodes -> DOM.\n  - DOM construction is incremental.\n  - CSS and JS are requested as the respective `<link>` and `<script>` tags are encountered.\n1. CSSOM\n  - Styles are loaded and parsed, forming the CSSOM (CSS Object Model).\n  - Characters -> Tokens -> Nodes -> CSSOM.\n  - CSSOM construction is not incremental.\n  - Browser blocks page rendering until it receives and processes all the CSS.\n  - CSS is render blocking.\n1. Render Tree\n  - On top of DOM and CSSOM, a render tree is created, which is a set of objects to be rendered. Render tree reflects the DOM structure except for invisible elements (like the <head> tag or elements that have `display: none`; set). Each text string is represented in the rendering tree as a separate renderer. Each of the rendering objects contains its corresponding DOM object (or a text block) plus the calculated styles. In other words, the render tree describes the visual representation of a DOM.\n1. Layout\n  - For each render tree element, its coordinates are calculated, which is called \"layout\". Browsers use a flow method which only required one pass to layout all the elements (tables require more than one pass).\n1. Painting\n  - Finally, this gets actually displayed in a browser window, a process called \"painting\".\n\n###### References\n\n- http://taligarsiel.com/Projects/howbrowserswork1.htm\n- https://medium.freecodecamp.org/its-not-dark-magic-pulling-back-the-curtains-from-your-stylesheets-c8d677fa21b2\n\n## Repaint\n\nWhen changing element styles which don't affect the element's position on a page (such as `background-color`, `border-color`, `visibility`), the browser just repaints the element again with the new styles applied (that means a \"repaint\" or \"restyle\" is happening).\n\n## Reflow\n\nWhen the changes affect document contents or structure, or element position, a reflow (or relayout) happens. These changes are usually triggered by:\n- DOM manipulation (element addition, deletion, altering, or changing element order)\n- Contents changes, including text changes in form fields\n- Calculation or altering of CSS properties\n- Adding or removing style sheets\n- Changing the \"class\" attribute\n- Browser window manipulation (resizing, scrolling); Pseudo-class activation (`:hover`)\n\n#### References\n\n- [How Browsers Work](http://taligarsiel.com/Projects/howbrowserswork1.htm)\n- [What Every Frontend Developer Should Know About Webpage Rendering](http://frontendbabel.info/articles/webpage-rendering-101/)\n- [Rendering: repaint, reflow/relayout, restyle](http://www.phpied.com/rendering-repaint-reflowrelayout-restyle/)\n- [Building the DOM faster: speculative parsing, async, defer and preload](https://hacks.mozilla.org/2017/09/building-the-dom-faster-speculative-parsing-async-defer-and-preload/)\n","filetype":".md","index":3},{"title":"Caching","category":"topics","id":"caching_topics","algorithm":"Caching\n==\n\nWIP.\n\n## Glossary\n\n- **Cookies**\n\n#### References\n\n- [A Tale of Four Caches](https://calendar.perfplanet.com/2016/a-tale-of-four-caches/)\n- [Web Caching Basics: Terminology, HTTP Headers, and Caching Strategies](https://www.digitalocean.com/community/tutorials/web-caching-basics-terminology-http-headers-and-caching-strategies)\n- [This browser tweak saved 60% of requests to Facebook](https://code.facebook.com/posts/557147474482256/this-browser-tweak-saved-60-of-requests-to-facebook/)\n","filetype":".md","index":4},{"title":"Css","category":"topics","id":"css_topics","algorithm":"CSS\n==\n\nCSS (Cascading Style Sheets) are rules to describe how your HTML elements look. Writing good CSS is hard. It usually takes many years of experience and frustration of shooting yourself in the foot before one is able to write maintainable and scalable CSS. CSS, having a global namespace, is fundamentally designed for web documents, and not really for web apps that favor a components architecture. Hence, experienced front end developers have designed methodologies to guide people on how to write organized CSS for complex projects, such as using [SMACSS](https://smacss.com/), [BEM](http://getbem.com/), [SUIT CSS](http://suitcss.github.io/), etc.\n\nHowever, the encapsulation of styles that these methodologies bring about are artificially enforced by conventions and guidelines. They break the moment developers do not follow them.\n\nAs you might have realized by now, the front end ecosystem is saturated with tools, and unsurprisingly, tools have been invented to [partially solve some of the problems](https://speakerdeck.com/vjeux/react-css-in-js) with writing CSS at scale. \"At scale\" means that many developers are working on the same large project and touching the same stylesheets. There is no community-agreed approach on writing [CSS in JS](https://github.com/MicheleBertoli/css-in-js) at the moment, and we are hoping that one day a winner would emerge, just like Redux did, among all the Flux implementations. For now, I would recommend [CSS Modules](https://github.com/css-modules/css-modules). CSS modules is an improvement over existing CSS that aims to fix the problem of global namespace in CSS; it enables you to write styles that are local by default and encapsulated to your component. This feature is achieved via tooling. With CSS modules, large teams can write modular and reusable CSS without fear of conflict or overriding other parts of the app. However, at the end of the day, CSS modules are still being compiled into normal globally-namespaced CSS that browsers recognize, and it is still important to learn and understand how raw CSS works.\n\nIf you are a total beginner to CSS, Codecademy's [HTML & CSS course](https://www.codecademy.com/learn/learn-html-css) will be a good introduction to you. Next, read up on the [Sass preprocessor](http://sass-lang.com/), an extension of the CSS language which adds syntactic improvements and encourages style reusability. Study the CSS methodologies mentioned above, and lastly, CSS modules.\n\n## Glossary\n\n- [**Box Model**](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model) - The CSS box model describes the rectangular boxes that are generated for elements in the document tree and laid out according to the visual formatting model. Each box has a content area (e.g. text, an image, etc.) and optional surrounding padding, border, and margin areas.\n- [**Specificity**](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity) - Specificity is how browsers decide which CSS property values are the most relevant to an element and, will therefore be applied. It is a weight that is applied to a given CSS declaration, determined by the number of each selector type in the matching selector. \n  - When multiple declarations have equal specificity, the last declaration found in the CSS is applied to the element. It only applies when the same element is targeted by multiple declarations. As per CSS rules, directly targeted elements will always take precedence over rules which an element inherits from its ancestor.\n  - Typically used in type selectors/pseduo elements (`h1`, `div`, `:before`), class/attribute selectors (`.btn`, `[type=\"radio\"]`), pseudo-classes (`:hover`) and ID selectors (`#someElement`).\n  - Inline styles added to an element always overwrite any styles in external stylesheets, and thus can be thought of as having the highest specificity.\n  - When an important rule (`!important`) is used on a style declaration, this declaration overrides any other declarations. Try to avoid using `!important`, as it breaks  the natural cascading in the stylesheets. Always look for a way to use specificity before even considering `!important`, and only use !important on page-specific CSS that overrides foreign CSS (from external libraries, like Bootstrap).\n- [**Positioning**](https://developer.mozilla.org/en-US/docs/Web/CSS/position) - The position CSS property determines how an element will be positioned in a document. The `top`, `right`, `bottom`, and `left` properties would later determine the final location of said positioned element.\n  - Initial value: `static`\n  - Values that are frequently used: `relative`, `absolute`, `fixed`, `sticky`\n- [**Floats**](https://developer.mozilla.org/en-US/docs/Web/CSS/float) - The `float` CSS property determines where an element should be placed - along the left or right side of its container. This allows text and inline elements to wrap around it. Also note, the element would be removed from the normal *flow* of the web page, though still remaining a part of the flow (in contrast to `position: absolute`). For an element to be `float`, it's value must not be `none`.\n  - Initial value: `none`\n  - Values that are frequently used: `left`, `right`, `inline-start`, `inline-end`.\n  - Additional Notes: Usually, there would be cases that you may want to move an item below any floated elements. E.g, you may want some elements like your paragraphs to remain adjacent to floats, but force headings and footers to be on their own line. See [`clear` attribute](https://developer.mozilla.org/en-US/docs/Web/CSS/clear) for more examples\n\n## Writing CSS without Side Effects\n\nTODO\n\n###### References\n\n- https://philipwalton.com/articles/side-effects-in-css/\n","filetype":".md","index":5},{"title":"Design","category":"topics","id":"design_topics","algorithm":"Design Questions\n==\n\n## Autocomplete Widget\n\nTalk me through a full stack implementation of an autocomplete widget. A user can type text into it, and get back results from a server.\n- How would you design a frontend to support the following features:\n  - Fetch data from a backend API\n  - Render results as a tree (items can have parents/children - it's not just a flat list)\n  - Support for checkbox, radio button, icon, and regular list items - items come in many forms\n- What does the component's API look like?\n- What does the backend API look like?\n- What perf considerations are there for complete-as-you-type behavior? Are there any edge cases (for example, if the user types fast and the network is slow)?\n- How would you design the network stack and backend in support of fast performance: how do your client/server communicate? How is your data stored on the backend? How do these approaches scale to lots of data and lots of clients?\n","filetype":".md","index":6},{"title":"Dom","category":"topics","id":"dom_topics","algorithm":"DOM\n==\n\n## Glossary\n\n- **Event Delegation** - Event delegation refers to the process of using event propagation (bubbling) to handle events at a higher level in the DOM than the element on which the event originated. It allows us to attach a single event listener for elements that exist now or in the future.\n\n## Node API\n\nHere's a list of the essential and more common DOM `Node` APIs. It is important to know how to traverse and manipulate the DOM in vanilla JS without jQuery.\n\n**Properties**\n\n- `Node.childNodes` - Returns a live `NodeList` containing all the children of this node. `NodeList` being live means that if the children of the Node change, the `NodeList` object is automatically updated.\n- `Node.firstChild`\n- `Node.lastChild`\n- `Node.nextSibling` - Returns a `Node` representing the next node in the tree, or `null` if there isn't such a node.\n- `Node.nodeName` - `DIV`, `SPAN`, etc. Note that it is in upper case in HTML documents, and has the same value as `Element.tagName`.\n- `Node.parentNode` - Returns a `Node` that is the parent of this node. If there is no such node, like if this node is the top of the tree or if it doesn't participate in a tree, this property returns `null`.\n- `Node.parentElement` - Returns an `Element` that is the parent of this node. If the node has no parent, or if that parent is not an `Element`, this property returns `null`.\n- `Node.previousSibling` - Returns a `Node` representing the previous node in the tree, or `null` if there isn't such a node.\n- `Node.textContent` - Returns / Sets the textual content of an element and all its descendants.\n\n**Methods**\n\n- `Node.appendChild(node)` - Adds the specified `node` argument as the last child to the current node. If the argument referenced an existing node on the DOM tree, the node will be detached from its current position and attached at the new position.\n- `Node.cloneNode(node)` - Clone a `Node`, and optionally, all of its contents. By default, it clones the content of the node.\n- `Node.contains(node)` - Returns a `Boolean` value indicating whether a node is a descendant of a given node or not.\n- `Node.hasChildNodes()` - Returns a `Boolean` indicating if the element has any child nodes, or not.\n- `Node.insertBefore(newNode, referenceNode)` - Inserts the first `Node` before the reference node as a child of the current node. If `referenceNode` is `null`, the `newNode` is inserted at the end of the list of child nodes.\n- `Node.removeChild(node)` - Removes a child node from the current element, which must be a child of the current node.\n- `Node.replaceChild(newChild, oldChild)` - Replaces one child node of the specified node with another node.\n\n## Element API\n\nHere's a list of the essential and more common DOM `Element` APIs. It is important to know how to traverse and manipulate the DOM in vanilla JS without jQuery.\n\n**Properties**\n\n- `Element.attributes` - Returns a `NamedNodeMap` object containing the assigned attributes of the corresponding HTML element.\n- `Element.classList` - Returns a `DOMTokenList` containing the list of class attributes.\n  - `DOMTokenList.add(String [, String])` - Add specified class values. If these classes already exist in attribute of the element, they are ignored.\n  - `DOMTokenList.remove(String [, String])` - Remove specified class values.\n  - `DOMTokenList.toggle(String [, force])` - Toggle specified class value. If second argument is present and evaluates to `true`, add the class value, else remove it.\n  - `DOMTokenList.contains(String)` - Checks if specified class value exists in class attribute of the element.\n- `Element.className` - A `DOMString` representing the class of the element.\n- `Element.id`\n- `Element.innerHTML` - Returns a `DOMString` representing the markup of the element's content or parse the content string and assigns the resulting nodes as children of the element.\n- `Element.tagName` - `DIV`, `SPAN`, etc. Note that it is in upper case in HTML documents, and has the same value as `Node.nodeName`.\n\n**Methods**\n\n- `EventTarget.addEventListener(type, callback, options)` - Registers an event handler to a specific event type on the element. Read up more on the `options` [here](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener).\n- `EventTarget.removeEventListener(type, callback, options)` - Removes an event listener from the element. Read up more on the `options` [here](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener).\n- `Element.closest(selectors)` - Returns the closest ancestor of the current element (or the current element itself) which matches the selectors given in parameter. If there isn't such an ancestor, it returns `null`.\n- `Element.getElementsByClassName(classNames)`- Returns a live `HTMLCollection` that contains all descendants of the current element that possess the list of classes given in the parameter.\n- `Element.getElementsByTagName(tagName)` - Returns a live `HTMLCollection` containing all descendant elements, of a particular tag name, from the current element.\n- `Element.querySelector(selectors)` - Returns the first `Node` which matches the specified selector string relative to the element.\n- `Element.querySelectorAll(selectors)` - Returns a `NodeList` of nodes which match the specified selector string relative to the element.\n- `ChildNode.remove()` - Removes the element from the children list of its parent. TODO: Check whether it's `Element` or `ChildNode`.\n- `Element.setAttribute(attrName, value)` - Sets the value of a named attribute of the current node.\n- `Element.removeAttribute(attrName)` - Removes the named attribute from the current node.\n\n## Document API\n\n- `document.getElementById(id)` - An Element object, or null if an element with the specified ID is not in the document.\n\n## Window/Document Events\n\n- `document.addEventListener('DOMContentLoaded', callback)`\n  - The `DOMContentLoaded` event is fired when the initial HTML document has been completely loaded and parsed, without waiting for stylesheets, images, and subframes to finish loading. Similar to `jQuery.ready()` but different because `$.ready` will execute immediately if the `DOMContentLoaded` event has already fired.\n  - This corresponds to `document.readyState === 'interactive'`.\n- `window.onload = function() {}`\n  - `window`'s `load` event is only fired after the DOM and all assets have loaded.\n  - This corresponds to `document.readyState === 'complete'`.\n\n## Questions\n\n**What's the difference between `Node.children` and `Node.childNodes`?**\n\n`Node.children` returns a live `HTMLCollection` of the child `elements` of `Node`. `Node.childNodes` returns a `NodeList`, an ordered collection of DOM nodes that are children of the current `Element`. `childNodes` includes all child nodes, including non-element nodes like text and comment nodes. To get a collection of only elements, use `Node.children` instead.\n\n**What's the difference between `NodeList` and `HTMLCollection`?**\n\nA `NodeList` can contain any node type, but an `HTMLCollection` is supposed to only contain `Element` nodes. `HTMLCollection` is always live and is a superset of `NodeList`. `NodeList` need not be live.\n\n**How do you convert an `HTMLCollection` or `NodeList` into an array?**\n\n```js\nconst nodelist = document.querySelectorAll('div');\n// Array.from\nconst divArray = Array.from(nodelist);\n// Array.prototype.slice\nconst divArray2 = Array.prototype.slice.call(nodelist); // or .apply\n// ES2015 Spread\nconst divArray3 = [...nodeList];\n```\n\n## References\n\n- https://developer.mozilla.org/en-US/docs/Web/API/Node\n- https://developer.mozilla.org/en-US/docs/Web/API/Element\n","filetype":".md","index":7},{"title":"Html","category":"topics","id":"html_topics","algorithm":"HTML\n==\n\nHTML (Hypertext Markup Language) is the structure that all websites are built on. Anyone working on websites and webapps should have a basic understanding of HTML at the very least. A helpful analogy for understanding the importance of HTML is the house scenario. When building a new house, the process can be split into a few key areas; structure (HTML), aesthetics (CSS) and furniture (Content). The HTML is your basic page structure, without the structure, you cannot change how it looks using CSS, or what content is on the page.\n\n## Glossary\n\n- **Doctype**\n\n## Deprecated Tags\n\nThere are a number of tags from past versions of HTML that have become deprecated over time. This means that while they are no longer considered valid elements, most browsers should still be able to read and render them. \n\n## Script Loading\n\n- `<script>` - HTML parsing is blocked, the script is fetched and executed immediately, HTML parsing resumes after the script is executed.\n- `<script async>` - The script will be fetched in parallel to HTML parsing and executed as soon as it is available (potentially before HTML parsing completes). Use `async` when the script is independent of any other scripts on the page, for example analytics.\n- `<script defer>` - The script will be fetched in parallel to HTML parsing and executed when the page has finished parsing. If there are multiple of them, each deferred script is executed in the order they were encoun­tered in the document.\n","filetype":".md","index":8},{"title":"Javascript","category":"topics","id":"javascript_topics","algorithm":"JavaScript\n==\n\nWIP.\n\n## Contents\n\n- [Glossary](#glossary)\n- [Core Language](#core-language)\n- [Design Patterns](#design-patterns)\n- [Strict Mode](#strict-mode)\n\n## Glossary\n\n- **Closure** - \"Closure is when a function is able to remember and access its lexical scope even when that function is executing outside its lexical scope.\" - [YDKJS](https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20%26%20closures/ch5.md)\n- **Event Loop** - The event loop is a single-threaded loop that monitors the call stack and checks if there is any work to be done in the message queue. If the call stack is empty and there are callback functions in the message queue, a message is dequeued and pushed onto the call stack to be executed.\n- **Hoisting** - \"Wherever a var appears inside a scope, that declaration is taken to belong to the entire scope and accessible everywhere throughout.\" - [YDKJS](https://github.com/getify/You-Dont-Know-JS/blob/master/up%20%26%20going/ch2.md#hoisting)\n- **Promise** - \"The Promise object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value.\" - [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\n  - Promises can contain an immediate value.\n- **Prototype** - TBD\n- **This** - The `this` keyword does not refer to the function in which `this` is used or that function's scope. Javascript uses [4 rules](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch2.md#determining-this) to determine if `this` will reference an arbitrary object, *undefined* or the *global* object inside a particular function call.\n\n## Core Language\n\n### Variables\n\n- Reference: [Types and Grammar](https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch1.md)\n- Types\n- Scopes\n- [Coercion](https://github.com/getify/You-Dont-Know-JS/blob/master/up%20%26%20going/ch2.md#coercion)\n\n### Functions\n\n- Reference: [this & Object Prototypes](https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20%26%20closures/ch3.md)\n- Declaration vs Expression\n- Closures\n- `.call`, `.apply` and `.bind`\n- Currying\n- Arrow functions and lexical this\n\n### Prototypes and Objects\n\n- Reference: [this & Object Prototypes](https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20&%20closures/README.md#you-dont-know-js-scope--closures)\n- Prototype chain\n- `this` keyword\n  - https://rainsoft.io/gentle-explanation-of-this-in-javascript/\n  - https://codeburst.io/the-simple-rules-to-this-in-javascript-35d97f31bde3\n- Classes\n  - Methods\n    - Use non-arrow functions for methods that will be called using the `object.method()` syntax because you need the value of `this` to point to the instance itself.\n\n### Async\n\n- Reference: [Async and Peformance](https://github.com/getify/You-Dont-Know-JS/blob/master/async%20&%20performance/README.md#you-dont-know-js-async--performance)\n- `setTimeout`, `setInterval` and event loop\n  - [setImmediate() vs nextTick() vs setTimeout(fn,0)](http://voidcanvas.com/setimmediate-vs-nexttick-vs-settimeout/)\n- Event Loop\n- Debounce and Throttle\n  - Throttling enforces a maximum number of times a function can be called over time.\n  - Debouncing enforces that a function not be called again until a certain amount of time has passed without it being called.\n  - https://css-tricks.com/debouncing-throttling-explained-examples/\n- Callbacks\n- [Promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\n- [Async](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function) and [Await](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await) in ES7\n\n**Reference**\n\n- https://www.vikingcodeschool.com/falling-in-love-with-javascript/the-javascript-event-loop\n\n## Design Patterns\n\n- https://addyosmani.com/resources/essentialjsdesignpatterns/book/\n\n## Strict Mode\n\n1. Strict mode eliminates some JavaScript silent errors by changing them to throw errors.\n1. Strict mode fixes mistakes that make it difficult for JavaScript engines to perform optimizations. Strict mode code can sometimes be made to run faster than identical code that's not strict mode.\n1. Strict mode prohibits some syntax likely to be defined in future versions of ECMAScript.\n\n**Converting Mistakes into Errors**\n\n- Prevent accidental creation of global variables.\n- Makes assignments which would otherwise silently fail throw an exception.\n- Makes attempts to delete undeletable properties throw errors.\n- Requires that all properties named in an object literal be unique. Duplicate property names are a syntax error in strict mode.\n- Requires that function parameter names be unique. In normal code the last duplicated argument hides previous identically-named arguments.\n- Forbids setting properties on primitive values in ES6. Without strict mode, setting properties is simply ignored (no-op), with strict mode, however, a `TypeError` is thrown.\n\n**Simplifying Variable Uses**\n\n- Prohibits `with`.\n- `eval` of strict mode code does not introduce new variables into the surrounding scope.\n- Forbids deleting plain variables. `delete` name in strict mode is a syntax error: `var x; delete x; // !!! syntax error`.\n\n**Paving the way for future ECMAScript versions**\n\n- Future ECMAScript versions will likely introduce new syntax, and strict mode in ECMAScript 5 applies some restrictions to ease the transition. It will be easier to make some changes if the foundations of those changes are prohibited in strict mode.\n- First, in strict mode a short list of identifiers become reserved keywords. These words are `implements`, `interface`, `let`, `package`, `private`, `protected`, `public`, `static`, and `yield`. In strict mode, then, you can't name or use variables or arguments with these names.\n- Second, strict mode prohibits function statements not at the top level of a script or function.\n\n## Transpilation: TBD\n\n## Useful Links\n\n- https://medium.com/javascript-scene/10-interview-questions-every-javascript-developer-should-know-6fa6bdf5ad95#.l2n8icwl4\n- https://github.com/mbeaudru/modern-js-cheatsheet\n- [Functional Programming in Javascript - Javascript Allonge](https://leanpub.com/javascriptallongesix/read)\n- [Dr. Frisby's Mostly Adequate Guide to Functional Programming](https://drboolean.gitbooks.io/mostly-adequate-guide/content/)\n","filetype":".md","index":9},{"title":"Networking","category":"topics","id":"networking_topics","algorithm":"Networking\n==\n\nWIP.\n\n## Glossary\n\n- **JSON**\n- **RPC**\n- **HTTP**\n- **HTTP/2**\n","filetype":".md","index":10},{"title":"Performance","category":"topics","id":"performance_topics","algorithm":"Performance\n==\n\nWIP.\n\n## Glossary\n\n- **Critical Rendering Path** -\n- `requestAnimationFrame`\n\n## General Strategies\n\n1. Minimize Bytes.\n1. Reduce critical resources.\n1. Reduce CRP length. TODO: Explain what CRP length is.\n\n## Loading\n\n- Minify, Compress, Cache assets.\n- Browsers have a [preloader](https://andydavies.me/blog/2013/10/22/how-the-browser-pre-loader-makes-pages-load-faster/) to load assets ahead of time.\n\n## Rendering\n\n- Remove whitespace and comments from HTML/CSS/JS file via minification.\n- CSS\n  - CSS blocks rendering AND JavaScript execution.\n  - Split up CSS for fewer rendering blocking CSS stylesheets by using media attributes.\n    - Download only the necessary CSS before the browser can start to render.\n    - https://developers.google.com/web/fundamentals/design-and-ui/responsive/#css-media-queries\n  - Use Simpler selectors.\n- JavaScript\n  - JS blocks HTML parsing. If the script is external, it will have to be downloaded first. This incurs latency in network and execution.\n  - Shift `<script>` tags to the bottom.\n  - Async:\n    - Scripts that don't modify the DOM or CSSOM can use the `async` attribute to tell the browser not to block DOM parsing and does not need to wait for the CSSOM to be ready.\n  - Defer JavaScript execution:\n    - There is also a `defer` attribute available. The difference is that with `defer`, the script waits to execute until after the document has been parsed, whereas `async` lets the script run in the background while the document is being parsed.\n  - Use web workers for long running operations to move into a web worker thread.\n  - Use `requestAnimationFrame`\n\n###### References\n\n- https://bitsofco.de/understanding-the-critical-rendering-path/\n\n## Measuring\n\n- [Navigation Timing API](https://developer.mozilla.org/en/docs/Web/API/Navigation_timing_API) is a JavaScript API for accurately measuring performance on the web. The API provides a simple way to get accurate and detailed timing statistics natively for page navigation and load events.\n  - `performance.timing`: An object with the timestamps of the various events on the page. Some uses:\n    - Network latency: `responseEnd` - `fetchStart`.\n    - The time taken for page load once the page is received from the server: `loadEventEnd` - `responseEnd`.\n    - The whole process of navigation and page load: `loadEventEnd` - `navigationStart`.\n\n## Tools\n\n- Yahoo YSlow\n- Google PageSpeed Insights\n- WebPageTest\n- Sitespeed.io\n- Google Lighthouse\n\n## Web Performance Rules\n\n- https://developers.google.com/web/fundamentals/performance/critical-rendering-path/measure-crp\n- http://stevesouders.com/hpws/rules.php\n- https://developer.yahoo.com/performance/rules.html\n- https://browserdiet.com/en/\n","filetype":".md","index":11},{"title":"Security","category":"topics","id":"security_topics","algorithm":"Security\n==\n\n## Glossary\n\n- **CORS** - Cross-Origin Resource Sharing (CORS).\n- **CSRF** - Cross-Site request forgery (CSRF) is an attack that forces an end user to execute unwanted actions on a web application in which they're currently authenticated.\n- **XSS** - Cross-site scripting (XSS).\n\n## CORS\n\nThe same-origin policy protects users by disallowing websites to retrieve information from other websites of different origins. An origin is the triple {protocol, host, port}. Two resources are considered to be of the same origin if and only if all these values are exactly the same.\n\nCross-Origin Resource Sharing allows relaxing of the same-origin policy. CORS defines a way in which a browser and server can interact to determine whether or not it is safe to allow the cross-origin request.\n\nThis standard extends HTTP with a new `Origin` request header and `Access-Control-Allow-Origin` and `Access-Control-Allow-Methods` response headers. It allows servers to use a header to explicitly list origins and HTTP methods that may request a file or to use a wildcard and allow a file to be requested by any site. `XMLHttpRequest`s to a target origin from a different source origin will be blocked if the server did not allow CORS for source origin.\n\n## CSRF\n\nXSS vulnerabilities allow attackers to bypass essentially all CSRF preventions.\n\n#### Protection\n\n- Verifying Same Origin with Standard Headers\n  - There are two steps to this check:\n    1. Determining the origin the request is coming from (source origin).\n    2. Determining the origin the request is going to (target origin).\n  - Examine the `Origin`, `Referer` and `Host` Header values.\n- Synchronizer Tokens\n  - The CSRF token is added as a hidden field for forms or within the URL.\n  - Characteristics of a CSRF Token\n    - Unique per user session\n    - Large random value\n    - Generated by a cryptographically secure random number generator\n  - The server rejects the requested action if the CSRF token fails validation.\n- Double Cookie\n  - When a user visits a site, the site should generate a (cryptographically strong) pseudorandom value and set it as a cookie on the user's machine. The site should require every form submission to include this pseudorandom value as a form value and also as a cookie value. When a POST request is sent to the site, the request should only be considered valid if the form value and the cookie value are the same. When an attacker submits a form on behalf of a user, he can only modify the values of the form. An attacker cannot read any data sent from the server or modify cookie values, per the same-origin policy. This means that while an attacker can send any value he wants with the form, he will be unable to modify or read the value stored in the cookie. Since the cookie value and the form value must be the same, the attacker will be unable to successfully submit a form unless he is able to guess the pseudorandom value.\n  - The advantage of this approach is that it requires no server state; you simply set the cookie value once, then every HTTP POST checks to ensure that one of the submitted <input> values contains the exact same cookie value. Any difference between the two means a possible XSRF attack.\n- Cookie-to-Header Token\n  - On login, the web application sets a cookie containing a random token that remains the same for the whole user session\n    - `Set-Cookie: Csrf-token=i8XNjC4b8KVok4uw5RftR38Wgp2BFwql; expires=Thu, 23-Jul-2015 10:25:33 GMT; Max-Age=31449600; Path=/`\n  - JavaScript operating on the client side reads its value and copies it into a custom HTTP header sent with each transactional request\n    - `X-Csrf-Token: i8XNjC4b8KVok4uw5RftR38Wgp2BFwql`\n  - The server validates presence and integrity of the token.\n  - Security of this technique is based on the assumption that only JavaScript running within the same origin will be able to read the cookie's value.\n  - JavaScript running from a rogue file or email will not be able to read it and copy into the custom header. Even though the `csrf-token` cookie will be automatically sent with the rogue request, the server will be still expecting a valid `X-Csrf-Token` header.\n- Use of Custom Request Headers\n  - An alternate defense which is particularly well suited for AJAX endpoints is the use of a custom request header. This defense relies on the same-origin policy (SOP) restriction that only JavaScript can be used to add a custom header, and only within its origin. By default, browsers don't allow JavaScript to make cross origin requests. Such a header can be `X-Requested-With: XMLHttpRequest`.\n  - If this is the case for your system, you can simply verify the presence of this header and value on all your server side AJAX endpoints in order to protect against CSRF attacks. This approach has the double advantage of usually requiring no UI changes and not introducing any server side state, which is particularly attractive to REST services. You can always add your own custom header and value if that is preferred.\n- Require user interaction\n  - Require a re-authentication, using a one-time token, or requiring users to complete a captcha.\n\n###### References\n\n- [OWASP CSRF](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF))\n\n## HTTPS\n\nHTTPS is HTTP over SSL/TLS. Servers and clients still speak exactly the same HTTP to each other, but over a secure SSL connection that encrypts and decrypts their requests and responses. The SSL layer has 2 main purposes:\n\n1. Verifying that you are talking directly to the server that you think you are talking to.\n1. Ensuring that only the server can read what you send it and only you can read what it sends back.\n\n#### TLS Handshake\n\n// TODO. Crosscheck and add in more details.\n\n1. The client computer sends a `ClientHello` message to the server with its Transport Layer Security (TLS) version, list of cipher algorithms and compression methods available.\n1. The server replies with a `ServerHello` message to the client with the TLS version, selected cipher, selected compression methods and the server's public certificate signed by a CA (Certificate Authority). The certificate contains a public key that will be used by the client to encrypt the rest of the handshake until a symmetric key can be agreed upon.\n1. The client verifies the server digital certificate against its list of trusted CAs. If trust can be established based on the CA, the client generates a string of pseudo-random bytes and encrypts this with the server's public key. These random bytes can be used to determine the symmetric key.\n1. The server decrypts the random bytes using its private key and uses these bytes to generate its own copy of the symmetric master key.\n1. The client sends a `Finished` message to the server, encrypting a hash of the transmission up to this point with the symmetric key.\n1. The server generates its own hash, and then decrypts the client-sent hash to verify that it matches. If it does, it sends its own `Finished` message to the client, also encrypted with the symmetric key.\n1. From now on the TLS session transmits the application (HTTP) data encrypted with the agreed symmetric key.\n\n#### Downsides of HTTPS\n\n- TLS handshake computational and latency overhead.\n- Encryption and decryption requires more computation power and bandwidth.\n\n###### References\n\n- https://blog.hartleybrody.com/https-certificates/\n- https://github.com/alex/what-happens-when#tls-handshake\n- http://robertheaton.com/2014/03/27/how-does-https-actually-work/\n\n## XSS\n\nXSS vulnerabilities allow attackers to bypass essentially all CSRF preventions.\n\n```js\nconst name = \"<img src='x' onerror='alert(1)'>\";\nel.innerHTML = name;\n```\n\nhttp://shebang.brandonmintern.com/foolproof-html-escaping-in-javascript/\n\n## Session hijacking\n\n- https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies\n- https://www.nczonline.net/blog/2009/05/12/cookies-and-security/\n\n\n## Framebusting\n\nhttps://seclab.stanford.edu/websec/framebusting/framebust.pdf\n\n## API\n\nhttps://github.com/shieldfy/API-Security-Checklist\n","filetype":".md","index":12},{"title":"Widgets","category":"topics","id":"widgets_topics","algorithm":"Widgets\n==\n\nHere are some commonly seen widgets/components and the considerations we should take into account when designing them.\n\n### Autocomplete\n\nAlso known as typeahead box.\n\n#### UX\n\n- Type a minimum number of characters (typically two) for the results to be displayed. This is because short search terms can result in too many matches and irrelevant results may be returned.\n- Number of query suggestions should be kept short and scrollbars should be avoided. Shorter list of results are more manageable and reduces the cognitive load on the user. If you have scrollbars it probably means you are displaying too many results!\n- Highlight the non-search terms (suggested terms) in the results. This helps the user differentiate the autocomplete suggestions, make it easier to compare.\n- Support keyboard shortcuts: Up/down to navigate and enter to search.\n- Show a history of recent searches.\n- Use placeholder text in the input field to educate users, such as \"Type to view suggestions\".\n\n#### Performance\n\n- Use windowing/virtual lists when the search results is too long.\n- Debounce user input and only search when user stops typing for some time (usually 300ms).\n\n###### References\n\n- https://baymard.com/blog/autocomplete-design\n\n### Carousel\n\n#### UX\n\n- Consider preloading a few images to the left/right of the displayed image during idle time so that as the user navigates, he does not have to wait for the image to be downloaded.\n- Allow left/right keyboard navigation of the carousel.\n\n#### Performance\n\n- Lazy load the images. Only load those that the user has a high likelihood of viewing - Current image and a few to the left and right.\n\n### Dropdown\n\n- Dropdowns that are displayed on hover are not mobile friendly as there is no hover event on mobile.\n- Dropdown positioning can differ based on position of element on screen. If the element is near the edge and the displayed dropdown will be obscured outside of the viewport, the position of the dropdown can and should be changed.\n- If the height of the dropdown is too long, it may extend outside of the screen. Be sure to make the dropdown contents scrollable by setting a `max-height`.\n\n### Modal\n\n- Modals can usually be dismissed by clicking on the backdrop. If the user interacts with the modal content by clicking on it, the backdrop might also receive the click event and be dismissed as a result.\n\n###### References\n\n- https://css-tricks.com/dangers-stopping-event-propagation/\n\n### Tooltip\n\n- Tooltips that are displayed on hover are not mobile friendly as there is no hover event on mobile.\n- Tooltip positioning can differ based on position of element on screen. If the element is near the edge and the displayed tooltip will be obscured outside of the viewport, the position of the tooltip can and should be changed.\n","filetype":".md","index":13},{"title":"Contents","category":null,"id":"contents","index":14},{"title":"Css Questions","category":"contents","id":"css-questions_contents","algorithm":"---\ntitle: CSS Questions\n---\n\nAnswers to [Front-end Job Interview Questions - CSS Questions](https://github.com/h5bp/Front-end-Developer-Interview-Questions/blob/master/src/questions/css-questions.md). Pull requests for suggestions and corrections are welcome!\n\n## Table of Contents\n\n- [What is CSS selector specificity and how does it work?](#what-is-css-selector-specificity-and-how-does-it-work)\n- [What's the difference between \"resetting\" and \"normalizing\" CSS? Which would you choose, and why?](#whats-the-difference-between-resetting-and-normalizing-css-which-would-you-choose-and-why)\n- [Describe `float`s and how they work.](#describe-floats-and-how-they-work)\n- [Describe z-index and how stacking context is formed.](#describe-z-index-and-how-stacking-context-is-formed)\n- [Describe BFC (Block Formatting Context) and how it works.](#describe-block-formatting-context-bfc-and-how-it-works)\n- [What are the various clearing techniques and which is appropriate for what context?](#what-are-the-various-clearing-techniques-and-which-is-appropriate-for-what-context)\n- [Explain CSS sprites, and how you would implement them on a page or site.](#explain-css-sprites-and-how-you-would-implement-them-on-a-page-or-site)\n- [How would you approach fixing browser-specific styling issues?](#how-would-you-approach-fixing-browser-specific-styling-issues)\n- [How do you serve your pages for feature-constrained browsers? What techniques/processes do you use?](#how-do-you-serve-your-pages-for-feature-constrained-browsers-what-techniquesprocesses-do-you-use)\n- [What are the different ways to visually hide content (and make it available only for screen readers)?](#what-are-the-different-ways-to-visually-hide-content-and-make-it-available-only-for-screen-readers)\n- [Have you ever used a grid system, and if so, what do you prefer?](#have-you-ever-used-a-grid-system-and-if-so-what-do-you-prefer)\n- [Have you used or implemented media queries or mobile specific layouts/CSS?](#have-you-used-or-implemented-media-queries-or-mobile-specific-layoutscss)\n- [Are you familiar with styling SVG?](#are-you-familiar-with-styling-svg)\n- [Can you give an example of an @media property other than screen?](#can-you-give-an-example-of-an-media-property-other-than-screen)\n- [What are some of the \"gotchas\" for writing efficient CSS?](#what-are-some-of-the-gotchas-for-writing-efficient-css)\n- [What are the advantages/disadvantages of using CSS preprocessors?](#what-are-the-advantagesdisadvantages-of-using-css-preprocessors)\n- [Describe what you like and dislike about the CSS preprocessors you have used.](#describe-what-you-like-and-dislike-about-the-css-preprocessors-you-have-used)\n- [How would you implement a web design comp that uses non-standard fonts?](#how-would-you-implement-a-web-design-comp-that-uses-non-standard-fonts)\n- [Explain how a browser determines what elements match a CSS selector.](#explain-how-a-browser-determines-what-elements-match-a-css-selector)\n- [Describe pseudo-elements and discuss what they are used for.](#describe-pseudo-elements-and-discuss-what-they-are-used-for)\n- [Explain your understanding of the box model and how you would tell the browser in CSS to render your layout in different box models.](#explain-your-understanding-of-the-box-model-and-how-you-would-tell-the-browser-in-css-to-render-your-layout-in-different-box-models)\n- [What does `* { box-sizing: border-box; }` do? What are its advantages?](#what-does---box-sizing-border-box--do-what-are-its-advantages)\n- [What is the CSS `display` property and can you give a few examples of its use?](#what-is-the-css-display-property-and-can-you-give-a-few-examples-of-its-use)\n- [What's the difference between `inline` and `inline-block`?](#whats-the-difference-between-inline-and-inline-block)\n- [What's the difference between a `relative`, `fixed`, `absolute` and `static`ally positioned element?](#whats-the-difference-between-a-relative-fixed-absolute-and-statically-positioned-element)\n- [What existing CSS frameworks have you used locally, or in production? How would you change/improve them?](#what-existing-css-frameworks-have-you-used-locally-or-in-production-how-would-you-changeimprove-them)\n- [Have you played around with the new CSS Flexbox or Grid specs?](#have-you-played-around-with-the-new-css-flexbox-or-grid-specs)\n- [Can you explain the difference between coding a website to be responsive versus using a mobile-first strategy?](#can-you-explain-the-difference-between-coding-a-website-to-be-responsive-versus-using-a-mobile-first-strategy)\n- [How is responsive design different from adaptive design?](#how-is-responsive-design-different-from-adaptive-design)\n- [Have you ever worked with retina graphics? If so, when and what techniques did you use?](#have-you-ever-worked-with-retina-graphics-if-so-when-and-what-techniques-did-you-use)\n- [Is there any reason you'd want to use `translate()` instead of `absolute` positioning, or vice-versa? And why?](#is-there-any-reason-youd-want-to-use-translate-instead-of-absolute-positioning-or-vice-versa-and-why)\n\n### What is CSS selector specificity and how does it work?\n\nThe browser determines what styles to show on an element depending on the specificity of CSS rules. We assume that the browser has already determined the rules that match a particular element. Among the matching rules, the specificity, four comma-separate values, `a, b, c, d` are calculated for each rule based on the following:\n\n1. `a` is whether inline styles are being used. If the property declaration is an inline style on the element, `a` is 1, else 0.\n2. `b` is the number of ID selectors.\n3. `c` is the number of classes, attributes and pseudo-classes selectors.\n4. `d` is the number of tags and pseudo-elements selectors.\n\nThe resulting specificity is not a score, but a matrix of values that can be compared column by column. When comparing selectors to determine which has the highest specificity, look from left to right, and compare the highest value in each column. So a value in column `b` will override values in columns `c` and `d`, no matter what they might be. As such, specificity of `0,1,0,0` would be greater than one of `0,0,10,10`.\n\nIn the cases of equal specificity: the latest rule is the one that counts. If you have written the same rule into your stylesheet (regardless of internal or external) twice, then the lower rule in your style sheet is closer to the element to be styled, it is deemed to be more specific and therefore will be applied.\n\nI would write CSS rules with low specificity so that they can be easily overridden if necessary. When writing CSS UI component library code, it is important that they have low specificities so that users of the library can override them without using too complicated CSS rules just for the sake of increasing specificity or resorting to `!important`.\n\n###### References\n\n- https://www.smashingmagazine.com/2007/07/css-specificity-things-you-should-know/\n- https://www.sitepoint.com/web-foundations/specificity/\n\n[[↑] Back to top](#table-of-contents)\n\n### What's the difference between \"resetting\" and \"normalizing\" CSS? Which would you choose, and why?\n\n- **Resetting** - Resetting is meant to strip all default browser styling on elements. For e.g. `margin`s, `padding`s, `font-size`s of all elements are reset to be the same. You will have to redeclare styling for common typographic elements.\n- **Normalizing** - Normalizing preserves useful default styles rather than \"unstyling\" everything. It also corrects bugs for common browser dependencies.\n\nI would choose resetting when I have a very customized or unconventional site design such that I need to do a lot of my own styling and do not need any default styling to be preserved.\n\n###### References\n\n- https://stackoverflow.com/questions/6887336/what-is-the-difference-between-normalize-css-and-reset-css\n\n[[↑] Back to top](#table-of-contents)\n\n### Describe `float`s and how they work.\n\nFloat is a CSS positioning property. Floated elements remain a part of the flow of the page, and will affect the positioning of other elements (e.g. text will flow around floated elements), unlike `position: absolute` elements, which are removed from the flow of the page.\n\nThe CSS `clear` property can be used to be positioned below `left`/`right`/`both` floated elements.\n\nIf a parent element contains nothing but floated elements, its height will be collapsed to nothing. It can be fixed by clearing the float after the floated elements in the container but before the close of the container.\n\nThe `.clearfix` hack uses a clever CSS [pseudo selector](#describe-pseudo-elements-and-discuss-what-they-are-used-for) (`:after`) to clear floats. Rather than setting the overflow on the parent, you apply an additional class `clearfix` to it. Then apply this CSS:\n\n```css\n.clearfix:after {\n  content: ' ';\n  visibility: hidden;\n  display: block;\n  height: 0;\n  clear: both;\n}\n```\n\nAlternatively, give `overflow: auto` or `overflow: hidden` property to the parent element which will establish a new block formatting context inside the children and it will expand to contain its children.\n\n###### References\n\n- https://css-tricks.com/all-about-floats/\n\n[[↑] Back to top](#table-of-contents)\n\n### Describe `z-index` and how stacking context is formed.\n\nThe `z-index` property in CSS controls the vertical stacking order of elements that overlap. `z-index` only affects elements that have a `position` value which is not `static`.\n\nWithout any `z-index` value, elements stack in the order that they appear in the DOM (the lowest one down at the same hierarchy level appears on top). Elements with non-static positioning (and their children) will always appear on top of elements with default static positioning, regardless of HTML hierarchy.\n\nA stacking context is an element that contains a set of layers. Within a local stacking context, the `z-index` values of its children are set relative to that element rather than to the document root. Layers outside of that context — i.e. sibling elements of a local stacking context — can't sit between layers within it. If an element B sits on top of element A, a child element of element A, element C, can never be higher than element B even if element C has a higher `z-index` than element B.\n\nEach stacking context is self-contained - after the element's contents are stacked, the whole element is considered in the stacking order of the parent stacking context. A handful of CSS properties trigger a new stacking context, such as `opacity` less than 1, `filter` that is not `none`, and `transform` that is not`none`.\n\n_Note: What exactly qualifies an element to create a stacking context is listed in this long set of [rules](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context#The_stacking_context)._\n\n###### References\n\n- https://css-tricks.com/almanac/properties/z/z-index/\n- https://philipwalton.com/articles/what-no-one-told-you-about-z-index/\n- https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context\n\n[[↑] Back to top](#table-of-contents)\n\n### Describe Block Formatting Context (BFC) and how it works.\n\nA Block Formatting Context (BFC) is part of the visual CSS rendering of a web page in which block boxes are laid out. Floats, absolutely positioned elements, `inline-blocks`, `table-cells`, `table-caption`s, and elements with `overflow` other than `visible` (except when that value has been propagated to the viewport) establish new block formatting contexts.\n\nKnowing how to establish a block formatting context is important, because without doing so, the containing box will not [contain floated children](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context#Make_float_content_and_alongside_content_the_same_height). This is similar to collapsing margins, but more insidious as you will find entire boxes collapsing in odd ways.\n\nA BFC is an HTML box that satisfies at least one of the following conditions:\n\n- The value of `float` is not `none`.\n- The value of `position` is neither `static` nor `relative`.\n- The value of `display` is `table-cell`, `table-caption`, `inline-block`, `flex`, or `inline-flex`.\n- The value of `overflow` is not `visible`.\n\nIn a BFC, each box's left outer edge touches the left edge of the containing block (for right-to-left formatting, right edges touch).\n\nVertical margins between adjacent block-level boxes in a BFC collapse. Read more on [collapsing margins](https://www.sitepoint.com/web-foundations/collapsing-margins/).\n\n###### References\n\n- https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context\n- https://www.sitepoint.com/understanding-block-formatting-contexts-in-css/\n\n[[↑] Back to top](#table-of-contents)\n\n### What are the various clearing techniques and which is appropriate for what context?\n\n- Empty `div` method - `<div style=\"clear:both;\"></div>`.\n- Clearfix method - Refer to the `.clearfix` class above.\n- `overflow: auto` or `overflow: hidden` method - Parent will establish a new block formatting context and expand to contains its floated children.\n\nIn large projects, I would write a utility `.clearfix` class and use them in places where I need it. `overflow: hidden` might clip children if the children is taller than the parent and is not very ideal.\n\n[[↑] Back to top](#table-of-contents)\n\n### Explain CSS sprites, and how you would implement them on a page or site.\n\nCSS sprites combine multiple images into one single larger image. It is a commonly-used technique for icons (Gmail uses it). How to implement it:\n\n1. Use a sprite generator that packs multiple images into one and generate the appropriate CSS for it.\n1. Each image would have a corresponding CSS class with `background-image`, `background-position` and `background-size` properties defined.\n1. To use that image, add the corresponding class to your element.\n\n**Advantages:**\n\n- Reduce the number of HTTP requests for multiple images (only one single request is required per spritesheet). But with HTTP2, loading multiple images is no longer much of an issue.\n- Advance downloading of assets that won't be downloaded until needed, such as images that only appear upon `:hover` pseudo-states. Blinking wouldn't be seen.\n\n###### References\n\n- https://css-tricks.com/css-sprites/\n\n[[↑] Back to top](#table-of-contents)\n\n### How would you approach fixing browser-specific styling issues?\n\n- After identifying the issue and the offending browser, use a separate style sheet that only loads when that specific browser is being used. This technique requires server-side rendering though.\n- Use libraries like Bootstrap that already handles these styling issues for you.\n- Use `autoprefixer` to automatically add vendor prefixes to your code.\n- Use Reset CSS or Normalize.css.\n- If you're using Postcss (or a similar transpiling library), there may be plugins which allow you to opt in for using modern CSS syntax (and even W3C proposals) that will transform those sections of your code into corresponding safe code that will work in the targets you've used.\n\n[[↑] Back to top](#table-of-contents)\n\n### How do you serve your pages for feature-constrained browsers? What techniques/processes do you use?\n\n- Graceful degradation - The practice of building an application for modern browsers while ensuring it remains functional in older browsers.\n- Progressive enhancement - The practice of building an application for a base level of user experience, but adding functional enhancements when a browser supports it.\n- Use [caniuse.com](https://caniuse.com/) to check for feature support.\n- Autoprefixer for automatic vendor prefix insertion.\n- Feature detection using [Modernizr](https://modernizr.com/).\n- Use CSS Feature queries [@support](https://developer.mozilla.org/en-US/docs/Web/CSS/@supports)\n\n[[↑] Back to top](#table-of-contents)\n\n### What are the different ways to visually hide content (and make it available only for screen readers)?\n\nThese techniques are related to accessibility (a11y).\n\n- `width: 0; height: 0`. Make the element not take up any space on the screen at all, resulting in not showing it.\n- `position: absolute; left: -99999px`. Position it outside of the screen.\n- `text-indent: -9999px`. This only works on text within the `block` elements.\n- Meta tags. For example by using Schema.org, RDF, and JSON-LD.\n- WAI-ARIA. A W3C technical specification that specifies how to increase the accessibility of web pages.\n\nEven if WAI-ARIA is the ideal solution, I would go with the `absolute` positioning approach, as it has the least caveats, works for most elements and it's an easy technique.\n\n###### References\n\n- https://www.w3.org/TR/wai-aria-1.1/\n- https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA\n- http://a11yproject.com/\n\n[[↑] Back to top](#table-of-contents)\n\n### Have you ever used a grid system, and if so, what do you prefer?\n\nBefore Flex became popular (around 2014), the `float`-based grid system was the most reliable because it still has the most browser support among the alternative existing systems (flex, grid). Bootstrap was using the `float` approach until Bootstrap 4 which switched to the `flex`-based approach. As of writing (2020), `flex` is the recommended approach for building grid systems and has [decent browser support](https://caniuse.com/#search=flex).\n\nFor the adventurous, they can look into [CSS Grid Layout](https://css-tricks.com/snippets/css/complete-guide-grid/), which uses the shiny new `grid` property; it is even better than `flex` for building grid layouts and will be the de facto way to do so in the future.\n\n[[↑] Back to top](#table-of-contents)\n\n### Have you used or implemented media queries or mobile-specific layouts/CSS?\n\nYes. An example would be transforming a stacked pill navigation into a fixed-bottom tab navigation beyond a certain breakpoint.\n\n[[↑] Back to top](#table-of-contents)\n\n### Are you familiar with styling SVG?\n\nYes, there are several ways to color shapes (including specifying attributes on the object) using inline CSS, an embedded CSS section, or an external CSS file. Most SVG you'll find around the web use inline CSS, but there are advantages and disadvantages associated with each type.\n\nBasic coloring can be done by setting two attributes on the node: `fill` and `stroke`. `fill` sets the color inside the object and `stroke` sets the color of the line drawn around the object. You can use the same CSS color naming schemes that you use in HTML, whether that's color names (that is `red`), RGB values (that is `rgb(255,0,0)`), Hex values, RGBA values, etc.\n\n```html\n<rect\n  x=\"10\"\n  y=\"10\"\n  width=\"100\"\n  height=\"100\"\n  stroke=\"blue\"\n  fill=\"purple\"\n  fill-opacity=\"0.5\"\n  stroke-opacity=\"0.8\"\n/>\n```\n\nThe above `fill=\"purple\"` is an example of a _presentational attribute_. Interestingly, and unlike inline styles like `style=\"fill: purple\"` which also happens to be an attribute, presentational attributes can be [overriden by CSS](https://css-tricks.com/presentation-attributes-vs-inline-styles/) styles defined in a stylesheet. So, if you did something like `svg { fill: blue; }` it would override the purple fill we've defined.\n\n###### References\n\n- https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Fills_and_Strokes\n\n[[↑] Back to top](#table-of-contents)\n\n### Can you give an example of an @media property other than screen?\n\nYes, there are four types of @media properties (including _screen_):\n\n- `all` - for all media type devices\n- `print` - for printers\n- `speech` - for screenreaders that \"reads\" the page out loud\n- `screen` - for computer screens, tablets, smart-phones etc.\n\nHere is an example of `print` media type's usage:\n\n```css\n@media print {\n  body {\n    color: black;\n  }\n}\n```\n\n###### References\n\n- https://developer.mozilla.org/en-US/docs/Web/CSS/@media#Syntax\n\n[[↑] Back to top](#table-of-contents)\n\n### What are some of the \"gotchas\" for writing efficient CSS?\n\nFirstly, understand that browsers match selectors from rightmost (key selector) to left. Browsers filter out elements in the DOM according to the key selector and traverse up its parent elements to determine matches. The shorter the length of the selector chain, the faster the browser can determine if that element matches the selector. Hence avoid key selectors that are tag and universal selectors. They match a large number of elements and browsers will have to do more work in determining if the parents do match.\n\n[BEM (Block Element Modifier)](https://bem.info/) methodology recommends that everything has a single class, and, where you need hierarchy, that gets baked into the name of the class as well, this naturally makes the selector efficient and easy to override.\n\nBe aware of which CSS properties [trigger](https://csstriggers.com/) reflow, repaint, and compositing. Avoid writing styles that change the layout (trigger reflow) where possible.\n\n###### References\n\n- https://developers.google.com/web/fundamentals/performance/rendering/\n- https://csstriggers.com/\n\n[[↑] Back to top](#table-of-contents)\n\n### What are the advantages/disadvantages of using CSS preprocessors?\n\n**Advantages:**\n\n- CSS is made more maintainable.\n- Easy to write nested selectors.\n- Variables for consistent theming. Can share theme files across different projects.\n- Mixins to generate repeated CSS.\n- Sass features like loops, lists, and maps can make configuration easier and less verbose.\n- Splitting your code into multiple files. CSS files can be split up too but doing so will require an HTTP request to download each CSS file.\n\n**Disadvantages:**\n\n- Requires tools for preprocessing. Re-compilation time can be slow.\n- Not writing currently and potentially usable CSS. For example, by using something like [postcss-loader](https://github.com/postcss/postcss-loader) with [webpack](https://webpack.js.org/), you can write potentially future-compatible CSS, allowing you to use things like CSS variables instead of Sass variables. Thus, you're learning new skills that could pay off if/when they become standardized.\n\n[[↑] Back to top](#table-of-contents)\n\n### Describe what you like and dislike about the CSS preprocessors you have used.\n\n**Likes:**\n\n- Mostly the advantages mentioned above.\n- Less is written in JavaScript, which plays well with Node.\n\n**Dislikes:**\n\n- I use Sass via `node-sass`, which is a binding for LibSass written in C++. I have to frequently recompile it when switching between node versions.\n- In Less, variable names are prefixed with `@`, which can be confused with native CSS keywords like `@media`, `@import` and `@font-face` rule.\n\n[[↑] Back to top](#table-of-contents)\n\n### How would you implement a web design comp that uses non-standard fonts?\n\nUse `@font-face` and define `font-family` for different `font-weight`s.\n\n[[↑] Back to top](#table-of-contents)\n\n### Explain how a browser determines what elements match a CSS selector.\n\nThis part is related to the above about [writing efficient CSS](#what-are-some-of-the-gotchas-for-writing-efficient-css). Browsers match selectors from rightmost (key selector) to left. Browsers filter out elements in the DOM according to the key selector and traverse up its parent elements to determine matches. The shorter the length of the selector chain, the faster the browser can determine if that element matches the selector.\n\nFor example with this selector `p span`, browsers firstly find all the `<span>` elements and traverse up its parent all the way up to the root to find the `<p>` element. For a particular `<span>`, as soon as it finds a `<p>`, it knows that the `<span>` matches and can stop its matching.\n\n###### References\n\n- https://stackoverflow.com/questions/5797014/why-do-browsers-match-css-selectors-from-right-to-left\n\n[[↑] Back to top](#table-of-contents)\n\n### Describe pseudo-elements and discuss what they are used for.\n\nA CSS pseudo-element is a keyword added to a selector that lets you style a specific part of the selected element(s). They can be used for decoration (`:first-line`, `:first-letter`) or adding elements to the markup (combined with `content: ...`) without having to modify the markup (`:before`, `:after`).\n\n- `:first-line` and `:first-letter` can be used to decorate text.\n- Used in the `.clearfix` hack as shown above to add a zero-space element with `clear: both`.\n- Triangular arrows in tooltips use `:before` and `:after`. Encourages separation of concerns because the triangle is considered part of styling and not really the DOM.\n\n###### References\n\n- https://css-tricks.com/almanac/selectors/a/after-and-before/\n\n[[↑] Back to top](#table-of-contents)\n\n### Explain your understanding of the box model and how you would tell the browser in CSS to render your layout in different box models.\n\nThe CSS box model describes the rectangular boxes that are generated for elements in the document tree and laid out according to the visual formatting model. Each box has a content area (e.g. text, an image, etc.) and optional surrounding `padding`, `border`, and `margin` areas.\n\nThe CSS box model is responsible for calculating:\n\n- How much space a block element takes up.\n- Whether or not borders and/or margins overlap, or collapse.\n- A box's dimensions.\n\nThe box model has the following rules:\n\n- The dimensions of a block element are calculated by `width`, `height`, `padding`, `border`s, and `margin`s.\n- If no `height` is specified, a block element will be as high as the content it contains, plus `padding` (unless there are floats, for which see below).\n- If no `width` is specified, a non-floated block element will expand to fit the width of its parent minus `padding`.\n- The `height` of an element is calculated by the content's `height`.\n- The `width` of an element is calculated by the content's `width`.\n- By default, `padding`s and `border`s are not part of the `width` and `height` of an element.\n\n###### References\n\n- https://www.smashingmagazine.com/2010/06/the-principles-of-cross-browser-css-coding/#understand-the-css-box-model\n\n[[↑] Back to top](#table-of-contents)\n\n### What does `* { box-sizing: border-box; }` do? What are its advantages?\n\n- By default, elements have `box-sizing: content-box` applied, and only the content size is being accounted for.\n- `box-sizing: border-box` changes how the `width` and `height` of elements are being calculated, `border` and `padding` are also being included in the calculation.\n- The `height` of an element is now calculated by the content's `height` + vertical `padding` + vertical `border` width.\n- The `width` of an element is now calculated by the content's `width` + horizontal `padding` + horizontal `border` width.\n- Taking into account `padding`s and `border`s as part of our box model resonates better with how designers actually imagine content in grids.\n\n###### References\n\n- https://www.paulirish.com/2012/box-sizing-border-box-ftw/\n\n[[↑] Back to top](#table-of-contents)\n\n### What is the CSS `display` property and can you give a few examples of its use?\n\n- `none`, `block`, `inline`, `inline-block`, `flex`, `grid`, `table`, `table-row`, `table-cell`, `list-item`.\n\n| `display` | Description |\n| :-- | :-- |\n| `none` | Does not display an element (the element no longer affects the layout of the document). All child element are also no longer displayed. The document is rendered as if the element did not exist in the document tree |\n| `block` | The element consumes the whole line in the block direction (which is usually horizontal) |\n| `inline` | Elements can be laid out beside each other |\n| `inline-block` | Similar to `inline`, but allows some `block` properties like setting `width` and `height` |\n| `table` | Behaves like the `<table>` element |\n| `table-row` | Behaves like the `<tr>` element |\n| `table-cell` | Behaves like the `<td>` element |\n| `list-item` | Behaves like a `<li>` element which allows it to define `list-style-type` and `list-style-position` |\n\n[[↑] Back to top](#table-of-contents)\n\n### What's the difference between `inline` and `inline-block`?\n\nI shall throw in a comparison with `block` for good measure.\n\n|  | `block` | `inline-block` | `inline` |\n| --- | --- | --- | --- |\n| Size | Fills up the width of its parent container. | Depends on content. | Depends on content. |\n| Positioning | Start on a new line and tolerates no HTML elements next to it (except when you add `float`) | Flows along with other content and allows other elements beside it. | Flows along with other content and allows other elements beside it. |\n| Can specify `width` and `height` | Yes | Yes | No. Will ignore if being set. |\n| Can be aligned with `vertical-align` | No | Yes | Yes |\n| Margins and paddings | All sides respected. | All sides respected. | Only horizontal sides respected. Vertical sides, if specified, do not affect layout. Vertical space it takes up depends on `line-height`, even though the `border` and `padding` appear visually around the content. |\n| Float | - | - | Becomes like a `block` element where you can set vertical margins and paddings. |\n\n[[↑] Back to top](#table-of-contents)\n\n### What's the difference between a `relative`, `fixed`, `absolute` and `static`ally positioned element?\n\nA positioned element is an element whose computed `position` property is either `relative`, `absolute`, `fixed` or `sticky`.\n\n- `static` - The default position; the element will flow into the page as it normally would. The `top`, `right`, `bottom`, `left` and `z-index` properties do not apply.\n- `relative` - The element's position is adjusted relative to itself, without changing layout (and thus leaving a gap for the element where it would have been had it not been positioned).\n- `absolute` - The element is removed from the flow of the page and positioned at a specified position relative to its closest positioned ancestor if any, or otherwise relative to the initial containing block. Absolutely positioned boxes can have margins, and they do not collapse with any other margins. These elements do not affect the position of other elements.\n- `fixed` - The element is removed from the flow of the page and positioned at a specified position relative to the viewport and doesn't move when scrolled.\n- `sticky` - Sticky positioning is a hybrid of relative and fixed positioning. The element is treated as `relative` positioned until it crosses a specified threshold, at which point it is treated as `fixed` positioned.\n\n###### References\n\n- https://developer.mozilla.org/en/docs/Web/CSS/position\n\n[[↑] Back to top](#table-of-contents)\n\n### What existing CSS frameworks have you used locally, or in production? How would you change/improve them?\n\n- **Bootstrap** - Slow release cycle. Bootstrap 4 has been in alpha for almost 2 years. Add a spinner button component, as it is widely used.\n- **Semantic UI** - Source code structure makes theme customization extremely hard to understand. Its unconventional theming system is a pain to customize. Hardcoded config path within the vendor library. Not well-designed for overriding variables unlike in Bootstrap.\n- **Bulma** - A lot of non-semantic and superfluous classes and markup required. Not backward compatible. Upgrading versions breaks the app in subtle manners.\n\n[[↑] Back to top](#table-of-contents)\n\n### Have you played around with the new CSS Flexbox or Grid specs?\n\nYes. Flexbox is mainly meant for 1-dimensional layouts while Grid is meant for 2-dimensional layouts.\n\nFlexbox solves many common problems in CSS, such as vertical centering of elements within a container, sticky footer, etc. Bootstrap and Bulma are based on Flexbox, and it is probably the recommended way to create layouts these days. Have tried Flexbox before but ran into some browser incompatibility issues (Safari) in using `flex-grow`, and I had to rewrite my code using `inline-blocks` and math to calculate the widths in percentages, it wasn't a nice experience.\n\nGrid is by far the most intuitive approach for creating grid-based layouts (it better be!) but browser support is not wide at the moment.\n\n###### References\n\n- https://philipwalton.github.io/solved-by-flexbox/\n\n[[↑] Back to top](#table-of-contents)\n\n### Can you explain the difference between coding a website to be responsive versus using a mobile-first strategy?\n\nNote that these two 2 approaches are not exclusive.\n\nMaking a website responsive means the some elements will respond by adapting its size or other functionality according to the device's screen size, typically the viewport width, through CSS media queries, for example, making the font size smaller on smaller devices.\n\n```css\n@media (min-width: 601px) {\n  .my-class {\n    font-size: 24px;\n  }\n}\n\n@media (max-width: 600px) {\n  .my-class {\n    font-size: 12px;\n  }\n}\n```\n\nA mobile-first strategy is also responsive, however it agrees we should default and define all the styles for mobile devices, and only add specific responsive rules to other devices later. Following the previous example:\n\n```css\n.my-class {\n  font-size: 12px;\n}\n\n@media (min-width: 600px) {\n  .my-class {\n    font-size: 24px;\n  }\n}\n```\n\nA mobile-first strategy has 2 main advantages:\n\n- It's more performant on mobile devices, since all the rules applied for them don't have to be validated against any media queries.\n- It forces to write cleaner code in respect to responsive CSS rules.\n\n[[↑] Back to top](#table-of-contents)\n\n### How is responsive design different from adaptive design?\n\nBoth responsive and adaptive design attempt to optimize the user experience across different devices, adjusting for different viewport sizes, resolutions, usage contexts, control mechanisms, and so on.\n\nResponsive design works on the principle of flexibility - a single fluid website that can look good on any device. Responsive websites use media queries, flexible grids, and responsive images to create a user experience that flexes and changes based on a multitude of factors. Like a single ball growing or shrinking to fit through several different hoops.\n\nAdaptive design is more like the modern definition of progressive enhancement. Instead of one flexible design, adaptive design detects the device and other features and then provides the appropriate feature and layout based on a predefined set of viewport sizes and other characteristics. The site detects the type of device used and delivers the pre-set layout for that device. Instead of a single ball going through several different-sized hoops, you'd have several different balls to use depending on the hoop size.\n\nBoth have these methods have some issues that need to be weighed:\n\n- Responsive design can be quite challenging, as you're essentially using a single albeit responsive layout to fit all situations. How to set the media query breakpoints is one such challenge. Do you use standardized breakpoint values? Or, do you use breakpoints that make sense to your particular layout? What if that layout changes?\n- Adaptive design generally requires user agent sniffing, or DPI detection, etc., all of which can prove unreliable.\n\n###### References\n\n- https://developer.mozilla.org/en-US/docs/Archive/Apps/Design/UI_layout_basics/Responsive_design_versus_adaptive_design\n- http://mediumwell.com/responsive-adaptive-mobile/\n- https://css-tricks.com/the-difference-between-responsive-and-adaptive-design/\n\n[[↑] Back to top](#table-of-contents)\n\n### Have you ever worked with retina graphics? If so, when and what techniques did you use?\n\n_Retina_ is just a marketing term to refer to high resolution screens with a pixel ratio bigger than 1. The key thing to know is that using a pixel ratio means these displays are emulating a lower resolution screen in order to show elements with the same size. Nowadays we consider all mobile devices _retina_ defacto displays.\n\nBrowsers by default render DOM elements according to the device resolution, except for images.\n\nIn order to have crisp, good-looking graphics that make the best of retina displays we need to use high resolution images whenever possible. However using always the highest resolution images will have an impact on performance as more bytes will need to be sent over the wire.\n\nTo overcome this problem, we can use responsive images, as specified in HTML5. It requires making available different resolution files of the same image to the browser and let it decide which image is best, using the html attribute `srcset` and optionally `sizes`, for instance:\n\n```html\n<div responsive-background-image>\n  <img\n    src=\"/images/test-1600.jpg\"\n    sizes=\"\n      (min-width: 768px) 50vw,\n      (min-width: 1024px) 66vw,\n      100vw\"\n    srcset=\"\n      /images/test-400.jpg   400w,\n      /images/test-800.jpg   800w,\n      /images/test-1200.jpg 1200w\n    \"\n  />\n</div>\n```\n\nIt is important to note that browsers which don't support HTML5's `srcset` (i.e. IE11) will ignore it and use `src` instead. If we really need to support IE11 and we want to provide this feature for performance reasons, we can use a JavaScript polyfill, e.g. Picturefill (link in the references).\n\nFor icons, I would also opt to use SVGs and icon fonts where possible, as they render very crisply regardless of resolution.\n\n###### References\n\n- https://css-tricks.com/responsive-images-youre-just-changing-resolutions-use-srcset/\n- http://scottjehl.github.io/picturefill/\n- https://aclaes.com/responsive-background-images-with-srcset-and-sizes/\n\n[[↑] Back to top](#table-of-contents)\n\n### Is there any reason you'd want to use `translate()` instead of `absolute` positioning, or vice-versa? And why?\n\n`translate()` is a value of CSS `transform`. Changing `transform` or `opacity` does not trigger browser reflow or repaint but does trigger compositions; whereas changing the absolute positioning triggers `reflow`. `transform` causes the browser to create a GPU layer for the element but changing absolute positioning properties uses the CPU. Hence `translate()` is more efficient and will result in shorter paint times for smoother animations.\n\nWhen using `translate()`, the element still occupies its original space (sort of like `position: relative`), unlike in changing the absolute positioning.\n\n###### References\n\n- https://www.paulirish.com/2012/why-moving-elements-with-translate-is-better-than-posabs-topleft/\n\n[[↑] Back to top](#table-of-contents)\n\n### Other Answers\n\n- https://neal.codes/blog/front-end-interview-css-questions\n- https://quizlet.com/28293152/front-end-interview-questions-css-flash-cards/\n- http://peterdoes.it/2015/12/03/a-personal-exercise-front-end-job-interview-questions-and-my-answers-all/\n","filetype":".md","index":15},{"title":"Html Questions","category":"contents","id":"html-questions_contents","algorithm":"---\ntitle: HTML Questions\n---\n\nAnswers to [Front-end Job Interview Questions - HTML Questions](https://github.com/h5bp/Front-end-Developer-Interview-Questions/blob/master/src/questions/html-questions.md). Pull requests for suggestions and corrections are welcome!\n\n## Table of Contents\n\n- [What does a doctype do?](#what-does-a-doctype-do)\n- [How do you serve a page with content in multiple languages?](#how-do-you-serve-a-page-with-content-in-multiple-languages)\n- [What kind of things must you be wary of when designing or developing for multilingual sites?](#what-kind-of-things-must-you-be-wary-of-when-designing-or-developing-for-multilingual-sites)\n- [What are `data-` attributes good for?](#what-are-data--attributes-good-for)\n- [Consider HTML5 as an open web platform. What are the building blocks of HTML5?](#consider-html5-as-an-open-web-platform-what-are-the-building-blocks-of-html5)\n- [Describe the difference between a `cookie`, `sessionStorage` and `localStorage`.](#describe-the-difference-between-a-cookie-sessionstorage-and-localstorage)\n- [Describe the difference between `<script>`, `<script async>` and `<script defer>`.](#describe-the-difference-between-script-script-async-and-script-defer)\n- [Why is it generally a good idea to position CSS `<link>`s between `<head></head>` and JS `<script>`s just before `</body>`? Do you know any exceptions?](#why-is-it-generally-a-good-idea-to-position-css-links-between-headhead-and-js-scripts-just-before-body-do-you-know-any-exceptions)\n- [What is progressive rendering?](#what-is-progressive-rendering)\n- [Why you would use a `srcset` attribute in an image tag? Explain the process the browser uses when evaluating the content of this attribute.](#why-you-would-use-a-srcset-attribute-in-an-image-tag-explain-the-process-the-browser-uses-when-evaluating-the-content-of-this-attribute)\n- [Have you used different HTML templating languages before?](#have-you-used-different-html-templating-languages-before)\n\n### What does a DOCTYPE do?\n\n**DOCTYPE** is an abbreviation for **DOCument TYPE**. A DOCTYPE is always associated to a **DTD** - for **Document Type Definition**.\n\nA DTD defines how documents of a certain type should be structured (i.e. a `button` can contain a `span` but not a `div`), whereas a DOCTYPE declares what DTD a document _supposedly_ respects (i.e. this document respects the HTML DTD).\n\nFor webpages, the DOCTYPE declaration is required. It is used to tell user agents what version of the HTML specifications your document respects. Once a user agent has recognized a correct DOCTYPE, it will trigger the **no-quirks mode** matching this DOCTYPE for reading the document. If a user agent doesn't recognize a correct DOCTYPE, it will trigger the **quirks mode**.\n\nThe DOCTYPE declaration for the HTML5 standards is `<!DOCTYPE html>`.\n\n###### References\n\n- https://html.spec.whatwg.org/multipage/syntax.html#the-doctype\n- https://html.spec.whatwg.org/multipage/xhtml.html\n- https://quirks.spec.whatwg.org/\n\n[[↑] Back to top](#table-of-contents)\n\n### How do you serve a page with content in multiple languages?\n\nI will assume that it is asking about the most common case, which is how to serve a page with content available in multiple languages, but the content within the page should be displayed only in one consistent language.\n\nWhen an HTTP request is made to a server, the requesting user agent usually sends information about language preferences, such as in the `Accept-Language` header. The server can then use this information to return a version of the document in the appropriate language if such an alternative is available. The returned HTML document should also declare the `lang` attribute in the `<html>` tag, such as `<html lang=\"en\">...</html>`.\n\nOf course this is useless for letting a search engine know that the same content is available in different languages, and so you must also make use of the `hreflang` attribute in the `<head>`. Eg. `<link rel=\"alternate\" hreflang=\"de\" href=\"http://de.example.com/page.html\" />`\n\nIn the back end, the HTML markup will contain `i18n` placeholders and content for the specific language stored in YML or JSON formats. The server then dynamically generates the HTML page with content in that particular language, usually with the help of a back end framework.\n\n###### References\n\n- https://www.w3.org/International/getting-started/language\n- https://support.google.com/webmasters/answer/189077\n\n[[↑] Back to top](#table-of-contents)\n\n### What kind of things must you be wary of when designing or developing for multilingual sites?\n\n- Use `lang` attribute in your HTML.\n- Directing users to their native language - Allow a user to change his country/language easily without hassle.\n- Text in raster-based images (e.g. png, gif, jpg, etc.), is not a scalable approach - Placing text in an image is still a popular way to get good-looking, non-system fonts to display on any computer. However, to translate image text, each string of text will need to have a separate image created for each language. Anything more than a handful of replacements like this can quickly get out of control.\n- Restrictive words/sentence length - Some content can be longer when written in another language. Be wary of layout or overflow issues in the design. It's best to avoid designing where the amount of text would make or break a design. Character counts come into play with things like headlines, labels, and buttons. They are less of an issue with free-flowing text such as body text or comments.\n- Be mindful of how colors are perceived - Colors are perceived differently across languages and cultures. The design should use color appropriately.\n- Formatting dates and currencies - Calendar dates are sometimes presented in different ways. Eg. \"May 31, 2012\" in the U.S. vs. \"31 May 2012\" in parts of Europe.\n- Do not concatenate translated strings - Do not do anything like `\"The date today is \" + date`. It will break in languages with different word order. Use a template string with parameters substitution for each language instead. For example, look at the following two sentences in English and Chinese respectively: `I will travel on {% date %}` and `{% date %} 我会出发`. Note that the position of the variable is different due to grammar rules of the language.\n- Language reading direction - In English, we read from left-to-right, top-to-bottom, in traditional Japanese, text is read up-to-down, right-to-left.\n\n###### References\n\n- https://www.quora.com/What-kind-of-things-one-should-be-wary-of-when-designing-or-developing-for-multilingual-sites\n\n[[↑] Back to top](#table-of-contents)\n\n### What are `data-` attributes good for?\n\nBefore JavaScript frameworks became popular, front end developers used `data-` attributes to store extra data within the DOM itself, without other hacks such as non-standard attributes, extra properties on the DOM. It is intended to store custom data private to the page or application, for which there are no more appropriate attributes or elements.\n\nThese days, using `data-` attributes is generally not encouraged. One reason is that users can modify the data attribute easily by using inspect element in the browser. The data model is better stored within JavaScript itself and stay updated with the DOM via data binding possibly through a library or a framework.\n\nHowever, one perfectly valid use of data attributes, is to add a hook for _end to end_ testing frameworks such as Selenium and Capybara without having to create a meaningless classes or ID attributes. The element needs a way to be found by a particular Selenium spec and something like `data-selector='the-thing'` is a valid way to do so without convoluting the semantic markup otherwise.\n\n###### References\n\n- http://html5doctor.com/html5-custom-data-attributes/\n- https://www.w3.org/TR/html5/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes\n\n[[↑] Back to top](#table-of-contents)\n\n### Consider HTML5 as an open web platform. What are the building blocks of HTML5?\n\n- Semantics - Allowing you to describe more precisely what your content is.\n- Connectivity - Allowing you to communicate with the server in new and innovative ways.\n- Offline and storage - Allowing webpages to store data on the client-side locally and operate offline more efficiently.\n- Multimedia - Making video and audio first-class citizens in the Open Web.\n- 2D/3D graphics and effects - Allowing a much more diverse range of presentation options.\n- Performance and integration - Providing greater speed optimization and better usage of computer hardware.\n- Device access - Allowing for the usage of various input and output devices.\n- Styling - Letting authors write more sophisticated themes.\n\n###### References\n\n- https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5\n\n[[↑] Back to top](#table-of-contents)\n\n### Describe the difference between a `cookie`, `sessionStorage` and `localStorage`.\n\nAll the above-mentioned technologies are key-value storage mechanisms on the client side. They are only able to store values as strings.\n\n|  | `cookie` | `localStorage` | `sessionStorage` |\n| --- | --- | --- | --- |\n| Initiator | Client or server. Server can use `Set-Cookie` header | Client | Client |\n| Expiry | Manually set | Forever | On tab close |\n| Persistent across browser sessions | Depends on whether expiration is set | Yes | No |\n| Sent to server with every HTTP request | Cookies are automatically being sent via `Cookie` header | No | No |\n| Capacity (per domain) | 4kb | 5MB | 5MB |\n| Accessibility | Any window | Any window | Same tab |\n\n_Note: If the user decides to clear browsing data via whatever mechanism provided by the browser, this will clear out any `cookie`, `localStorage`, or `sessionStorage` stored. It's important to keep this in mind when designing for local persistance, especially when comparing to alternatives such as server side storing in a database or similar (which of course will persist despite user actions)._\n\n###### References\n\n- https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies\n- http://tutorial.techaltum.com/local-and-session-storage.html\n\n[[↑] Back to top](#table-of-contents)\n\n### Describe the difference between `<script>`, `<script async>` and `<script defer>`.\n\n- `<script>` - HTML parsing is blocked, the script is fetched and executed immediately, HTML parsing resumes after the script is executed.\n- `<script async>` - The script will be fetched in parallel to HTML parsing and executed as soon as it is available (potentially before HTML parsing completes). Use `async` when the script is independent of any other scripts on the page, for example, analytics.\n- `<script defer>` - The script will be fetched in parallel to HTML parsing and executed when the page has finished parsing. If there are multiple of them, each deferred script is executed in the order they were encoun­tered in the document. If a script relies on a fully-parsed DOM, the `defer` attribute will be useful in ensuring that the HTML is fully parsed before executing. There's not much difference in putting a normal `<script>` at the end of `<body>`. A deferred script must not contain `document.write`.\n\nNote: The `async` and `defer` attrib­utes are ignored for scripts that have no `src` attribute.\n\n###### References\n\n- http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html\n- https://stackoverflow.com/questions/10808109/script-tag-async-defer\n- https://bitsofco.de/async-vs-defer/\n\n[[↑] Back to top](#table-of-contents)\n\n### Why is it generally a good idea to position CSS `<link>`s between `<head></head>` and JS `<script>`s just before `</body>`? Do you know any exceptions?\n\n**Placing `<link>`s in the `<head>`**\n\nPutting `<link>`s in the `<head>` is part of proper specification in building an optimized website. When a page first loads, HTML and CSS are being parsed simultaneously; HTML creates the DOM (Document Object Model) and CSS creates the CSSOM (CSS Object Model). Both are needed to create the visuals in a website, allowing for a quick \"first meaningful paint\" timing. This progressive rendering is a category optimization sites are measured in their performance scores. Putting stylesheets near the bottom of the document is what prohibits progressive rendering in many browsers. Some browsers block rendering to avoid having to repaint elements of the page if their styles change. The user is then stuck viewing a blank white page. Other times there can be flashes of unstyled content (FOUC), which show a webpage with no styling applied.\n\n**Placing `<script>`s just before `</body>`**\n\n`<script>` tags block HTML parsing while they are being downloaded and executed which can slow down your page. Placing the scripts at the bottom will allow the HTML to be parsed and displayed to the user first.\n\nAn exception for positioning of `<script>`s at the bottom is when your script contains `document.write()`, but these days it's not a good practice to use `document.write()`. Also, placing `<script>`s at the bottom means that the browser cannot start downloading the scripts until the entire document is parsed. This ensures your code that needs to manipulate DOM elements will not throw an error and halt the entire script. If you need to put `<script>` in the `<head>`, use the `defer` attribute, which will achieve the same effect of downloading and running the script only after the HTML is parsed.\n\nKeep in mind that putting scripts just before the closing `</body>` tag will create the illusion that the page loads faster on an empty cache (since the scripts won't block downloading the rest of the document). However, if you have some code you want to run during page load, it will only start executing after the entire page has loaded. If you put those scripts in the `<head>` tag, they would start executing before - so on a primed cache the page would actually appear to load faster.\n\n###### References\n\n- https://developer.yahoo.com/performance/rules.html#css_top\n- https://www.techrepublic.com/blog/web-designer/how-to-prevent-flash-of-unstyled-content-on-your-websites/\n- https://developers.google.com/web/fundamentals/performance/critical-rendering-path/\n\n[[↑] Back to top](#table-of-contents)\n\n### What is progressive rendering?\n\nProgressive rendering is the name given to techniques used to improve the performance of a webpage (in particular, improve perceived load time) to render content for display as quickly as possible.\n\nIt used to be much more prevalent in the days before broadband internet but it is still used in modern development as mobile data connections are becoming increasingly popular (and unreliable)!\n\nExamples of such techniques:\n\n- Lazy loading of images - Images on the page are not loaded all at once. JavaScript will be used to load an image when the user scrolls into the part of the page that displays the image.\n- Prioritizing visible content (or above-the-fold rendering) - Include only the minimum CSS/content/scripts necessary for the amount of page that would be rendered in the users browser first to display as quickly as possible, you can then use deferred scripts or listen for the `DOMContentLoaded`/`load` event to load in other resources and content.\n- Async HTML fragments - Flushing parts of the HTML to the browser as the page is constructed on the back end. More details on the technique can be found [here](http://www.ebaytechblog.com/2014/12/08/async-fragments-rediscovering-progressive-html-rendering-with-marko/).\n\n###### References\n\n- https://stackoverflow.com/questions/33651166/what-is-progressive-rendering\n- http://www.ebaytechblog.com/2014/12/08/async-fragments-rediscovering-progressive-html-rendering-with-marko/\n\n[[↑] Back to top](#table-of-contents)\n\n### Why you would use a `srcset` attribute in an image tag? Explain the process the browser uses when evaluating the content of this attribute.\n\nYou would use the `srcset` attribute when you want to serve different images to users depending on their device display width - serve higher quality images to devices with retina display enhances the user experience while serving lower resolution images to low-end devices increase performance and decrease data wastage (because serving a larger image will not have any visible difference). For example: `<img srcset=\"small.jpg 500w, medium.jpg 1000w, large.jpg 2000w\" src=\"...\" alt=\"\">` tells the browser to display the small, medium or large `.jpg` graphic depending on the client's resolution. The first value is the image name and the second is the width of the image in pixels. For a device width of 320px, the following calculations are made:\n\n- 500 / 320 = 1.5625\n- 1000 / 320 = 3.125\n- 2000 / 320 = 6.25\n\nIf the client's resolution is 1x, 1.5625 is the closest, and `500w` corresponding to `small.jpg` will be selected by the browser.\n\nIf the resolution is retina (2x), the browser will use the closest resolution above the minimum. Meaning it will not choose the 500w (1.5625) because it is greater than 1 and the image might look bad. The browser would then choose the image with a resulting ratio closer to 2 which is 1000w (3.125).\n\n`srcset`s solve the problem whereby you want to serve smaller image files to narrow screen devices, as they don't need huge images like desktop displays do — and also optionally that you want to serve different resolution images to high density/low-density screens.\n\n###### References\n\n- https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images\n- https://css-tricks.com/responsive-images-youre-just-changing-resolutions-use-srcset/\n\n[[↑] Back to top](#table-of-contents)\n\n### Have you used different HTML templating languages before?\n\nYes, Pug (formerly Jade), ERB, Slim, Handlebars, Jinja, Liquid, and EJS just to name a few. In my opinion, they are more or less the same and provide similar functionality of escaping content and helpful filters for manipulating the data to be displayed. Most templating engines will also allow you to inject your own filters in the event you need custom processing before display.\n\n[[↑] Back to top](#table-of-contents)\n\n### Other Answers\n\n- https://neal.codes/blog/front-end-interview-questions-html/\n- http://peterdoes.it/2015/12/03/a-personal-exercise-front-end-job-interview-questions-and-my-answers-all/\n","filetype":".md","index":16},{"title":"Javascript Questions","category":"contents","id":"javascript-questions_contents","algorithm":"---\ntitle: JavaScript Questions\n---\n\nAnswers to [Front-end Job Interview Questions - JS Questions](https://github.com/h5bp/Front-end-Developer-Interview-Questions/blob/master/src/questions/javascript-questions.md). Pull requests for suggestions and corrections are welcome!\n\n## Table of Contents\n\n- [Explain event delegation](#explain-event-delegation)\n- [Explain how `this` works in JavaScript](#explain-how-this-works-in-javascript)\n- [Explain how prototypal inheritance works](#explain-how-prototypal-inheritance-works)\n- [What do you think of AMD vs CommonJS?](#what-do-you-think-of-amd-vs-commonjs)\n- [Explain why the following doesn't work as an IIFE: `function foo(){ }();`. What needs to be changed to properly make it an IIFE?](#explain-why-the-following-doesnt-work-as-an-iife-function-foo--what-needs-to-be-changed-to-properly-make-it-an-iife)\n- [What's the difference between a variable that is: `null`, `undefined` or undeclared? How would you go about checking for any of these states?](#whats-the-difference-between-a-variable-that-is-null-undefined-or-undeclared-how-would-you-go-about-checking-for-any-of-these-states)\n- [What is a closure, and how/why would you use one?](#what-is-a-closure-and-howwhy-would-you-use-one)\n- [Can you describe the main difference between a `.forEach` loop and a `.map()` loop and why you would pick one versus the other?](#can-you-describe-the-main-difference-between-a-foreach-loop-and-a-map-loop-and-why-you-would-pick-one-versus-the-other)\n- [What's a typical use case for anonymous functions?](#whats-a-typical-use-case-for-anonymous-functions)\n- [How do you organize your code? (module pattern, classical inheritance?)](#how-do-you-organize-your-code-module-pattern-classical-inheritance)\n- [What's the difference between host objects and native objects?](#whats-the-difference-between-host-objects-and-native-objects)\n- [Difference between: `function Person(){}`, `var person = Person()`, and `var person = new Person()`?](#difference-between-function-person-var-person--person-and-var-person--new-person)\n- [What's the difference between `.call` and `.apply`?](#whats-the-difference-between-call-and-apply)\n- [Explain `Function.prototype.bind`.](#explain-functionprototypebind)\n- [When would you use `document.write()`?](#when-would-you-use-documentwrite)\n- [What's the difference between feature detection, feature inference, and using the UA string?](#whats-the-difference-between-feature-detection-feature-inference-and-using-the-ua-string)\n- [Explain Ajax in as much detail as possible.](#explain-ajax-in-as-much-detail-as-possible)\n- [What are the advantages and disadvantages of using Ajax?](#what-are-the-advantages-and-disadvantages-of-using-ajax)\n- [Explain how JSONP works (and how it's not really Ajax).](#explain-how-jsonp-works-and-how-its-not-really-ajax)\n- [Have you ever used JavaScript templating? If so, what libraries have you used?](#have-you-ever-used-javascript-templating-if-so-what-libraries-have-you-used)\n- [Explain \"hoisting\".](#explain-hoisting)\n- [Describe event bubbling.](#describe-event-bubbling)\n- [What's the difference between an \"attribute\" and a \"property\"?](#whats-the-difference-between-an-attribute-and-a-property)\n- [Why is extending built-in JavaScript objects not a good idea?](#why-is-extending-built-in-javascript-objects-not-a-good-idea)\n- [Difference between document `load` event and document `DOMContentLoaded` event?](#difference-between-document-load-event-and-document-domcontentloaded-event)\n- [What is the difference between `==` and `===`?](#what-is-the-difference-between--and-)\n- [Explain the same-origin policy with regards to JavaScript.](#explain-the-same-origin-policy-with-regards-to-javascript)\n- [Make this work: `duplicate([1,2,3,4,5]); // [1,2,3,4,5,1,2,3,4,5]`](#make-this-work)\n- [Why is it called a Ternary expression, what does the word \"Ternary\" indicate?](#why-is-it-called-a-ternary-expression-what-does-the-word-ternary-indicate)\n- [What is \"use strict\";? what are the advantages and disadvantages to using it?](#what-is-use-strict-what-are-the-advantages-and-disadvantages-to-using-it)\n- [Create a for loop that iterates up to 100 while outputting \"fizz\" at multiples of 3, \"buzz\" at multiples of 5 and \"fizzbuzz\" at multiples of 3 and 5](#create-a-for-loop-that-iterates-up-to-100-while-outputting-fizz-at-multiples-of-3-buzz-at-multiples-of-5-and-fizzbuzz-at-multiples-of-3-and-5)\n- [Why is it, in general, a good idea to leave the global scope of a website as-is and never touch it?](#why-is-it-in-general-a-good-idea-to-leave-the-global-scope-of-a-website-as-is-and-never-touch-it)\n- [Why would you use something like the `load` event? Does this event have disadvantages? Do you know any alternatives, and why would you use those?](#why-would-you-use-something-like-the-load-event-does-this-event-have-disadvantages-do-you-know-any-alternatives-and-why-would-you-use-those)\n- [Explain what a single page app is and how to make one SEO-friendly.](#explain-what-a-single-page-app-is-and-how-to-make-one-seo-friendly)\n- [What is the extent of your experience with Promises and/or their polyfills?](#what-is-the-extent-of-your-experience-with-promises-andor-their-polyfills)\n- [What are the pros and cons of using Promises instead of callbacks?](#what-are-the-pros-and-cons-of-using-promises-instead-of-callbacks)\n- [What are some of the advantages/disadvantages of writing JavaScript code in a language that compiles to JavaScript?](#what-are-some-of-the-advantagesdisadvantages-of-writing-javascript-code-in-a-language-that-compiles-to-javascript)\n- [What tools and techniques do you use debugging JavaScript code?](#what-tools-and-techniques-do-you-use-for-debugging-javascript-code)\n- [What language constructions do you use for iterating over object properties and array items?](#what-language-constructions-do-you-use-for-iterating-over-object-properties-and-array-items)\n- [Explain the difference between mutable and immutable objects.](#explain-the-difference-between-mutable-and-immutable-objects)\n- [Explain the difference between synchronous and asynchronous functions.](#explain-the-difference-between-synchronous-and-asynchronous-functions)\n- [What is event loop? What is the difference between call stack and task queue?](#what-is-event-loop-what-is-the-difference-between-call-stack-and-task-queue)\n- [Explain the differences on the usage of `foo` between `function foo() {}` and `var foo = function() {}`](#explain-the-differences-on-the-usage-of-foo-between-function-foo--and-var-foo--function-)\n- [What are the differences between variables created using `let`, `var` or `const`?](#what-are-the-differences-between-variables-created-using-let-var-or-const)\n- [What are the differences between ES6 class and ES5 function constructors?](#what-are-the-differences-between-es6-class-and-es5-function-constructors)\n- [Can you offer a use case for the new arrow => function syntax? How does this new syntax differ from other functions?](#can-you-offer-a-use-case-for-the-new-arrow--function-syntax-how-does-this-new-syntax-differ-from-other-functions)\n- [What advantage is there for using the arrow syntax for a method in a constructor?](#what-advantage-is-there-for-using-the-arrow-syntax-for-a-method-in-a-constructor)\n- [What is the definition of a higher-order function?](#what-is-the-definition-of-a-higher-order-function)\n- [Can you give an example for destructuring an object or an array?](#can-you-give-an-example-for-destructuring-an-object-or-an-array)\n- [ES6 Template Literals offer a lot of flexibility in generating strings, can you give an example?](#es6-template-literals-offer-a-lot-of-flexibility-in-generating-strings-can-you-give-an-example)\n- [Can you give an example of a curry function and why this syntax offers an advantage?](#can-you-give-an-example-of-a-curry-function-and-why-this-syntax-offers-an-advantage)\n- [What are the benefits of using spread syntax and how is it different from rest syntax?](#what-are-the-benefits-of-using-spread-syntax-and-how-is-it-different-from-rest-syntax)\n- [How can you share code between files?](#how-can-you-share-code-between-files)\n- [Why you might want to create static class members?](#why-you-might-want-to-create-static-class-members)\n\n### Explain event delegation\n\nEvent delegation is a technique involving adding event listeners to a parent element instead of adding them to the descendant elements. The listener will fire whenever the event is triggered on the descendant elements due to event bubbling up the DOM. The benefits of this technique are:\n\n- Memory footprint goes down because only one single handler is needed on the parent element, rather than having to attach event handlers on each descendant.\n- There is no need to unbind the handler from elements that are removed and to bind the event for new elements.\n\n###### References\n\n- https://davidwalsh.name/event-delegate\n- https://stackoverflow.com/questions/1687296/what-is-dom-event-delegation\n\n[[↑] Back to top](#table-of-contents)\n\n### Explain how `this` works in JavaScript\n\nThere's no simple explanation for `this`; it is one of the most confusing concepts in JavaScript. A hand-wavey explanation is that the value of `this` depends on how the function is called. I have read many explanations on `this` online, and I found [Arnav Aggrawal](https://medium.com/@arnav_aggarwal)'s explanation to be the clearest. The following rules are applied:\n\n1. If the `new` keyword is used when calling the function, `this` inside the function is a brand new object.\n2. If `apply`, `call`, or `bind` are used to call/create a function, `this` inside the function is the object that is passed in as the argument.\n3. If a function is called as a method, such as `obj.method()` — `this` is the object that the function is a property of.\n4. If a function is invoked as a free function invocation, meaning it was invoked without any of the conditions present above, `this` is the global object. In a browser, it is the `window` object. If in strict mode (`'use strict'`), `this` will be `undefined` instead of the global object.\n5. If multiple of the above rules apply, the rule that is higher wins and will set the `this` value.\n6. If the function is an ES2015 arrow function, it ignores all the rules above and receives the `this` value of its surrounding scope at the time it is created.\n\nFor an in-depth explanation, do check out his [article on Medium](https://codeburst.io/the-simple-rules-to-this-in-javascript-35d97f31bde3).\n\n#### Can you give an example of one of the ways that working with this has changed in ES6?\n\nES6 allows you to use [arrow functions](http://2ality.com/2017/12/alternate-this.html#arrow-functions) which uses the [enclosing lexical scope](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#No_separate_this). This is usually convenient, but does prevent the caller from controlling context via `.call` or `.apply`—the consequences being that a library such as `jQuery` will not properly bind `this` in your event handler functions. Thus, it's important to keep this in mind when refactoring large legacy applications.\n\n###### References\n\n- https://codeburst.io/the-simple-rules-to-this-in-javascript-35d97f31bde3\n- https://stackoverflow.com/a/3127440/1751946\n\n[[↑] Back to top](#table-of-contents)\n\n### Explain how prototypal inheritance works\n\nThis is an extremely common JavaScript interview question. All JavaScript objects have a `__proto__` property, that is a reference to another object, which is called the object's \"prototype\". When a property is accessed on an object and if the property is not found on that object, the JavaScript engine looks at the object's `__proto__`, and the `__proto__`'s `__proto__` and so on, until it finds the property defined on one of the `__proto__`s or until it reaches the end of the prototype chain. This behavior simulates classical inheritance, but it is really more of [delegation than inheritance](https://davidwalsh.name/javascript-objects).\n\n#### Example of Prototypal Inheritance\n\nWe already have a build-in `Object.create`, but if you were to provide a polyfill for it, that might look like:\n\n```js\nif (typeof Object.create !== 'function') {\n  Object.create = function (parent) {\n    function Tmp() {}\n    Tmp.prototype = parent;\n    return new Tmp();\n  };\n}\n\nconst Parent = function () {\n  this.name = 'Parent';\n};\n\nParent.prototype.greet = function () {\n  console.log('hello from Parent');\n};\n\nconst child = Object.create(Parent.prototype);\n\nchild.cry = function () {\n  console.log('waaaaaahhhh!');\n};\n\nchild.cry();\n// Outputs: waaaaaahhhh!\n\nchild.greet();\n// Outputs: hello from Parent\n```\n\nThings to note are:\n\n- `.greet` is not defined on the _child_, so the engine goes up the prototype chain and finds `.greet` off the inherited from _Parent_.\n- We need to call `Object.create` in one of following ways for the prototype methods to be inherited:\n  - Object.create(Parent.prototype);\n  - Object.create(new Parent(null));\n  - Object.create(objLiteral);\n  - Currently, `child.constructor` is pointing to the `Parent`:\n\n```js\nchild.constructor\nƒ () {\n  this.name = \"Parent\";\n}\nchild.constructor.name\n\"Parent\"\n```\n\n- If we'd like to correct this, one option would be to do:\n\n```js\nfunction Child() {\n  Parent.call(this);\n  this.name = 'child';\n}\n\nChild.prototype = Parent.prototype;\nChild.prototype.constructor = Child;\n\nconst c = new Child();\n\nc.cry();\n// Outputs: waaaaaahhhh!\n\nc.greet();\n// Outputs: hello from Parent\n\nc.constructor.name;\n// Outputs: \"Child\"\n```\n\n###### References\n\n- http://dmitrysoshnikov.com/ecmascript/javascript-the-core/\n- https://www.quora.com/What-is-prototypal-inheritance/answer/Kyle-Simpson\n- https://davidwalsh.name/javascript-objects\n- https://crockford.com/javascript/prototypal.html\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\n\n[[↑] Back to top](#table-of-contents)\n\n### What do you think of AMD vs CommonJS?\n\nBoth are ways to implement a module system, which was not natively present in JavaScript until ES2015 came along. CommonJS is synchronous while AMD (Asynchronous Module Definition) is obviously asynchronous. CommonJS is designed with server-side development in mind while AMD, with its support for asynchronous loading of modules, is more intended for browsers.\n\nI find AMD syntax to be quite verbose and CommonJS is closer to the style you would write import statements in other languages. Most of the time, I find AMD unnecessary, because if you served all your JavaScript into one concatenated bundle file, you wouldn't benefit from the async loading properties. Also, CommonJS syntax is closer to Node style of writing modules and there is less context-switching overhead when switching between client side and server side JavaScript development.\n\nI'm glad that with ES2015 modules, that has support for both synchronous and asynchronous loading, we can finally just stick to one approach. Although it hasn't been fully rolled out in browsers and in Node, we can always use transpilers to convert our code.\n\n###### References\n\n- https://auth0.com/blog/javascript-module-systems-showdown/\n- https://stackoverflow.com/questions/16521471/relation-between-commonjs-amd-and-requirejs\n\n[[↑] Back to top](#table-of-contents)\n\n### Explain why the following doesn't work as an IIFE: `function foo(){ }();`. What needs to be changed to properly make it an IIFE?\n\nIIFE stands for Immediately Invoked Function Expressions. The JavaScript parser reads `function foo(){ }();` as `function foo(){ }` and `();`, where the former is a _function declaration_ and the latter (a pair of parentheses) is an attempt at calling a function but there is no name specified, hence it throws `Uncaught SyntaxError: Unexpected token )`.\n\nHere are two ways to fix it that involves adding more parentheses: `(function foo(){ })()` and `(function foo(){ }())`. Statements that begin with `function` are considered to be _function declarations_; by wrapping this function within `()`, it becomes a _function expression_ which can then be executed with the subsequent `()`. These functions are not exposed in the global scope and you can even omit its name if you do not need to reference itself within the body.\n\nYou might also use `void` operator: `void function foo(){ }();`. Unfortunately, there is one issue with such approach. The evaluation of given expression is always `undefined`, so if your IIFE function returns anything, you can't use it. An example:\n\n```js\nconst foo = void (function bar() {\n  return 'foo';\n})();\n\nconsole.log(foo); // undefined\n```\n\n###### References\n\n- http://lucybain.com/blog/2014/immediately-invoked-function-expression/\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void\n\n[[↑] Back to top](#table-of-contents)\n\n### What's the difference between a variable that is: `null`, `undefined` or undeclared? How would you go about checking for any of these states?\n\n**Undeclared** variables are created when you assign a value to an identifier that is not previously created using `var`, `let` or `const`. Undeclared variables will be defined globally, outside of the current scope. In strict mode, a `ReferenceError` will be thrown when you try to assign to an undeclared variable. Undeclared variables are bad just like how global variables are bad. Avoid them at all cost! To check for them, wrap its usage in a `try`/`catch` block.\n\n```js\nfunction foo() {\n  x = 1; // Throws a ReferenceError in strict mode\n}\n\nfoo();\nconsole.log(x); // 1\n```\n\nA variable that is `undefined` is a variable that has been declared, but not assigned a value. It is of type `undefined`. If a function does not return any value as the result of executing it is assigned to a variable, the variable also has the value of `undefined`. To check for it, compare using the strict equality (`===`) operator or `typeof` which will give the `'undefined'` string. Note that you should not be using the abstract equality operator to check, as it will also return `true` if the value is `null`.\n\n```js\nvar foo;\nconsole.log(foo); // undefined\nconsole.log(foo === undefined); // true\nconsole.log(typeof foo === 'undefined'); // true\n\nconsole.log(foo == null); // true. Wrong, don't use this to check!\n\nfunction bar() {}\nvar baz = bar();\nconsole.log(baz); // undefined\n```\n\nA variable that is `null` will have been explicitly assigned to the `null` value. It represents no value and is different from `undefined` in the sense that it has been explicitly assigned. To check for `null,` simply compare using the strict equality operator. Note that like the above, you should not be using the abstract equality operator (`==`) to check, as it will also return `true` if the value is `undefined`.\n\n```js\nvar foo = null;\nconsole.log(foo === null); // true\nconsole.log(typeof foo === 'object'); // true\n\nconsole.log(foo == undefined); // true. Wrong, don't use this to check!\n```\n\nAs a personal habit, I never leave my variables undeclared or unassigned. I will explicitly assign `null` to them after declaring if I don't intend to use it yet. If you use a linter in your workflow, it will usually also be able to check that you are not referencing undeclared variables.\n\n###### References\n\n- https://stackoverflow.com/questions/15985875/effect-of-declared-and-undeclared-variables\n- https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/undefined\n\n[[↑] Back to top](#table-of-contents)\n\n### What is a closure, and how/why would you use one?\n\nA closure is the combination of a function and the lexical environment within which that function was declared. The word \"lexical\" refers to the fact that lexical scoping uses the location where a variable is declared within the source code to determine where that variable is available. Closures are functions that have access to the outer (enclosing) function's variables—scope chain even after the outer function has returned.\n\n**Why would you use one?**\n\n- Data privacy / emulating private methods with closures. Commonly used in the [module pattern](https://addyosmani.com/resources/essentialjsdesignpatterns/book/#modulepatternjavascript).\n- [Partial applications or currying](https://medium.com/javascript-scene/curry-or-partial-application-8150044c78b8#.l4b6l1i3x).\n\n###### References\n\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures\n- https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-closure-b2f0d2152b36\n\n[[↑] Back to top](#table-of-contents)\n\n### Can you describe the main difference between a `.forEach` loop and a `.map()` loop and why you would pick one versus the other?\n\nTo understand the differences between the two, let's look at what each function does.\n\n**`forEach`**\n\n- Iterates through the elements in an array.\n- Executes a callback for each element.\n- Does not return a value.\n\n```js\nconst a = [1, 2, 3];\nconst doubled = a.forEach((num, index) => {\n  // Do something with num and/or index.\n});\n\n// doubled = undefined\n```\n\n**`map`**\n\n- Iterates through the elements in an array.\n- \"Maps\" each element to a new element by calling the function on each element, creating a new array as a result.\n\n```js\nconst a = [1, 2, 3];\nconst doubled = a.map((num) => {\n  return num * 2;\n});\n\n// doubled = [2, 4, 6]\n```\n\nThe main difference between `.forEach` and `.map()` is that `.map()` returns a new array. If you need the result, but do not wish to mutate the original array, `.map()` is the clear choice. If you simply need to iterate over an array, `forEach` is a fine choice.\n\n###### References\n\n- https://codeburst.io/javascript-map-vs-foreach-f38111822c0f\n\n[[↑] Back to top](#table-of-contents)\n\n### What's a typical use case for anonymous functions?\n\nThey can be used in IIFEs to encapsulate some code within a local scope so that variables declared in it do not leak to the global scope.\n\n```js\n(function () {\n  // Some code here.\n})();\n```\n\nAs a callback that is used once and does not need to be used anywhere else. The code will seem more self-contained and readable when handlers are defined right inside the code calling them, rather than having to search elsewhere to find the function body.\n\n```js\nsetTimeout(function () {\n  console.log('Hello world!');\n}, 1000);\n```\n\nArguments to functional programming constructs or Lodash (similar to callbacks).\n\n```js\nconst arr = [1, 2, 3];\nconst double = arr.map(function (el) {\n  return el * 2;\n});\nconsole.log(double); // [2, 4, 6]\n```\n\n###### References\n\n- https://www.quora.com/What-is-a-typical-usecase-for-anonymous-functions\n- https://stackoverflow.com/questions/10273185/what-are-the-benefits-to-using-anonymous-functions-instead-of-named-functions-fo\n\n[[↑] Back to top](#table-of-contents)\n\n### How do you organize your code? (module pattern, classical inheritance?)\n\nIn the past, I've used Backbone for my models which encourages a more OOP approach, creating Backbone models and attaching methods to them.\n\nThe module pattern is still great, but these days, I use React/Redux which utilize a single-directional data flow based on Flux architecture. I would represent my app's models using plain objects and write utility pure functions to manipulate these objects. State is manipulated using actions and reducers like in any other Redux application.\n\nI avoid using classical inheritance where possible. When and if I do, I stick to [these rules](https://medium.com/@dan_abramov/how-to-use-classes-and-sleep-at-night-9af8de78ccb4).\n\n[[↑] Back to top](#table-of-contents)\n\n### What's the difference between host objects and native objects?\n\nNative objects are objects that are part of the JavaScript language defined by the ECMAScript specification, such as `String`, `Math`, `RegExp`, `Object`, `Function`, etc.\n\nHost objects are provided by the runtime environment (browser or Node), such as `window`, `XMLHTTPRequest`, etc.\n\n###### References\n\n- https://stackoverflow.com/questions/7614317/what-is-the-difference-between-native-objects-and-host-objects\n\n[[↑] Back to top](#table-of-contents)\n\n### Difference between: `function Person(){}`, `var person = Person()`, and `var person = new Person()`?\n\nThis question is pretty vague. My best guess at its intention is that it is asking about constructors in JavaScript. Technically speaking, `function Person(){}` is just a normal function declaration. The convention is to use PascalCase for functions that are intended to be used as constructors.\n\n`var person = Person()` invokes the `Person` as a function, and not as a constructor. Invoking as such is a common mistake if the function is intended to be used as a constructor. Typically, the constructor does not return anything, hence invoking the constructor like a normal function will return `undefined` and that gets assigned to the variable intended as the instance.\n\n`var person = new Person()` creates an instance of the `Person` object using the `new` operator, which inherits from `Person.prototype`. An alternative would be to use `Object.create`, such as: `Object.create(Person.prototype)`.\n\n```js\nfunction Person(name) {\n  this.name = name;\n}\n\nvar person = Person('John');\nconsole.log(person); // undefined\nconsole.log(person.name); // Uncaught TypeError: Cannot read property 'name' of undefined\n\nvar person = new Person('John');\nconsole.log(person); // Person { name: \"John\" }\nconsole.log(person.name); // \"john\"\n```\n\n###### References\n\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new\n\n[[↑] Back to top](#table-of-contents)\n\n### What's the difference between `.call` and `.apply`?\n\nBoth `.call` and `.apply` are used to invoke functions and the first parameter will be used as the value of `this` within the function. However, `.call` takes in comma-separated arguments as the next arguments while `.apply` takes in an array of arguments as the next argument. An easy way to remember this is C for `call` and comma-separated and A for `apply` and an array of arguments.\n\n```js\nfunction add(a, b) {\n  return a + b;\n}\n\nconsole.log(add.call(null, 1, 2)); // 3\nconsole.log(add.apply(null, [1, 2])); // 3\n```\n\n[[↑] Back to top](#table-of-contents)\n\n### Explain `Function.prototype.bind`.\n\nTaken word-for-word from [MDN](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_objects/Function/bind):\n\n> The `bind()` method creates a new function that, when called, has its `this` keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.\n\nIn my experience, it is most useful for binding the value of `this` in methods of classes that you want to pass into other functions. This is frequently done in React components.\n\n###### References\n\n- https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_objects/Function/bind\n\n[[↑] Back to top](#table-of-contents)\n\n### When would you use `document.write()`?\n\n`document.write()` writes a string of text to a document stream opened by `document.open()`. When `document.write()` is executed after the page has loaded, it will call `document.open` which clears the whole document (`<head>` and `<body>` removed!) and replaces the contents with the given parameter value. Hence it is usually considered dangerous and prone to misuse.\n\nThere are some answers online that explain `document.write()` is being used in analytics code or [when you want to include styles that should only work if JavaScript is enabled](https://www.quirksmode.org/blog/archives/2005/06/three_javascrip_1.html). It is even being used in HTML5 boilerplate to [load scripts in parallel and preserve execution order](https://github.com/paulirish/html5-boilerplate/wiki/Script-Loading-Techniques#documentwrite-script-tag)! However, I suspect those reasons might be outdated and in the modern day, they can be achieved without using `document.write()`. Please do correct me if I'm wrong about this.\n\n###### References\n\n- https://www.quirksmode.org/blog/archives/2005/06/three_javascrip_1.html\n- https://github.com/h5bp/html5-boilerplate/wiki/Script-Loading-Techniques#documentwrite-script-tag\n\n[[↑] Back to top](#table-of-contents)\n\n### What's the difference between feature detection, feature inference, and using the UA string?\n\n**Feature Detection**\n\nFeature detection involves working out whether a browser supports a certain block of code, and running different code depending on whether it does (or doesn't), so that the browser can always provide a working experience rather crashing/erroring in some browsers. For example:\n\n```js\nif ('geolocation' in navigator) {\n  // Can use navigator.geolocation\n} else {\n  // Handle lack of feature\n}\n```\n\n[Modernizr](https://modernizr.com/) is a great library to handle feature detection.\n\n**Feature Inference**\n\nFeature inference checks for a feature just like feature detection, but uses another function because it assumes it will also exist, e.g.:\n\n```js\nif (document.getElementsByTagName) {\n  element = document.getElementById(id);\n}\n```\n\nThis is not really recommended. Feature detection is more foolproof.\n\n**UA String**\n\nThis is a browser-reported string that allows the network protocol peers to identify the application type, operating system, software vendor or software version of the requesting software user agent. It can be accessed via `navigator.userAgent`. However, the string is tricky to parse and can be spoofed. For example, Chrome reports both as Chrome and Safari. So to detect Safari you have to check for the Safari string and the absence of the Chrome string. Avoid this method.\n\n###### References\n\n- https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing/Feature_detection\n- https://stackoverflow.com/questions/20104930/whats-the-difference-between-feature-detection-feature-inference-and-using-th\n- https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent\n\n[[↑] Back to top](#table-of-contents)\n\n### Explain Ajax in as much detail as possible.\n\nAjax (asynchronous JavaScript and XML) is a set of web development techniques using many web technologies on the client side to create asynchronous web applications. With Ajax, web applications can send data to and retrieve from a server asynchronously (in the background) without interfering with the display and behavior of the existing page. By decoupling the data interchange layer from the presentation layer, Ajax allows for web pages, and by extension web applications, to change content dynamically without the need to reload the entire page. In practice, modern implementations commonly use JSON instead of XML, due to the advantages of JSON being native to JavaScript.\n\nThe `XMLHttpRequest` API is frequently used for the asynchronous communication or these days, the `fetch` API.\n\n###### References\n\n- https://en.wikipedia.org/wiki/Ajax_(programming)\n- https://developer.mozilla.org/en-US/docs/AJAX\n\n[[↑] Back to top](#table-of-contents)\n\n### What are the advantages and disadvantages of using Ajax?\n\n**Advantages**\n\n- Better interactivity. New content from the server can be changed dynamically without the need to reload the entire page.\n- Reduce connections to the server since scripts and stylesheets only have to be requested once.\n- State can be maintained on a page. JavaScript variables and DOM state will persist because the main container page was not reloaded.\n- Basically most of the advantages of an SPA.\n\n**Disadvantages**\n\n- Dynamic webpages are harder to bookmark.\n- Does not work if JavaScript has been disabled in the browser.\n- Some webcrawlers do not execute JavaScript and would not see content that has been loaded by JavaScript.\n- Webpages using Ajax to fetch data will likely have to combine the fetched remote data with client-side templates to update the DOM. For this to happen, JavaScript will have to be parsed and executed on the browser, and low-end mobile devices might struggle with this.\n- Basically most of the disadvantages of an SPA.\n\n[[↑] Back to top](#table-of-contents)\n\n### Explain how JSONP works (and how it's not really Ajax).\n\nJSONP (JSON with Padding) is a method commonly used to bypass the cross-domain policies in web browsers because Ajax requests from the current page to a cross-origin domain is not allowed.\n\nJSONP works by making a request to a cross-origin domain via a `<script>` tag and usually with a `callback` query parameter, for example: `https://example.com?callback=printData`. The server will then wrap the data within a function called `printData` and return it to the client.\n\n```html\n<!-- https://mydomain.com -->\n<script>\n  function printData(data) {\n    console.log(`My name is ${data.name}!`);\n  }\n</script>\n\n<script src=\"https://example.com?callback=printData\"></script>\n```\n\n```js\n// File loaded from https://example.com?callback=printData\nprintData({name: 'Yang Shun'});\n```\n\nThe client has to have the `printData` function in its global scope and the function will be executed by the client when the response from the cross-origin domain is received.\n\nJSONP can be unsafe and has some security implications. As JSONP is really JavaScript, it can do everything else JavaScript can do, so you need to trust the provider of the JSONP data.\n\nThese days, [CORS](http://en.wikipedia.org/wiki/Cross-origin_resource_sharing) is the recommended approach and JSONP is seen as a hack.\n\n###### References\n\n- https://stackoverflow.com/a/2067584/1751946\n\n[[↑] Back to top](#table-of-contents)\n\n### Have you ever used JavaScript templating? If so, what libraries have you used?\n\nYes. Handlebars, Underscore, Lodash, AngularJS, and JSX. I disliked templating in AngularJS because it made heavy use of strings in the directives and typos would go uncaught. JSX is my new favorite as it is closer to JavaScript and there is barely any syntax to learn. Nowadays, you can even use ES2015 template string literals as a quick way for creating templates without relying on third-party code.\n\n```js\nconst template = `<div>My name is: ${name}</div>`;\n```\n\nHowever, do be aware of a potential XSS in the above approach as the contents are not escaped for you, unlike in templating libraries.\n\n[[↑] Back to top](#table-of-contents)\n\n### Explain \"hoisting\".\n\nHoisting is a term used to explain the behavior of variable declarations in your code. Variables declared or initialized with the `var` keyword will have their declaration \"moved\" up to the top of their module/function-level scope, which we refer to as hoisting. However, only the declaration is hoisted, the assignment (if there is one), will stay where it is.\n\nNote that the declaration is not actually moved - the JavaScript engine parses the declarations during compilation and becomes aware of declarations and their scopes. It is just easier to understand this behavior by visualizing the declarations as being hoisted to the top of their scope. Let's explain with a few examples.\n\n```js\nconsole.log(foo); // undefined\nvar foo = 1;\nconsole.log(foo); // 1\n```\n\nFunction declarations have the body hoisted while the function expressions (written in the form of variable declarations) only has the variable declaration hoisted.\n\n```js\n// Function Declaration\nconsole.log(foo); // [Function: foo]\nfoo(); // 'FOOOOO'\nfunction foo() {\n  console.log('FOOOOO');\n}\nconsole.log(foo); // [Function: foo]\n\n// Function Expression\nconsole.log(bar); // undefined\nbar(); // Uncaught TypeError: bar is not a function\nvar bar = function () {\n  console.log('BARRRR');\n};\nconsole.log(bar); // [Function: bar]\n```\n\nVariables declared via `let` and `const` are hoisted as well. However, unlike `var` and `function`, they are not initialized and accessing them before the declaration will result in a `ReferenceError` exception. The variable is in a \"temporal dead zone\" from the start of the block until the declaration is processed.\n\n```js\nx; // undefined\ny; // Reference error: y is not defined\n\nvar x = 'local';\nlet y = 'local';\n```\n\n###### References\n\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_Types#Variable_hoisting\n- https://stackoverflow.com/questions/31219420/are-variables-declared-with-let-or-const-not-hoisted-in-es6/31222689#31222689\n\n[[↑] Back to top](#table-of-contents)\n\n### Describe event bubbling.\n\nWhen an event triggers on a DOM element, it will attempt to handle the event if there is a listener attached, then the event is bubbled up to its parent and the same thing happens. This bubbling occurs up the element's ancestors all the way to the `document`. Event bubbling is the mechanism behind event delegation.\n\n[[↑] Back to top](#table-of-contents)\n\n### What's the difference between an \"attribute\" and a \"property\"?\n\nAttributes are defined on the HTML markup but properties are defined on the DOM. To illustrate the difference, imagine we have this text field in our HTML: `<input type=\"text\" value=\"Hello\">`.\n\n```js\nconst input = document.querySelector('input');\nconsole.log(input.getAttribute('value')); // Hello\nconsole.log(input.value); // Hello\n```\n\nBut after you change the value of the text field by adding \"World!\" to it, this becomes:\n\n```js\nconsole.log(input.getAttribute('value')); // Hello\nconsole.log(input.value); // Hello World!\n```\n\n###### References\n\n- https://stackoverflow.com/questions/6003819/properties-and-attributes-in-html\n\n[[↑] Back to top](#table-of-contents)\n\n### Why is extending built-in JavaScript objects not a good idea?\n\nExtending a built-in/native JavaScript object means adding properties/functions to its `prototype`. While this may seem like a good idea at first, it is dangerous in practice. Imagine your code uses a few libraries that both extend the `Array.prototype` by adding the same `contains` method, the implementations will overwrite each other and your code will break if the behavior of these two methods is not the same.\n\nThe only time you may want to extend a native object is when you want to create a polyfill, essentially providing your own implementation for a method that is part of the JavaScript specification but might not exist in the user's browser due to it being an older browser.\n\n###### References\n\n- http://lucybain.com/blog/2014/js-extending-built-in-objects/\n\n[[↑] Back to top](#table-of-contents)\n\n### Difference between document `load` event and document `DOMContentLoaded` event?\n\nThe `DOMContentLoaded` event is fired when the initial HTML document has been completely loaded and parsed, without waiting for stylesheets, images, and subframes to finish loading.\n\n`window`'s `load` event is only fired after the DOM and all dependent resources and assets have loaded.\n\n###### References\n\n- https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded\n- https://developer.mozilla.org/en-US/docs/Web/Events/load\n\n[[↑] Back to top](#table-of-contents)\n\n### What is the difference between `==` and `===`?\n\n`==` is the abstract equality operator while `===` is the strict equality operator. The `==` operator will compare for equality after doing any necessary type conversions. The `===` operator will not do type conversion, so if two values are not the same type `===` will simply return `false`. When using `==`, funky things can happen, such as:\n\n```js\n1 == '1'; // true\n1 == [1]; // true\n1 == true; // true\n0 == ''; // true\n0 == '0'; // true\n0 == false; // true\n```\n\nMy advice is never to use the `==` operator, except for convenience when comparing against `null` or `undefined`, where `a == null` will return `true` if `a` is `null` or `undefined`.\n\n```js\nvar a = null;\nconsole.log(a == null); // true\nconsole.log(a == undefined); // true\n```\n\n###### References\n\n- https://stackoverflow.com/questions/359494/which-equals-operator-vs-should-be-used-in-javascript-comparisons\n\n[[↑] Back to top](#table-of-contents)\n\n### Explain the same-origin policy with regards to JavaScript.\n\nThe same-origin policy prevents JavaScript from making requests across domain boundaries. An origin is defined as a combination of URI scheme, hostname, and port number. This policy prevents a malicious script on one page from obtaining access to sensitive data on another web page through that page's Document Object Model.\n\n###### References\n\n- https://en.wikipedia.org/wiki/Same-origin_policy\n\n[[↑] Back to top](#table-of-contents)\n\n### Make this work:\n\n```js\nduplicate([1, 2, 3, 4, 5]); // [1,2,3,4,5,1,2,3,4,5]\n```\n\n```js\nfunction duplicate(arr) {\n  return arr.concat(arr);\n}\n\nduplicate([1, 2, 3, 4, 5]); // [1,2,3,4,5,1,2,3,4,5]\n```\n\nOr with ES6:\n\n```js\nconst duplicate = (arr) => [...arr, ...arr];\n\nduplicate([1, 2, 3, 4, 5]); // [1,2,3,4,5,1,2,3,4,5]\n```\n\n[[↑] Back to top](#table-of-contents)\n\n### Why is it called a Ternary expression, what does the word \"Ternary\" indicate?\n\n\"Ternary\" indicates three, and a ternary expression accepts three operands, the test condition, the \"then\" expression and the \"else\" expression. Ternary expressions are not specific to JavaScript and I'm not sure why it is even in this list.\n\n###### References\n\n- https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\n\n[[↑] Back to top](#table-of-contents)\n\n### What is `\"use strict\";`? What are the advantages and disadvantages to using it?\n\n'use strict' is a statement used to enable strict mode to entire scripts or individual functions. Strict mode is a way to opt into a restricted variant of JavaScript.\n\nAdvantages:\n\n- Makes it impossible to accidentally create global variables.\n- Makes assignments which would otherwise silently fail to throw an exception.\n- Makes attempts to delete undeletable properties throw (where before the attempt would simply have no effect).\n- Requires that function parameter names be unique.\n- `this` is undefined in the global context.\n- It catches some common coding bloopers, throwing exceptions.\n- It disables features that are confusing or poorly thought out.\n\nDisadvantages:\n\n- Many missing features that some developers might be used to.\n- No more access to `function.caller` and `function.arguments`.\n- Concatenation of scripts written in different strict modes might cause issues.\n\nOverall, I think the benefits outweigh the disadvantages, and I never had to rely on the features that strict mode blocks. I would recommend using strict mode.\n\n###### References\n\n- http://2ality.com/2011/10/strict-mode-hatred.html\n- http://lucybain.com/blog/2014/js-use-strict/\n\n[[↑] Back to top](#table-of-contents)\n\n### Create a for loop that iterates up to `100` while outputting **\"fizz\"** at multiples of `3`, **\"buzz\"** at multiples of `5` and **\"fizzbuzz\"** at multiples of `3` and `5`.\n\nCheck out this version of FizzBuzz by [Paul Irish](https://gist.github.com/jaysonrowe/1592432#gistcomment-790724).\n\n```js\nfor (let i = 1; i <= 100; i++) {\n  let f = i % 3 == 0,\n    b = i % 5 == 0;\n  console.log(f ? (b ? 'FizzBuzz' : 'Fizz') : b ? 'Buzz' : i);\n}\n```\n\nI would not advise you to write the above during interviews though. Just stick with the long but clear approach. For more wacky versions of FizzBuzz, check out the reference link below.\n\n###### References\n\n- https://gist.github.com/jaysonrowe/1592432\n\n[[↑] Back to top](#table-of-contents)\n\n### Why is it, in general, a good idea to leave the global scope of a website as-is and never touch it?\n\nEvery script has access to the global scope, and if everyone uses the global namespace to define their variables, collisions will likely occur. Use the module pattern (IIFEs) to encapsulate your variables within a local namespace.\n\n[[↑] Back to top](#table-of-contents)\n\n### Why would you use something like the `load` event? Does this event have disadvantages? Do you know any alternatives, and why would you use those?\n\nThe `load` event fires at the end of the document loading process. At this point, all of the objects in the document are in the DOM, and all the images, scripts, links and sub-frames have finished loading.\n\nThe DOM event `DOMContentLoaded` will fire after the DOM for the page has been constructed, but do not wait for other resources to finish loading. This is preferred in certain cases when you do not need the full page to be loaded before initializing.\n\nTODO.\n\n###### References\n\n- https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onload\n\n[[↑] Back to top](#table-of-contents)\n\n### Explain what a single page app is and how to make one SEO-friendly.\n\nThe below is taken from the awesome [Grab Front End Guide](https://github.com/grab/front-end-guide), which coincidentally, is written by me!\n\nWeb developers these days refer to the products they build as web apps, rather than websites. While there is no strict difference between the two terms, web apps tend to be highly interactive and dynamic, allowing the user to perform actions and receive a response to their action. Traditionally, the browser receives HTML from the server and renders it. When the user navigates to another URL, a full-page refresh is required and the server sends fresh new HTML to the new page. This is called server-side rendering.\n\nHowever, in modern SPAs, client-side rendering is used instead. The browser loads the initial page from the server, along with the scripts (frameworks, libraries, app code) and stylesheets required for the whole app. When the user navigates to other pages, a page refresh is not triggered. The URL of the page is updated via the [HTML5 History API](https://developer.mozilla.org/en-US/docs/Web/API/History_API). New data required for the new page, usually in JSON format, is retrieved by the browser via [AJAX](https://developer.mozilla.org/en-US/docs/AJAX/Getting_Started) requests to the server. The SPA then dynamically updates the page with the data via JavaScript, which it has already downloaded in the initial page load. This model is similar to how native mobile apps work.\n\nThe benefits:\n\n- The app feels more responsive and users do not see the flash between page navigations due to full-page refreshes.\n- Fewer HTTP requests are made to the server, as the same assets do not have to be downloaded again for each page load.\n- Clear separation of the concerns between the client and the server; you can easily build new clients for different platforms (e.g. mobile, chatbots, smart watches) without having to modify the server code. You can also modify the technology stack on the client and server independently, as long as the API contract is not broken.\n\nThe downsides:\n\n- Heavier initial page load due to the loading of framework, app code, and assets required for multiple pages.\n- There's an additional step to be done on your server which is to configure it to route all requests to a single entry point and allow client-side routing to take over from there.\n- SPAs are reliant on JavaScript to render content, but not all search engines execute JavaScript during crawling, and they may see empty content on your page. This inadvertently hurts the Search Engine Optimization (SEO) of your app. However, most of the time, when you are building apps, SEO is not the most important factor, as not all the content needs to be indexable by search engines. To overcome this, you can either server-side render your app or use services such as [Prerender](https://prerender.io/) to \"render your javascript in a browser, save the static HTML, and return that to the crawlers\".\n\n###### References\n\n- https://github.com/grab/front-end-guide#single-page-apps-spas\n- http://stackoverflow.com/questions/21862054/single-page-app-advantages-and-disadvantages\n- http://blog.isquaredsoftware.com/presentations/2016-10-revolution-of-web-dev/\n- https://medium.freecodecamp.com/heres-why-client-side-rendering-won-46a349fadb52\n\n[[↑] Back to top](#table-of-contents)\n\n### What is the extent of your experience with Promises and/or their polyfills?\n\nPossess working knowledge of it. A promise is an object that may produce a single value sometime in the future: either a resolved value or a reason that it's not resolved (e.g., a network error occurred). A promise may be in one of 3 possible states: fulfilled, rejected, or pending. Promise users can attach callbacks to handle the fulfilled value or the reason for rejection.\n\nSome common polyfills are `$.deferred`, Q and Bluebird but not all of them comply with the specification. ES2015 supports Promises out of the box and polyfills are typically not needed these days.\n\n###### References\n\n- https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-promise-27fc71e77261\n\n[[↑] Back to top](#table-of-contents)\n\n### What are the pros and cons of using Promises instead of callbacks?\n\n**Pros**\n\n- Avoid callback hell which can be unreadable.\n- Makes it easy to write sequential asynchronous code that is readable with `.then()`.\n- Makes it easy to write parallel asynchronous code with `Promise.all()`.\n- With promises, these scenarios which are present in callbacks-only coding, will not happen:\n  - Call the callback too early\n  - Call the callback too late (or never)\n  - Call the callback too few or too many times\n  - Fail to pass along any necessary environment/parameters\n  - Swallow any errors/exceptions that may happen\n\n**Cons**\n\n- Slightly more complex code (debatable).\n- In older browsers where ES2015 is not supported, you need to load a polyfill in order to use it.\n\n###### References\n\n- https://github.com/getify/You-Dont-Know-JS/blob/master/async%20%26%20performance/ch3.md\n\n[[↑] Back to top](#table-of-contents)\n\n### What are some of the advantages/disadvantages of writing JavaScript code in a language that compiles to JavaScript?\n\nSome examples of languages that compile to JavaScript include CoffeeScript, Elm, ClojureScript, PureScript, and TypeScript.\n\nAdvantages:\n\n- Fixes some of the longstanding problems in JavaScript and discourages JavaScript anti-patterns.\n- Enables you to write shorter code, by providing some syntactic sugar on top of JavaScript, which I think ES5 lacks, but ES2015 is awesome.\n- Static types are awesome (in the case of TypeScript) for large projects that need to be maintained over time.\n\nDisadvantages:\n\n- Require a build/compile process as browsers only run JavaScript and your code will need to be compiled into JavaScript before being served to browsers.\n- Debugging can be a pain if your source maps do not map nicely to your pre-compiled source.\n- Most developers are not familiar with these languages and will need to learn it. There's a ramp up cost involved for your team if you use it for your projects.\n- Smaller community (depends on the language), which means resources, tutorials, libraries, and tooling would be harder to find.\n- IDE/editor support might be lacking.\n- These languages will always be behind the latest JavaScript standard.\n- Developers should be cognizant of what their code is being compiled to — because that is what would actually be running, and that is what matters in the end.\n\nPractically, ES2015 has vastly improved JavaScript and made it much nicer to write. I don't really see the need for CoffeeScript these days.\n\n###### References\n\n- https://softwareengineering.stackexchange.com/questions/72569/what-are-the-pros-and-cons-of-coffeescript\n\n[[↑] Back to top](#table-of-contents)\n\n### What tools and techniques do you use for debugging JavaScript code?\n\n- React and Redux\n  - [React Devtools](https://github.com/facebook/react-devtools)\n  - [Redux Devtools](https://github.com/gaearon/redux-devtools)\n- Vue\n  - [Vue Devtools](https://github.com/vuejs/vue-devtools)\n- JavaScript\n  - [Chrome Devtools](https://hackernoon.com/twelve-fancy-chrome-devtools-tips-dc1e39d10d9d)\n  - `debugger` statement\n  - Good old `console.log` debugging\n\n###### References\n\n- https://hackernoon.com/twelve-fancy-chrome-devtools-tips-dc1e39d10d9d\n- https://raygun.com/blog/javascript-debugging/\n\n[[↑] Back to top](#table-of-contents)\n\n### What language constructions do you use for iterating over object properties and array items?\n\nFor objects:\n\n- `for-in` loops - `for (var property in obj) { console.log(property); }`. However, this will also iterate through its inherited properties, and you will add an `obj.hasOwnProperty(property)` check before using it.\n- `Object.keys()` - `Object.keys(obj).forEach(function (property) { ... })`. `Object.keys()` is a static method that will lists all enumerable properties of the object that you pass it.\n- `Object.getOwnPropertyNames()` - `Object.getOwnPropertyNames(obj).forEach(function (property) { ... })`. `Object.getOwnPropertyNames()` is a static method that will lists all enumerable and non-enumerable properties of the object that you pass it.\n\nFor arrays:\n\n- `for` loops - `for (var i = 0; i < arr.length; i++)`. The common pitfall here is that `var` is in the function scope and not the block scope and most of the time you would want block scoped iterator variable. ES2015 introduces `let` which has block scope and it is recommended to use that instead. So this becomes: `for (let i = 0; i < arr.length; i++)`.\n- `forEach` - `arr.forEach(function (el, index) { ... })`. This construct can be more convenient at times because you do not have to use the `index` if all you need is the array elements. There are also the `every` and `some` methods which will allow you to terminate the iteration early.\n- `for-of` loops - `for (let elem of arr) { ... }`. ES6 introduces a new loop, the `for-of` loop, that allows you to loop over objects that conform to the [iterable protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol) such as `String`, `Array`, `Map`, `Set`, etc. It combines the advantages of the `for` loop and the `forEach()` method. The advantage of the `for` loop is that you can break from it, and the advantage of `forEach()` is that it is more concise than the `for` loop because you don't need a counter variable. With the `for-of` loop, you get both the ability to break from a loop and a more concise syntax.\n\nMost of the time, I would prefer the `.forEach` method, but it really depends on what you are trying to do. Before ES6, we used `for` loops when we needed to prematurely terminate the loop using `break`. But now with ES6, we can do that with `for-of` loops. I would use `for` loops when I need even more flexibility, such as incrementing the iterator more than once per loop.\n\nAlso, when using the `for-of` loop, if you need to access both the index and value of each array element, you can do so with the ES6 Array `entries()` method and destructuring:\n\n```js\nconst arr = ['a', 'b', 'c'];\n\nfor (let [index, elem] of arr.entries()) {\n  console.log(index, ': ', elem);\n}\n```\n\n###### References\n\n- http://2ality.com/2015/08/getting-started-es6.html#from-for-to-foreach-to-for-of\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries\n\n[[↑] Back to top](#table-of-contents)\n\n### Explain the difference between mutable and immutable objects.\n\nImmutability is a core principle in functional programming, and has lots to offer to object-oriented programs as well. A mutable object is an object whose state can be modified after it is created. An immutable object is an object whose state cannot be modified after it is created.\n\n#### What is an example of an immutable object in JavaScript?\n\nIn JavaScript, some built-in types (numbers, strings) are immutable, but custom objects are generally mutable.\n\nSome built-in immutable JavaScript objects are `Math`, `Date`.\n\nHere are a few ways to add/simulate immutability on plain JavaScript objects.\n\n**Object Constant Properties**\n\nBy combining `writable: false` and `configurable: false`, you can essentially create a constant (cannot be changed, redefined or deleted) as an object property, like:\n\n```js\nlet myObject = {};\nObject.defineProperty(myObject, 'number', {\n  value: 42,\n  writable: false,\n  configurable: false,\n});\nconsole.log(myObject.number); // 42\nmyObject.number = 43;\nconsole.log(myObject.number); // 42\n```\n\n**Prevent Extensions**\n\nIf you want to prevent an object from having new properties added to it, but otherwise leave the rest of the object's properties alone, call `Object.preventExtensions(...)`:\n\n```js\nvar myObject = {\n  a: 2,\n};\n\nObject.preventExtensions(myObject);\n\nmyObject.b = 3;\nmyObject.b; // undefined\n```\n\nIn non-strict mode, the creation of `b` fails silently. In strict mode, it throws a `TypeError`.\n\n**Seal**\n\n`Object.seal()` creates a \"sealed\" object, which means it takes an existing object and essentially calls `Object.preventExtensions()` on it, but also marks all its existing properties as `configurable: false`.\n\nSo, not only can you not add any more properties, but you also cannot reconfigure or delete any existing properties (though you can still modify their values).\n\n**Freeze**\n\n`Object.freeze()` creates a frozen object, which means it takes an existing object and essentially calls `Object.seal()` on it, but it also marks all \"data accessor\" properties as writable:false, so that their values cannot be changed.\n\nThis approach is the highest level of immutability that you can attain for an object itself, as it prevents any changes to the object or to any of its direct properties (though, as mentioned above, the contents of any referenced other objects are unaffected).\n\n```js\nvar immutable = Object.freeze({});\n```\n\nFreezing an object does not allow new properties to be added to an object and prevents from removing or altering the existing properties. `Object.freeze()` preserves the enumerability, configurability, writability and the prototype of the object. It returns the passed object and does not create a frozen copy.\n\n#### What are the pros and cons of immutability?\n\n**Pros**\n\n- Easier change detection - Object equality can be determined in a performant and easy manner through referential equality. This is useful for comparing object differences in React and Redux.\n- Programs with immutable objects are less complicated to think about, since you don't need to worry about how an object may evolve over time.\n- Defensive copies are no longer necessary when immutable objects are returning from or passed to functions, since there is no possibility an immutable object will be modified by it.\n- Easy sharing via references - One copy of an object is just as good as another, so you can cache objects or reuse the same object multiple times.\n- Thread-safe - Immutable objects can be safely used between threads in a multi-threaded environment since there is no risk of them being modified in other concurrently running threads.\n- Using libraries like ImmmutableJS, objects are modified using structural sharing and less memory is needed for having multiple objects with similar structures.\n\n**Cons**\n\n- Naive implementations of immutable data structures and its operations can result in extremely poor performance because new objects are created each time. It is recommended to use libraries for efficient immutable data structures and operations that leverage on structural sharing.\n- Allocation (and deallocation) of many small objects rather than modifying existing ones can cause a performance impact. The complexity of either the allocator or the garbage collector usually depends on the number of objects on the heap.\n- Cyclic data structures such as graphs are difficult to build. If you have two objects which can't be modified after initialization, how can you get them to point to each other?\n\n###### References\n\n- https://stackoverflow.com/questions/1863515/pros-cons-of-immutability-vs-mutability\n\n[[↑] Back to top](#table-of-contents)\n\n#### How can you achieve immutability in your own code?\n\nOne way to achieve immutability is to use libraries like [immutable.js](http://facebook.github.io/immutable-js/), [mori](https://github.com/swannodette/mori) or [immer](https://github.com/immerjs/immer).\n\nThe alternative is to use `const` declarations combined with the techniques mentioned above for creation. For \"mutating\" objects, use the spread operator, `Object.assign`, `Array.concat()`, etc., to create new objects instead of mutate the original object.\n\nExamples:\n\n```js\n// Array Example\nconst arr = [1, 2, 3];\nconst newArr = [...arr, 4]; // [1, 2, 3, 4]\n\n// Object Example\nconst human = Object.freeze({race: 'human'});\nconst john = {...human, name: 'John'}; // {race: \"human\", name: \"John\"}\nconst alienJohn = {...john, race: 'alien'}; // {race: \"alien\", name: \"John\"}\n```\n\n###### References\n\n- https://stackoverflow.com/questions/1863515/pros-cons-of-immutability-vs-mutability\n- https://www.sitepoint.com/immutability-javascript/\n- https://wecodetheweb.com/2016/02/12/immutable-javascript-using-es6-and-beyond/\n\n[[↑] Back to top](#table-of-contents)\n\n### Explain the difference between synchronous and asynchronous functions.\n\nSynchronous functions are blocking while asynchronous functions are not. In synchronous functions, statements complete before the next statement is run. In this case, the program is evaluated exactly in order of the statements and execution of the program is paused if one of the statements take a very long time.\n\nAsynchronous functions usually accept a callback as a parameter and execution continue on the next line immediately after the asynchronous function is invoked. The callback is only invoked when the asynchronous operation is complete and the call stack is empty. Heavy duty operations such as loading data from a web server or querying a database should be done asynchronously so that the main thread can continue executing other operations instead of blocking until that long operation to complete (in the case of browsers, the UI will freeze).\n\n[[↑] Back to top](#table-of-contents)\n\n### What is event loop? What is the difference between call stack and task queue?\n\nThe event loop is a single-threaded loop that monitors the call stack and checks if there is any work to be done in the task queue. If the call stack is empty and there are callback functions in the task queue, a function is dequeued and pushed onto the call stack to be executed.\n\nIf you haven't already checked out Philip Robert's [talk on the Event Loop](https://2014.jsconf.eu/speakers/philip-roberts-what-the-heck-is-the-event-loop-anyway.html), you should. It is one of the most viewed videos on JavaScript.\n\n###### References\n\n- https://2014.jsconf.eu/speakers/philip-roberts-what-the-heck-is-the-event-loop-anyway.html\n\n[[↑] Back to top](#table-of-contents)\n\n### Explain the differences on the usage of `foo` between `function foo() {}` and `var foo = function() {}`\n\nThe former is a function declaration while the latter is a function expression. The key difference is that function declarations have its body hoisted but the bodies of function expressions are not (they have the same hoisting behavior as variables). For more explanation on hoisting, refer to the question above [on hoisting](#explain-hoisting). If you try to invoke a function expression before it is defined, you will get an `Uncaught TypeError: XXX is not a function` error.\n\n**Function Declaration**\n\n```js\nfoo(); // 'FOOOOO'\nfunction foo() {\n  console.log('FOOOOO');\n}\n```\n\n**Function Expression**\n\n```js\nfoo(); // Uncaught TypeError: foo is not a function\nvar foo = function () {\n  console.log('FOOOOO');\n};\n```\n\n###### References\n\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function\n\n[[↑] Back to top](#table-of-contents)\n\n### What are the differences between variables created using `let`, `var` or `const`?\n\nVariables declared using the `var` keyword are scoped to the function in which they are created, or if created outside of any function, to the global object. `let` and `const` are _block scoped_, meaning they are only accessible within the nearest set of curly braces (function, if-else block, or for-loop).\n\n```js\nfunction foo() {\n  // All variables are accessible within functions.\n  var bar = 'bar';\n  let baz = 'baz';\n  const qux = 'qux';\n\n  console.log(bar); // bar\n  console.log(baz); // baz\n  console.log(qux); // qux\n}\n\nconsole.log(bar); // ReferenceError: bar is not defined\nconsole.log(baz); // ReferenceError: baz is not defined\nconsole.log(qux); // ReferenceError: qux is not defined\n```\n\n```js\nif (true) {\n  var bar = 'bar';\n  let baz = 'baz';\n  const qux = 'qux';\n}\n\n// var declared variables are accessible anywhere in the function scope.\nconsole.log(bar); // bar\n// let and const defined variables are not accessible outside of the block they were defined in.\nconsole.log(baz); // ReferenceError: baz is not defined\nconsole.log(qux); // ReferenceError: qux is not defined\n```\n\n`var` allows variables to be hoisted, meaning they can be referenced in code before they are declared. `let` and `const` will not allow this, instead throwing an error.\n\n```js\nconsole.log(foo); // undefined\n\nvar foo = 'foo';\n\nconsole.log(baz); // ReferenceError: can't access lexical declaration 'baz' before initialization\n\nlet baz = 'baz';\n\nconsole.log(bar); // ReferenceError: can't access lexical declaration 'bar' before initialization\n\nconst bar = 'bar';\n```\n\nRedeclaring a variable with `var` will not throw an error, but `let` and `const` will.\n\n```js\nvar foo = 'foo';\nvar foo = 'bar';\nconsole.log(foo); // \"bar\"\n\nlet baz = 'baz';\nlet baz = 'qux'; // Uncaught SyntaxError: Identifier 'baz' has already been declared\n```\n\n`let` and `const` differ in that `let` allows reassigning the variable's value while `const` does not.\n\n```js\n// This is fine.\nlet foo = 'foo';\nfoo = 'bar';\n\n// This causes an exception.\nconst baz = 'baz';\nbaz = 'qux';\n```\n\n###### References\n\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\n\n[[↑] Back to top](#table-of-contents)\n\n### What are the differences between ES6 class and ES5 function constructors?\n\nLet's first look at example of each:\n\n```js\n// ES5 Function Constructor\nfunction Person(name) {\n  this.name = name;\n}\n\n// ES6 Class\nclass Person {\n  constructor(name) {\n    this.name = name;\n  }\n}\n```\n\nFor simple constructors, they look pretty similar.\n\nThe main difference in the constructor comes when using inheritance. If we want to create a `Student` class that subclasses `Person` and add a `studentId` field, this is what we have to do in addition to the above.\n\n```js\n// ES5 Function Constructor\nfunction Student(name, studentId) {\n  // Call constructor of superclass to initialize superclass-derived members.\n  Person.call(this, name);\n\n  // Initialize subclass's own members.\n  this.studentId = studentId;\n}\n\nStudent.prototype = Object.create(Person.prototype);\nStudent.prototype.constructor = Student;\n\n// ES6 Class\nclass Student extends Person {\n  constructor(name, studentId) {\n    super(name);\n    this.studentId = studentId;\n  }\n}\n```\n\nIt's much more verbose to use inheritance in ES5 and the ES6 version is easier to understand and remember.\n\n###### References\n\n- https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Inheritance\n- https://eli.thegreenplace.net/2013/10/22/classical-inheritance-in-javascript-es5\n\n[[↑] Back to top](#table-of-contents)\n\n### Can you offer a use case for the new arrow => function syntax? How does this new syntax differ from other functions?\n\nOne obvious benefit of arrow functions is to simplify the syntax needed to create functions, without a need for the `function` keyword. The `this` within arrow functions is also bound to the enclosing scope which is different compared to regular functions where the `this` is determined by the object calling it. Lexically-scoped `this` is useful when invoking callbacks especially in React components.\n\n[[↑] Back to top](#table-of-contents)\n\n### What advantage is there for using the arrow syntax for a method in a constructor?\n\nThe main advantage of using an arrow function as a method inside a constructor is that the value of `this` gets set at the time of the function creation and can't change after that. So, when the constructor is used to create a new object, `this` will always refer to that object. For example, let's say we have a `Person` constructor that takes a first name as an argument has two methods to `console.log` that name, one as a regular function and one as an arrow function:\n\n```js\nconst Person = function (firstName) {\n  this.firstName = firstName;\n  this.sayName1 = function () {\n    console.log(this.firstName);\n  };\n  this.sayName2 = () => {\n    console.log(this.firstName);\n  };\n};\n\nconst john = new Person('John');\nconst dave = new Person('Dave');\n\njohn.sayName1(); // John\njohn.sayName2(); // John\n\n// The regular function can have its 'this' value changed, but the arrow function cannot\njohn.sayName1.call(dave); // Dave (because \"this\" is now the dave object)\njohn.sayName2.call(dave); // John\n\njohn.sayName1.apply(dave); // Dave (because 'this' is now the dave object)\njohn.sayName2.apply(dave); // John\n\njohn.sayName1.bind(dave)(); // Dave (because 'this' is now the dave object)\njohn.sayName2.bind(dave)(); // John\n\nvar sayNameFromWindow1 = john.sayName1;\nsayNameFromWindow1(); // undefined (because 'this' is now the window object)\n\nvar sayNameFromWindow2 = john.sayName2;\nsayNameFromWindow2(); // John\n```\n\nThe main takeaway here is that `this` can be changed for a normal function, but the context always stays the same for an arrow function. So even if you are passing around your arrow function to different parts of your application, you wouldn't have to worry about the context changing.\n\nThis can be particularly helpful in React class components. If you define a class method for something such as a click handler using a normal function, and then you pass that click handler down into a child component as a prop, you will need to also bind `this` in the constructor of the parent component. If you instead use an arrow function, there is no need to also bind \"this\", as the method will automatically get its \"this\" value from its enclosing lexical context. (See this article for an excellent demonstration and sample code: https://medium.com/@machnicki/handle-events-in-react-with-arrow-functions-ede88184bbb)\n\n###### References\n\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\n- https://medium.com/@machnicki/handle-events-in-react-with-arrow-functions-ede88184bbb\n\n[[↑] Back to top](#table-of-contents)\n\n### What is the definition of a higher-order function?\n\nA higher-order function is any function that takes one or more functions as arguments, which it uses to operate on some data, and/or returns a function as a result. Higher-order functions are meant to abstract some operation that is performed repeatedly. The classic example of this is `map`, which takes an array and a function as arguments. `map` then uses this function to transform each item in the array, returning a new array with the transformed data. Other popular examples in JavaScript are `forEach`, `filter`, and `reduce`. A higher-order function doesn't just need to be manipulating arrays as there are many use cases for returning a function from another function. `Function.prototype.bind` is one such example in JavaScript.\n\n**Map**\n\nLet say we have an array of names which we need to transform each string to uppercase.\n\n```js\nconst names = ['irish', 'daisy', 'anna'];\n```\n\nThe imperative way will be as such:\n\n```js\nconst transformNamesToUppercase = function (names) {\n  const results = [];\n  for (let i = 0; i < names.length; i++) {\n    results.push(names[i].toUpperCase());\n  }\n  return results;\n};\ntransformNamesToUppercase(names); // ['IRISH', 'DAISY', 'ANNA']\n```\n\nUse `.map(transformerFn)` makes the code shorter and more declarative.\n\n```js\nconst transformNamesToUppercase = function (names) {\n  return names.map((name) => name.toUpperCase());\n};\ntransformNamesToUppercase(names); // ['IRISH', 'DAISY', 'ANNA']\n```\n\n###### References\n\n- https://medium.com/javascript-scene/higher-order-functions-composing-software-5365cf2cbe99\n- https://hackernoon.com/effective-functional-javascript-first-class-and-higher-order-functions-713fde8df50a\n- https://eloquentjavascript.net/05_higher_order.html\n\n[[↑] Back to top](#table-of-contents)\n\n### Can you give an example for destructuring an object or an array?\n\nDestructuring is an expression available in ES6 which enables a succinct and convenient way to extract values of Objects or Arrays and place them into distinct variables.\n\n**Array destructuring**\n\n```js\n// Variable assignment.\nconst foo = ['one', 'two', 'three'];\n\nconst [one, two, three] = foo;\nconsole.log(one); // \"one\"\nconsole.log(two); // \"two\"\nconsole.log(three); // \"three\"\n```\n\n```js\n// Swapping variables\nlet a = 1;\nlet b = 3;\n\n[a, b] = [b, a];\nconsole.log(a); // 3\nconsole.log(b); // 1\n```\n\n**Object destructuring**\n\n```js\n// Variable assignment.\nconst o = {p: 42, q: true};\nconst {p, q} = o;\n\nconsole.log(p); // 42\nconsole.log(q); // true\n```\n\n###### References\n\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\n- https://ponyfoo.com/articles/es6-destructuring-in-depth\n\n[[↑] Back to top](#table-of-contents)\n\n### ES6 Template Literals offer a lot of flexibility in generating strings, can you give an example?\n\nTemplate literals help make it simple to do string interpolation, or to include variables in a string. Before ES2015, it was common to do something like this:\n\n```js\nvar person = {name: 'Tyler', age: 28};\nconsole.log(\n  'Hi, my name is ' + person.name + ' and I am ' + person.age + ' years old!',\n);\n// 'Hi, my name is Tyler and I am 28 years old!'\n```\n\nWith template literals, you can now create that same output like this instead:\n\n```js\nconst person = {name: 'Tyler', age: 28};\nconsole.log(`Hi, my name is ${person.name} and I am ${person.age} years old!`);\n// 'Hi, my name is Tyler and I am 28 years old!'\n```\n\nNote that you use backticks, not quotes, to indicate that you are using a template literal and that you can insert expressions inside the `${}` placeholders.\n\nA second helpful use case is in creating multi-line strings. Before ES2015, you could create a multi-line string like this:\n\n```js\nconsole.log('This is line one.\\nThis is line two.');\n// This is line one.\n// This is line two.\n```\n\nOr if you wanted to break it up into multiple lines in your code so you didn't have to scroll to the right in your text editor to read a long string, you could also write it like this:\n\n```js\nconsole.log('This is line one.\\n' + 'This is line two.');\n// This is line one.\n// This is line two.\n```\n\nTemplate literals, however, preserve whatever spacing you add to them. For example, to create that same multi-line output that we created above, you can simply do:\n\n```js\nconsole.log(`This is line one.\nThis is line two.`);\n// This is line one.\n// This is line two.\n```\n\nAnother use case of template literals would be to use as a substitute for templating libraries for simple variable interpolations:\n\n```js\nconst person = {name: 'Tyler', age: 28};\ndocument.body.innerHTML = `\n  <div>\n    <p>Name: ${person.name}</p>\n    <p>Name: ${person.age}</p>\n  </div>\n`;\n```\n\n**Note that your code may be susceptible to XSS by using `.innerHTML`. Sanitize your data before displaying it if it came from a user!**\n\n###### References\n\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\n\n[[↑] Back to top](#table-of-contents)\n\n### Can you give an example of a curry function and why this syntax offers an advantage?\n\nCurrying is a pattern where a function with more than one parameter is broken into multiple functions that, when called in series, will accumulate all of the required parameters one at a time. This technique can be useful for making code written in a functional style easier to read and compose. It's important to note that for a function to be curried, it needs to start out as one function, then broken out into a sequence of functions that each accepts one parameter.\n\n```js\nfunction curry(fn) {\n  if (fn.length === 0) {\n    return fn;\n  }\n\n  function _curried(depth, args) {\n    return function (newArgument) {\n      if (depth - 1 === 0) {\n        return fn(...args, newArgument);\n      }\n      return _curried(depth - 1, [...args, newArgument]);\n    };\n  }\n\n  return _curried(fn.length, []);\n}\n\nfunction add(a, b) {\n  return a + b;\n}\n\nvar curriedAdd = curry(add);\nvar addFive = curriedAdd(5);\n\nvar result = [0, 1, 2, 3, 4, 5].map(addFive); // [5, 6, 7, 8, 9, 10]\n```\n\n###### References\n\n- https://hackernoon.com/currying-in-js-d9ddc64f162e\n\n[[↑] Back to top](#table-of-contents)\n\n### What are the benefits of using spread syntax and how is it different from rest syntax?\n\nES6's spread syntax is very useful when coding in a functional paradigm as we can easily create copies of arrays or objects without resorting to `Object.create`, `slice`, or a library function. This language feature is used often in Redux and RxJS projects.\n\n```js\nfunction putDookieInAnyArray(arr) {\n  return [...arr, 'dookie'];\n}\n\nconst result = putDookieInAnyArray(['I', 'really', \"don't\", 'like']); // [\"I\", \"really\", \"don't\", \"like\", \"dookie\"]\n\nconst person = {\n  name: 'Todd',\n  age: 29,\n};\n\nconst copyOfTodd = {...person};\n```\n\nES6's rest syntax offers a shorthand for including an arbitrary number of arguments to be passed to a function. It is like an inverse of the spread syntax, taking data and stuffing it into an array rather than unpacking an array of data, and it works in function arguments, as well as in array and object destructuring assignments.\n\n```js\nfunction addFiveToABunchOfNumbers(...numbers) {\n  return numbers.map((x) => x + 5);\n}\n\nconst result = addFiveToABunchOfNumbers(4, 5, 6, 7, 8, 9, 10); // [9, 10, 11, 12, 13, 14, 15]\n\nconst [a, b, ...rest] = [1, 2, 3, 4]; // a: 1, b: 2, rest: [3, 4]\n\nconst {e, f, ...others} = {\n  e: 1,\n  f: 2,\n  g: 3,\n  h: 4,\n}; // e: 1, f: 2, others: { g: 3, h: 4 }\n```\n\n###### References\n\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\n\n[[↑] Back to top](#table-of-contents)\n\n### How can you share code between files?\n\nThis depends on the JavaScript environment.\n\nOn the client (browser environment), as long as the variables/functions are declared in the global scope (`window`), all scripts can refer to them. Alternatively, adopt the Asynchronous Module Definition (AMD) via RequireJS for a more modular approach.\n\nOn the server (Node.js), the common way has been to use CommonJS. Each file is treated as a module and it can export variables and functions by attaching them to the `module.exports` object.\n\nES2015 defines a module syntax which aims to replace both AMD and CommonJS. This will eventually be supported in both browser and Node environments.\n\n[[↑] Back to top](#table-of-contents)\n\n###### References\n\n- http://requirejs.org/docs/whyamd.html\n- https://nodejs.org/docs/latest/api/modules.html\n- http://2ality.com/2014/09/es6-modules-final.html\n\n### Why you might want to create static class members?\n\nStatic class members (properties/methods) are not tied to a specific instance of a class and have the same value regardless of which instance is referring to it. Static properties are typically configuration variables and static methods are usually pure utility functions which do not depend on the state of the instance.\n\n###### References\n\n- https://stackoverflow.com/questions/21155438/when-to-use-static-variables-methods-and-when-to-use-instance-variables-methods\n\n[[↑] Back to top](#table-of-contents)\n\n### Other Answers\n\n- http://flowerszhong.github.io/2013/11/20/javascript-questions.html\n","filetype":".md","index":17}]