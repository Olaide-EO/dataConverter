[{"title":"handbook-master","category":".","id":"handbook-master"},{"title":"Readme","category":null,"algorithm":"<h1 align=\"center\">Tech Interview Handbook</h1>\n\n<div align=\"center\">\n  <a href=\"https://techinterviewhandbook.org/\">\n    <img src=\"website/static/img/logo.svg\" alt=\"Tech Interview Handbook\" width=\"400\">\n  </a>\n  <br>\n  <a href=\"https://gitpod.io/#https://github.com/yangshun/tech-interview-handbook\">\n    <img src=\"https://img.shields.io/badge/Gitpod-Ready--to--Code-blue?logo=gitpod\" alt=\"Gitpod Ready to Code\">\n  </a>\n  <br>\n  <p>\n    <em>Credits: <a href=\"https://dribbble.com/shots/3831443-Tech-Interview-Handbook\">Illustration</a> by <a href=\"https://dribbble.com/leftaligned\">@leftaligned</a></em>\n  </p>\n  <h3>\n    <a href=\"https://techinterviewhandbook.org/\">Read on the website</a>\n  </h3>\n</div>\n\n<hr/>\n\n<div align=\"center\">\n  <h3>Get paid more. Moonchaser has negotiated hundreds of tech offers. Get 1-1 guidance from their experienced team of ex-FAANG PMs, SWEs, and Recruiters. <a href=\"https://www.moonchaser.io/?utm_source=techinterviewhandbook&utm_medium=referral&utm_content=github\" target=\"_blank\">Find out more</a></h3>\n</div>\n\n<hr/>\n\n## What is this?\n\nCarefully curated content to help you ace your next technical interview, with a focus on algorithms. System design questions are in-progress. Besides the usual algorithm questions, other **awesome** stuff includes:\n\n- [How to prepare](https://techinterviewhandbook.org/coding-round-overview) for coding interviews\n- [Interview Cheatsheet](https://techinterviewhandbook.org/cheatsheet) - Straight-to-the-point Do's and Don'ts\n- [Algorithm tips and the best practice questions](https://techinterviewhandbook.org/algorithms/algorithms-introduction) categorized by topic\n- [\"Front-end Job Interview Questions\" answers](https://github.com/yangshun/front-end-interview-handbook)\n- [Interview formats](https://techinterviewhandbook.org/interview-formats) of the top tech companies\n- [Behavioral questions](https://techinterviewhandbook.org/behavioral-questions) asked by the top tech companies\n- [Good questions to ask your interviewers](https://techinterviewhandbook.org/questions-to-ask) at the end of the interviews\n- [Helpful resume tips](https://techinterviewhandbook.org/resume) to get your resume noticed and the Do's and Don'ts\n\nHelp from you in contributing content would be very much appreciated!\n\n## Why do I want this?\n\nThis repository has _practical_ content that covers all phases of a technical interview, from applying for a job to passing the interviews to offer negotiation. Technically competent candidates might still find the non-technical content helpful as well.\n\n## Who is this for?\n\nAnybody who wants to land a job at a tech company but is new to technical interviews, seasoned engineers who have not been on the other side of the interviewing table in a while and want to get back into the game, or anyone who wants to be better at technical interviewing.\n\n---\n\n<div align=\"center\">\n  <strong>üí∞ Looking for a job? Sign up for free with <a href=\"https://triplebyte.com/a/PJaJNpO/tihg\">Triplebyte</a> to efficiently interview with top tech companies! üí∞</strong>\n</div>\n\n---\n\n## How is this repository different?\n\nThere are many awesome books like [Cracking the Coding Interview](http://www.crackingthecodinginterview.com/) and interview-related repositories out there on GitHub, what makes this repository different? The difference is that many existing interview repositories contain mainly links to external resources whereas this repository contains top quality curated content directly for your consumption.\n\nAlso, existing resources focus mainly on algorithm questions and lack coverage for more domain-specific and non-technical questions. This handbook aims to cover content beyond the typical algorithmic coding questions. üòé\n\n## Looking for Front End content?\n\nFront end-related content have been extracted out into a separate repository - [Front End Interview Handbook](https://github.com/yangshun/front-end-interview-handbook).\n\n## Contents\n\nA [Docusaurus](https://github.com/facebook/docusaurus) website has been created to provide a better reading experience. Check out the website [here](https://techinterviewhandbook.org/)!\n\n## Related\n\nIf you are interested in how data structures are implemented, check out [Lago](https://github.com/yangshun/lago), a Data Structures and Algorithms library for JavaScript. It is pretty much still WIP but I intend to make it into a library that is able to be used in production and also a reference resource for revising Data Structures and Algorithms.\n\n## Contributing\n\nThere are no formal contributing guidelines at the moment as things are still in flux and we might find a better approach to structure content as we go along. You are welcome to contribute whatever you think will be helpful to fellow engineers. If you would like to contribute content for different domains, feel free to create an issue or submit a pull request and we can discuss further.\n\n### Online one-click setup for contributing\n\nYou can use Gitpod (A free online VS Code-like IDE) for contributing online. With a single click it will launch a workspace and automatically:\n\n- clone the tech-interview-handbook repo.\n- install the dependencies.\n- run `yarn start`.\n\nSo that you can start straight away.\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/yangshun/tech-interview-handbook)\n\n### Contributors\n\nThis project exists thanks to all the people who contributed. [[Contribute](CONTRIBUTING.md)]. <a href=\"https://github.com/yangshun/tech-interview-handbook/graphs/contributors\"><img src=\"https://opencollective.com/tech-interview-handbook/contributors.svg?width=890&button=false\"></a>\n\n### Backers\n\nThank you to all our backers! üôè [[Become a backer](https://opencollective.com/tech-interview-handbook#backer)]\n\n<a href=\"https://opencollective.com/tech-interview-handbook#backers\" target=\"_blank\"><img src=\"https://opencollective.com/tech-interview-handbook/backers.svg?width=890\"></a>\n\n<a href=\"https://www.buymeacoffee.com/yangshun\" target=\"_blank\"><img src=\"https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png\" alt=\"Buy Me A Coffee\" style=\"height: auto !important; width: auto !important;\"></a>\n\n### Sponsors\n\nSupport this project by becoming a sponsor. Your logo/profile picture will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/tech-interview-handbook#sponsor)]\n\n<a href=\"https://opencollective.com/tech-interview-handbook/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/tech-interview-handbook/sponsor/0/avatar.svg\"></a> <a href=\"https://opencollective.com/tech-interview-handbook/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/tech-interview-handbook/sponsor/1/avatar.svg\"></a> <a href=\"https://opencollective.com/tech-interview-handbook/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/tech-interview-handbook/sponsor/2/avatar.svg\"></a> <a href=\"https://opencollective.com/tech-interview-handbook/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/tech-interview-handbook/sponsor/3/avatar.svg\"></a> <a href=\"https://opencollective.com/tech-interview-handbook/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/tech-interview-handbook/sponsor/4/avatar.svg\"></a> <a href=\"https://opencollective.com/tech-interview-handbook/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/tech-interview-handbook/sponsor/5/avatar.svg\"></a> <a href=\"https://opencollective.com/tech-interview-handbook/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/tech-interview-handbook/sponsor/6/avatar.svg\"></a> <a href=\"https://opencollective.com/tech-interview-handbook/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/tech-interview-handbook/sponsor/7/avatar.svg\"></a> <a href=\"https://opencollective.com/tech-interview-handbook/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/tech-interview-handbook/sponsor/8/avatar.svg\"></a> <a href=\"https://opencollective.com/tech-interview-handbook/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/tech-interview-handbook/sponsor/9/avatar.svg\"></a>\n\n## Maintainers\n\n- [Yangshun Tay](https://github.com/yangshun)\n- [Louie Tan](https://github.com/louietyj)\n\n## Disclaimer\n\nI am providing code in the repository to you under an open source license. Because this is my personal repository, the license you receive to my code is from me and not my employer (Facebook)\n","filetype":".md","index":0},{"title":" contents","category":null,"id":"_contents","index":1},{"title":"Behavioral Questions","category":"_contents","id":"behavioral-questions__contents","algorithm":"---\nid: behavioral-questions\ntitle: Common Questions\n---\n\n### General\n\n- Why do you want to work for X company?\n- Why do you want to leave your current/last company?\n- What are you looking for in your next role?\n- Tell me about a time when you had a conflict with a co-worker.\n- Tell me about a time in which you had a conflict and needed to influence somebody else.\n- What project are you currently working on?\n- What is the most challenging aspect of your current project?\n- What was the most difficult bug that you fixed in the past 6 months?\n- How do you tackle challenges? Name a difficult challenge you faced while working on a project, how you overcame it, and what you learned.\n- What are you excited about?\n- What frustrates you?\n- Imagine it is your first day here at the company. What do you want to work on? What features would you improve on?\n- What are the most interesting projects you have worked on and how might they be relevant to this company's environment?\n- Tell me about a time you had a disagreement with your manager.\n- Talk about a project you are most passionate about, or one where you did your best work.\n- What does your best day of work look like?\n- What is something that you had to push for in your previous projects?\n- What is the most constructive feedback you have received in your career?\n- What is something you had to persevere at for multiple months?\n- Tell me about a time you met a tight deadline.\n- If this were your first annual review with our company, what would I be telling you right now?\n- Time management has become a necessary factor in productivity. Give an example of a time-management skill you've learned and applied at work.\n- Tell me about a problem you've had getting along with a work associate.\n- What aspects of your work are most often criticized?\n- How have you handled criticism of your work?\n- What strengths do you think are most important for *your job position*?\n- What words would your colleagues use to describe you?\n- What would you hope to achieve in the first six months after being hired?\n\n### Airbnb\n\nSource: [Glassdoor](https://www.glassdoor.com/Interview/Airbnb-Interview-Questions-E391850.htm)\n\nWhile loving to travel or appreciating Airbnb's growth may be good answers, try to demonstrate the deep connection you have with the product.\n\n- What does \"belong anywhere\" mean to you?\n- What large problems in the world would you solve today?\n- Why do you like Airbnb?\n- If you had an unlimited budget and you could buy one gift for one person, what would you buy and who would you buy it for?\n- If you had an unlimited budget and you could go somewhere, where would you go?\n- Share one of your trips with us.\n- What is the most challenging project in or out of school that you have worked on in the last 6 months.\n- What is something that you don't want from your last internship/job?\n- Give me an example of when you've been a good host.\n- What's something you'd like to remove from the Airbnb experience?\n- What is something new that you can teach your interviewer in a few minutes?\n- Tell me about why you want to work here.\n- What is the best gift you have ever given or received?\n- Tell me about a time you were uncomfortable and how you dealt with it.\n- Explain a project that you worked on recently.\n- What do you think of Airbnb?\n- Tell me something about yourself and why you'd be a good fit for the position.\n- Name a situation where you were impressed by a company's customer service.\n- How did you work with senior management on large projects as well as multiple internal teams?\n- Tell me about a time you had to give someone terrible news.\n- If you were a gerbil, which gerbil would you be?\n- What excites you about the company?\n- How does Airbnb impact our guests and hosts?\n- What part of our mission resonates the most with you?\n\n### Amazon\n\nSource: [Glassdoor](https://www.glassdoor.com/Interview/Amazon-Interview-Questions-E6036.htm)\n\n- How do you deal with a failed deadline?\n- Why do you want to work for Amazon?\n- Tell me about a situation where you had a conflict with a teammate.\n- In your professional experience have you worked on something without getting approval from your manager?\n- Tell me a situation where you would have done something differently from what you actually did.\n- What is the most exceedingly bad misstep you've made at any point?\n- Describe what Human Resources means to you.\n- How would you improve Amazon's website?\n\n### Bytedance\n\nSource: [Glassdoor]\n\n- What do you know about product manager and why?\n- Take me through a product you launched from start to end\n- What's the biggest achievement in your previous projects\n- Why do you want to work at ByteDance?\n- Tell me about a recent failure and what you learned from the experience\n- What excites you about the role?\n\n### Dropbox\n\nSource: [Glassdoor](https://www.glassdoor.com/Interview/Dropbox-Interview-Questions-E415350.htm)\n\n- Talk about your favorite project.\n- If you were hired here what would you do?\n- State an experience about how you solved a technical problem. Be specific about the diagnosis and process.\n\n### Hired\n\nSource: [Glassdoor](https://hired.com/blog/candidates/10-top-interview-questions-how-to-answer/)\n\n- Tell me about yourself.\n- What is your biggest strength and area of growth?\n- Why are you interested in this opportunity?\n- What are your salary expectations?\n- Why are you looking to leave your current company?\n- Tell me about a time your work responsibilities got a little overwhelming. What did you do?\n- Give me an example of a time when you had a difference of opinion with a team member. How did you handle that?\n- Tell me about a challenge you faced recently in your role. How did you tackle it? What was the outcome?\n- Where do you want to be in five years?\n- Tell me about a time you needed information from someone who wasn't responsive. What did you do?\n\n### Lyft\n\nSource: [Glassdoor](https://www.glassdoor.com/Interview/Lyft-Interview-Questions-E700614.htm)\n\n- Tell me about your most interesting/challenging project to date.\n- Why Lyft? What are you looking for in the next role?\n\n### Palantir\n\nSource: [Glassdoor](https://www.glassdoor.com/Interview/Palantir-Technologies-Interview-Questions-E236375.htm)\n\n- **What is something 90% of people disagree with you about?**\n- **What is broken around you?**\n- How do you deal with difficult coworkers? Think about specific instances where you resolved conflicts.\n- How did you win over the difficult employees?\n- Tell me about an analytical problem that you have worked on in the past.\n- What are your three strengths and three weaknesses?\n- If you were in charge of picking projects for Palantir, what problem would you try to solve?\n- What are some of the best and worst things about your current company?\n- What would your manager say about you?\n- Describe Palantir to your grandmother.\n- Teach me something you've learned.\n- Tell me a time when you predicted something.\n- If your supervisors were to rate you on a scale of 1-10, what would they rate you?\n- What was the most fun thing you did recently?\n- Tell me the story of how you became who you are today and what made you apply to Palantir.\n\n### Slack\n\nSource: [Glassdoor](https://www.glassdoor.com/Interview/Slack-Interview-Questions-E950758.htm)\n\n- Tell me something about your internship.\n- Why do you want to join Slack?\n- Tell me about your past projects.\n- Explain me your toughest project and the working architecture.\n- Apart from technical knowledge, what did you learn during your internship?\n- If someone has a different viewpoint to do a project like different programming language, how would handle this situation?\n- What are your most interesting subjects and why?\n- Did you find any bugs in Slack?\n- What is your favorite feature and why?\n\n### Stack Overflow\n\nSource: [Glassdoor](https://hired.com/blog/candidates/10-top-interview-questions-how-to-answer/)\n\n- What have you built?\n- What is the hardest technical problem you have run into?\n- How did you solve it?\n- Where do you see yourself in 5 years?\n- Why do you want to work here?\n- How do you handle disagreements with co-workers?\n\n### Stripe\n\nSource: [Glassdoor](https://www.glassdoor.com/Interview/Stripe-Interview-Questions-E671932.htm)\n\n- How do you stay up to date with the latest technologies?\n- Explain a project that you worked on recently that was difficult.\n- Where do you see yourself in five years?\n\n### Twitter\n\nSource: [Glassdoor](https://www.glassdoor.com/Interview/Twitter-Interview-Questions-E100569.htm)\n\n- What would your previous boss say your biggest strength was?\n","filetype":".md","index":2},{"title":"Behavioral Round Overview","category":"_contents","id":"behavioral-round-overview__contents","algorithm":"---\nid: behavioral-round-overview\ntitle: Overview\n---\n\nSucceeding in an engineering career involves more than just technical skills. Behavioral interviews (aka people skills) become more important as an engineer becomes more senior. Senior engineers should have the ability to lead and influence, resolve conflicts, anticipate risks, plan the roadmap, and more.\n\nHiring a talented engineer that cannot work with others can ultimately be a net deficit for companies. Companies don‚Äôt want to hire [brilliant jerks](http://www.brendangregg.com/blog/2017-11-13/brilliant-jerks.html). The company is better off not hiring a very talented engineer who refuses to work with others or causes an entire team to be unproductive. Companies want to hire the right person that will work well with the existing employees and help the team and company achieve greater heights, and behavioral interviews are one way of determining if someone will be good to work with from a non-technical standpoint.\n\n## Most companies evaluate behavioral skills\n\nCompanies value behavioral skills and do evaluate candidates on them. At the time of writing, Facebook has one round (out of four) dedicated to behavioral interviews. Airbnb has TWO rounds (out of six) dedicated to behavioral interviews/company fit. Lyft has one round (out of five) dedicated to past experience and situational questions by a hiring manager.\n\n## What Facebook looks for in behavioral interviews\n\n- Discuss anything that's on your resume, including current projects and details\n- Provide specific examples about what you did and the resulting impact\n- Critique yourself and share what you learned from a past situation\n- Talk about what you like about your current role and/or being a developer\n- Discuss why you'd like to make a change\n\n_Source: [Preparing for your Onsite Interview at Facebook](https://www.facebook.com/careers/swe-prep-onsite)_\n","filetype":".md","index":3},{"title":"Best Practice Questions","category":"_contents","id":"best-practice-questions__contents","algorithm":"---\nid: best-practice-questions\ntitle: Best Practice Questions\n---\n\nHere is a suggested schedule for revising and practicing algorithm questions on [LeetCode](https://leetcode.com). Sign up for an account if you don't already have one, it's critical to your success in interviewing!\n\nWhen practicing, you are advised to treat it like a real coding interview and check through thoroughly before submitting. Consider even manually coming up with some test cases and running through them to verify correctness!\n\n## Week 1 - Sequences\n\nIn week 1, we will start off easy and do a mix of easy and medium questions on arrays and strings. Arrays and strings are the most common types of questions to be found in interviews; gaining familiarity with them will help in building strong fundamentals to better handle tougher questions.\n\n- [Two Sum](https://leetcode.com/problems/two-sum/)\n- [Contains Duplicate](https://leetcode.com/problems/contains-duplicate/)\n- [Best Time to Buy and Sell Stock](https://leetcode.com/problems/best-time-to-buy-and-sell-stock/)\n- [Valid Anagram](https://leetcode.com/problems/valid-anagram/)\n- [Valid Parentheses](https://leetcode.com/problems/valid-parentheses/)\n- [Product of Array Except Self](https://leetcode.com/problems/product-of-array-except-self/)\n- [Maximum Subarray](https://leetcode.com/problems/maximum-subarray/)\n- [3Sum](https://leetcode.com/problems/3sum/)\n- [Merge Intervals](https://leetcode.com/problems/merge-intervals/)\n- [Group Anagrams](https://leetcode.com/problems/group-anagrams/)\n\n#### Optional\n\n- [Maximum Product Subarray](https://leetcode.com/problems/maximum-product-subarray/)\n- [Search in Rotated Sorted Array](https://leetcode.com/problems/search-in-rotated-sorted-array/)\n\n## Week 2 - Data Structures\n\nThe focus of week 2 is on linked lists, strings and matrix-based questions. The goal is to learn the common routines dealing with linked lists, traversing matrices and sequence analysis (arrays/strings) techniques such as sliding window.\n\n- [Reverse a Linked List](https://leetcode.com/problems/reverse-linked-list/)\n- [Detect Cycle in a Linked List](https://leetcode.com/problems/linked-list-cycle/)\n- [Container With Most Water](https://leetcode.com/problems/container-with-most-water/)\n- [Find Minimum in Rotated Sorted Array](https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/)\n- [Longest Repeating Character Replacement](https://leetcode.com/problems/longest-repeating-character-replacement/)\n- [Longest Substring Without Repeating Characters](https://leetcode.com/problems/longest-substring-without-repeating-characters/)\n- [Minimum Window Substring](https://leetcode.com/problems/minimum-window-substring/)\n- [Number of Islands](https://leetcode.com/problems/number-of-islands/)\n- [Remove Nth Node From End Of List](https://leetcode.com/problems/remove-nth-node-from-end-of-list/)\n- [Palindromic Substrings](https://leetcode.com/problems/palindromic-substrings/)\n- [Pacific Atlantic Water Flow](https://leetcode.com/problems/pacific-atlantic-water-flow/)\n\n## Week 3 - Non-Linear Data Structures\n\nThe focus of week 3 is on non-linear data structures like trees, graphs and heaps. You should be familiar with the various tree traversal (in-order, pre-order, post-order) algorithms and graph traversal algorithms such as breadth-first search and depth-first search. In my experience, using more advanced graph algorithms (Dijkstra's and Floyd-Warshall) is quite rare and usually not necessary.\n\n- [Validate Binary Search Tree](https://leetcode.com/problems/validate-binary-search-tree/)\n- [Invert/Flip Binary Tree](https://leetcode.com/problems/invert-binary-tree/)\n- [Non-overlapping Intervals](https://leetcode.com/problems/non-overlapping-intervals/)\n- [Serialize and Deserialize Binary Tree](https://leetcode.com/problems/serialize-and-deserialize-binary-tree/)\n- [Construct Binary Tree from Preorder and Inorder Traversal](https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/)\n- [Top K Frequent Elements](https://leetcode.com/problems/top-k-frequent-elements/)\n- [Clone Graph](https://leetcode.com/problems/clone-graph/)\n- [Course Schedule](https://leetcode.com/problems/course-schedule/)\n- [Binary Tree Maximum Path Sum](https://leetcode.com/problems/binary-tree-maximum-path-sum/)\n\n#### Optional\n\n- [Maximum Depth of Binary Tree](https://leetcode.com/problems/maximum-depth-of-binary-tree/)\n- [Same Tree](https://leetcode.com/problems/same-tree/)\n- [Binary Tree Level Order Traversal](https://leetcode.com/problems/binary-tree-level-order-traversal/)\n- [Encode and Decode Strings (LeetCode Premium)](https://leetcode.com/problems/encode-and-decode-strings/)\n\n## Week 4 - More Data Structures\n\nWeek 4 builds up on knowledge from previous weeks but questions are of increased difficulty. Expect to see such level of questions during interviews. You get more practice on more advanced data structures such as (but not exclusively limited to) heaps and tries.\n\n- [Add and Search Word](https://leetcode.com/problems/add-and-search-word-data-structure-design/)\n- [Implement Trie (Prefix Tree)](https://leetcode.com/problems/implement-trie-prefix-tree/)\n- [Subtree of Another Tree](https://leetcode.com/problems/subtree-of-another-tree/)\n- [Kth Smallest Element in a BST](https://leetcode.com/problems/kth-smallest-element-in-a-bst/)\n- [Lowest Common Ancestor of BST](https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/)\n- [Merge K Sorted Lists](https://leetcode.com/problems/merge-k-sorted-lists/)\n- [Find Median from Data Stream](https://leetcode.com/problems/find-median-from-data-stream/)\n- [Insert Interval](https://leetcode.com/problems/insert-interval/)\n- [Longest Consecutive Sequence](https://leetcode.com/problems/longest-consecutive-sequence/)\n- [Word Search II](https://leetcode.com/problems/word-search-ii/)\n\n#### Optional\n\n- [Meeting Rooms (LeetCode Premium)](https://leetcode.com/problems/meeting-rooms/)\n- [Meeting Rooms II (LeetCode Premium)](https://leetcode.com/problems/meeting-rooms-ii/)\n- [Alien Dictionary (LeetCode Premium)](https://leetcode.com/problems/alien-dictionary/)\n- [Graph Valid Tree (LeetCode Premium)](https://leetcode.com/problems/graph-valid-tree/)\n- [Number of Connected Components in an Undirected Graph (LeetCode Premium)](https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph/)\n\n## Week 5 - Dynamic Programming\n\nWeek 5 focuses on Dynamic Programming (DP) questions. Personally as an interviewer, I'm not a fan of DP questions as they are not really applicable to practical scenarios and frankly if I were made to do the tough DP questions during my interviews I'd not have gotten the job. However, companies like Google still ask DP questions and if joining Google is your dream, DP is unavoidable.\n\nDP questions can be hard to master and the best way to get better at them is... you guessed it - practice! Be familiar with the concepts of memoization and backtracking.\n\nPractically speaking the return of investment (ROI) on studying and practicing for DP questions is very low. Hence DP questions are less important/optional and you should only do them if you're very keen to have all bases covered.\n\n- [Climbing Stairs](https://leetcode.com/problems/climbing-stairs/)\n- [Coin Change](https://leetcode.com/problems/coin-change/)\n- [Longest Increasing Subsequence](https://leetcode.com/problems/longest-increasing-subsequence/)\n- [Combination Sum](https://leetcode.com/problems/combination-sum-iv/)\n- [House Robber](https://leetcode.com/problems/house-robber/)\n- [House Robber II](https://leetcode.com/problems/house-robber-ii/)\n- [Decode Ways](https://leetcode.com/problems/decode-ways/)\n- [Unique Paths](https://leetcode.com/problems/unique-paths/)\n- [Jump Game](https://leetcode.com/problems/jump-game/)\n- [Word Break Problem](https://leetcode.com/problems/word-break/)\n","filetype":".md","index":4},{"title":"Cheatsheet","category":"_contents","id":"cheatsheet__contents","algorithm":"---\nid: cheatsheet\ntitle: Cheatsheet\n---\n\nThis is a straight-to-the-point, distilled list of technical interview Do's and Don'ts, mainly for algorithmic interviews. Some of these may apply to only phone screens or whiteboard interviews, but most will apply to both. I revise this list before each of my interviews to remind myself of them and eventually internalized all of them to the point I do not have to rely on it anymore.\n\n#### Legend\n\n- ‚úÖ = Do\n- ‚ùå = Don't\n- ‚ö†Ô∏è = Situational\n\n### Before interview\n\n|  | Things |\n| --- | --- |\n| ‚úÖ | Prepare pen, paper and earphones/headphones. |\n| ‚úÖ | Find a quiet environment with good Internet connection. |\n| ‚úÖ | Ensure webcam and audio are working. There were times I had to restart Chrome to get Hangouts to work again. |\n| ‚úÖ | Request for the option to interview over Hangouts/Skype instead of a phone call; it is easier to send links or text across. |\n| ‚úÖ | Decide on and be familiar with a programming language. |\n| ‚úÖ | Familiarize yourself with the coding environment (CoderPad/CodePen). Set up the coding shortcuts, turn on autocompletion, tab spacing, etc. |\n| ‚úÖ | Prepare answers to the [frequently-asked behavioral questions](behavioral-questions.md) in an interview. |\n| ‚úÖ | Prepare some [questions to ask](questions-to-ask.md) at the end of the interview. |\n| ‚úÖ | Dress comfortably. Usually you do not need to wear smart clothes, casual should be fine. T-shirts and jeans are acceptable at most places. |\n| ‚úÖ | Stay calm and composed. |\n| ‚ö†Ô∏è | Turn off the webcam if possible. Most remote interviews will not require video chat and leaving it on only serves as a distraction. |\n\n### Introduction\n\n|  | Things |\n| --- | --- |\n| ‚úÖ | Introduce yourself in a few sentences under a minute or two. |\n| ‚úÖ | Mention interesting points that are relevant to the role you are applying for. |\n| ‚úÖ | Sound enthusiastic! Speak with a smile and you will naturally sound more engaging. |\n| ‚ùå | Spend too long introducing yourself. The more time you spend talking the less time you have to code. |\n\n### Upon receiving the question\n\n|  | Things |\n| --- | --- |\n| ‚úÖ | Repeat the question back at the interviewer. |\n| ‚úÖ | Clarify any assumptions you made subconsciously. Many questions are under-specified on purpose. E.g. a tree-like diagram could very well be a graph that allows for cycles and a naive recursive solution would not work. |\n| ‚úÖ | Clarify input format and range. Ask whether input can be assumed to be well-formed and non-null. |\n| ‚úÖ | Work through a small example to ensure you understood the question. |\n| ‚úÖ | Explain a high level approach even if it is a brute force one. |\n| ‚úÖ | Improve upon the approach and optimize. Reduce duplicated work and cache repeated computations. |\n| ‚úÖ | Think carefully, then state and explain the time and space complexity of your approaches. |\n| ‚úÖ | If stuck, think about related problems you have seen before and how they were solved. Check out the [tips](algorithms/introduction.md) in this section. |\n| ‚ùå | Ignore information given to you. Every piece is important. |\n| ‚ùå | Jump into coding straightaway. |\n| ‚ùå | Start coding without interviewer's green light. |\n| ‚ùå | Appear too unsure about your approach or analysis. |\n\n### During coding\n\n|  | Things |\n| --- | --- |\n| ‚úÖ | Explain what you are coding/typing to the interviewer, what you are trying to achieve. |\n| ‚úÖ | Practice good coding style. Clear variable names, consistent operator spacing, proper indentation, etc. |\n| ‚úÖ | Type/write at a reasonable speed. |\n| ‚úÖ | As much as possible, write actual compilable code, not pseudocode. |\n| ‚úÖ | Write in a modular fashion. Extract out chunks of repeated code into functions. |\n| ‚úÖ | Ask for permission to use trivial functions without having to implement them; saves you some time. |\n| ‚úÖ | Use the hints given by the interviewer. |\n| ‚úÖ | Demonstrate mastery of your chosen programming language. |\n| ‚úÖ | Demonstrate technical knowledge in data structures and algorithms. |\n| ‚úÖ | If you are cutting corners in your code, state that out loud to your interviewer and say what you would do in a non-interview setting (no time constraints). E.g., \"Under non-interview settings, I would write a regex to parse this string rather than using `split()` which may not cover all cases.\" |\n| ‚úÖ | Practice whiteboard space-management skills. |\n| ‚ö†Ô∏è | Reasonable defensive coding. Check for nulls, empty collections, etc. Can omit if input validity has been clarified with the interviewer. |\n| ‚ùå | Remain quiet the whole time. |\n| ‚ùå | Spend too much time writing comments. |\n| ‚ùå | Use extremely verbose or single-character (unless they're common like `i`, `n`) variable names. |\n| ‚ùå | Copy and paste code without checking (e.g. variables need to be renamed). |\n| ‚ùå | Interrupt your interviewer when they are talking. Usually if they speak, they are trying to give you hints or steer you in the right direction. |\n| ‚ùå | Write too big (takes up too much space) or too small (illegible) if on a whiteboard. |\n\n### After coding\n\n|  | Things |\n| --- | --- |\n| ‚úÖ | Scan through your code for mistakes as if it was your first time seeing code written by someone else. |\n| ‚úÖ | Check for off-by-one errors. |\n| ‚úÖ | Come up with more test cases. Try extreme test cases. |\n| ‚úÖ | Step through your code with those test cases. |\n| ‚úÖ | Look out for places where you can refactor. |\n| ‚úÖ | Reiterate the time and space complexity of your code. |\n| ‚úÖ | Explain trade-offs and how the code/approach can be improved if given more time. |\n| ‚ùå | Immediately announce that you are done coding. Do the above first! |\n| ‚ùå | Argue with the interviewer. They may be wrong but that is very unlikely given that they are familiar with the question. |\n\n### Wrap up\n\n|  | Things |\n| --- | --- |\n| ‚úÖ | Ask questions. More importantly, ask good and engaging questions that are tailored to the company! Pick some questions from [this list](questions-to-ask.md). |\n| ‚úÖ | Thank the interviewer. |\n| ‚ö†Ô∏è | Ask about your interview performance. It can get awkward. |\n| ‚ùå | End the interview without asking any questions. |\n\n### Post interview\n\n|  | Things |\n| --- | --- |\n| ‚úÖ | Record the interview questions and answers down as these can be useful for future reference. |\n| ‚ö†Ô∏è | Send a follow up email to your interviewer(s) thanking them for their time and the opportunity to interview with them. |\n","filetype":".md","index":5},{"title":"Coding Round Overview","category":"_contents","id":"coding-round-overview__contents","algorithm":"---\nid: coding-round-overview\ntitle: Overview\n---\n\nCoding interviews are tough. But fortunately, there's a tried and proven method to get better at them. With a combination of studying, practicing questions and doing mock interviews, getting that dream job can become a reality.\n\n1. Decide on a programming language\n1. Study CS fundamentals\n1. Practice solving algorithm questions\n1. Internalize the [Do's and Don'ts of interviews](./cheatsheet.md)\n1. Know what [signals and behaviors](./coding-signals.md) interviewers are looking out for\n1. Practice doing mock interviews\n1. Interview successfully to get the job\n","filetype":".md","index":6},{"title":"Coding Signals","category":"_contents","id":"coding-signals__contents","algorithm":"---\nid: coding-signals\ntitle: Coding Signals\n---\n\nThe point of interviews is for interviewers to extract signals from certain candidate behaviors. In coding interviews, the signals can be broadly classified into the following categories: Problem Solving, Technical Competency, Testing, and Communication.\n\nWhen interviewers take down interview feedback, these are likely what is on their feedback sheet.\n\n## Problem solving\n\n#### Understanding the problem\n\n- üëç Understood the key aspects of the problem quickly\n- üëé Had difficulty in understanding the key aspects of the problem\n\n#### Solution/approach\n\n- üëç Approached the problem in a systematic and logical manner\n- üëé Did not demonstrate a logical thought process for approaching the problem\n\n#### Improving the solution\n\n- üëç Suggested a more efficient solution when prompted, or proactively coming up with a better solution\n- üëé Had difficulty in coming up with a more efficient solution even after being prompted\n\n#### Trade-offs analysis\n\n- üëç Explained the trade-offs of different approaches clearly and correctly\n- üëé Failed to describe trade-offs of different approaches\n\n#### Hinting\n\n- üëç Did not require any major hints\n- üëé Needed plenty of hints\n\n## Technical competency\n\n#### Speed\n\n- üëç Quickly implemented a working solution\n- üëé Was not able to complete the solution\n\n#### Correctness/Accuracy\n\n- üëç Implemented the solution correctly (e.g., working solution, minimal bugs)\n- üëé Unable to correctly implement a solution (e.g., non-working solution, incorrect logic, and/or serious bugs)\n\n#### Complexity analysis\n\n- üëç Able to determine the algorithmic time and space complexity\n- üëé Was not able to determine the algorithmic time and space complexity (explain why TC came up with such an answer)\n\n#### Mastery of chosen programming language\n\n- üëç Demonstrated mastery of the chosen programming language\n- üëé Does not seem to be familiar with the chosen programming language\n\n#### Implementation\n\n- üëç Implementation was clean and straightforward\n- üëé Implementation was unnecessarily complex and/or messy\n\n#### Coding style\n\n- üëç Coding style was neat (proper indentation, spacing and no bad practices)\n- üëé Coding style was messy (inconsistent indentation, weird spacings, etc)\n\n## Testing\n\n#### Common cases\n\n- üëç Tested their code against various typical cases\n- üëé Failed to test the code against typical cases\n\n#### Corner cases\n\n- üëç Found and handled corner/edge cases\n- üëé Failed to consider corner/edge cases\n\n#### Self-correction\n\n- üëç Identified and corrected bugs in the code (where applicable)\n- üëé Was not able to discover and fix bugs even after being prompted\n\n## Communication\n\n#### Clarify problem\n\n- üëç Appropriately asked good, clarifying questions about the problem\n- üëé Failed to confirm understanding/ask appropriate questions\n\n#### Communicating approach\n\n- üëç Able to explain overall approach, technical terms and acronyms (where applicable)\n- üëé Failed to effectively explain overall approach, technical terms and acronyms (where applicable)\n","filetype":".md","index":7},{"title":"Cover Letter","category":"_contents","id":"cover-letter__contents","algorithm":"---\nid: cover-letter\ntitle: Cover Letter\n---\n\n- A short introduction describing who you are and what you're looking for\n- What projects have you enjoyed working on?\n- Which have you disliked? What motivates you?\n- Links to online profiles you use (GitHub, Twitter, etc)\n- A description of your work history (whether as a resume, LinkedIn profile, or prose)\n","filetype":".md","index":8},{"title":"During Coding Interview","category":"_contents","id":"during-coding-interview__contents","algorithm":"---\nid: during-coding-interview\ntitle: During the Coding Interview\n---\n\nCongratulations, you are ready to put your skills into practice! In a real coding interview, you will be given a technical question by the interviewer, write code in a real-time collaborative editor (phone screen) or on a whiteboard (on-site) to solve the problem within 30‚Äì45 minutes. This is where the real fun begins!\n\nYour interviewer will be looking out for signals that you fit the requirements of the role and it is up to you to display those signals to them. Initially it may feel weird to be talking while you are coding as most programmers do not have the habit of explaining out loud as they are typing code. However, it is hard for the interviewer to know what you are thinking just by looking at the code that you type. If you communicate your approach to the interviewer before you start coding, you can validate your approach with them and the both of you can agree upon an acceptable approach.\n\n## Before the interview (remote)\n\nFor phone screens/remote interviews, prepare paper and pen/pencil to jot down and visualize stuff. If you are given a question on trees and graphs, it usually helps if you draw out some examples of the data structure given in the question.\n\nUse earphones and make sure you are in a quiet environment. You definitely do not want to be holding a phone in one hand and only be able to type with the other. Try avoiding using speakers because if the echo is bad, communication is harder and repeating of words will just result in loss of valuable time.\n\n## Self introduction\n\nPrepare a self introduction by following the [self introduction section](./self-introduction.md).\n\n## Upon receiving the question\n\nMany candidates jump into coding the moment they hear the question. That is usually a big mistake. Take a moment to repeat the question back at the interviewer and make sure that you understand exactly what they are asking. Repeating back/rephrasing the question will reduce chances of miscommunication.\n\nAlways seek clarification about the question upon hearing it even if it you think it is clear to you. You might discover something that you have missed out and it also sends a signal to the interviewer that you are a careful person who pays attention to details. Some interviewers deliberately omit important details to see if you ask the right questions.\n\nSome common questions you can ask:\n\n- How big is the size of the input?\n- How big is the range of values?\n- What kind of values are there? Are there negative numbers? Floating points? Will there be empty inputs?\n- Are there duplicates within the input?\n- What are some extreme cases of the input?\n- Can I destroy the original array/graph/data structure?\n- How is the input stored? If you are given a dictionary of words, is it a list of strings or a Trie?\n\nAfter you have sufficiently clarified the scope and intention of the problem, explain your high level approach to the interviewer even if it is a naive solution. If you are stuck, consider various approaches and explain out loud why it will/will not work. Sometimes your interviewer might drop hints and lead you towards the right path.\n\nStart with a brute force approach, communicate it to the interviewer, explain the time and space complexity and why it is bad. It is unlikely that the brute force approach will be one that you will be coding. At this point, the interviewer will usually pop the dreaded \"Can we do better?\" question, meaning that they are looking for a more optimal approach. In my opinion, this is usually the hardest part of the interview. In general, look for repeated work and try to optimize them by potentially caching the calculated result somewhere and reference it later, rather than having to compute it all over again. There are some tips on tackling topic-specific questions that I dive into details below.\n\nOnly start coding after you and your interviewer have agreed on an approach and they have given you the green light.\n\n## What to do when stuck\n\nGetting stuck during coding interviews is extremely common. But do not worry, that is part of the process and is a test of your problem solving abilities. Here are some tips to try out when you are stuck:\n\n- Talk through what you initially thought might work and explain why it doesn't\n  - This can help guide you on the right track by avoiding the pitfalls\n- Come up with more test cases and write them down\n  - A pattern may emerge\n- Think about how you would solve it without a program\n  - You may spot a pattern and come up with a general algorithm for it\n- Recall past questions related to the topic, what similar questions in the past have you encountered and what techniques did you use?\n- Enumerate through the common data structures and whether they can be applied to the question\n  - Dictionaries/maps are extremely common in making algorithms more efficient\n- Look out for repeated work and determine if you can cache those computations\n  - Trade off memory for speed\n\n## While coding\n\nWrite your code with good coding style. Reading code written by others is usually not an enjoyable task. Reading horribly-formatted code by others makes it worse. Your goal is to make your interviewer understand the code you have written so that they can quickly evaluate if your code does what you say it does and whether it solves the given problem. Use clear variable names, avoid single letter names unless they are for iteration. However, if you are coding on a whiteboard, you might not want to use extremely verbose variable names for the sake of reducing the amount you have to write. Abbreviations are usually fine if you explain what it means beforehand.\n\nAlways be explaining what you are currently writing/typing to the interviewer. This is not about literally reading out what you are typing to the interviewer. Talk about the section of the code you are currently implementing at a higher level, explain why it is written as such and what it is trying to achieve.\n\nWhile coding, if you find yourself copying and pasting code, consider whether it is necessary. If you find yourself copying and pasting one large chunk of code spanning multiple lines, it is usually an indicator that you can refactor by extracting those lines into a function and defining parameters for the differences in them. If it is just a single line you copied, usually it is fine. Do remember to change the respective variables in your copied line of code where relevant. Copy-paste errors are a common source of bugs even in day-to-day coding!\n\n## After coding\n\nAfter you have finished coding, do not immediately announce to the interviewer that you are done. In most cases, your code is usually not perfect and contains some bugs or syntax errors. What you need to do now is to review your code.\n\nFirstly, look through your code from start to finish as if it is the first time you are seeing it, as if it was written by someone else and you are trying to spot bugs in it. That's exactly what your interviewer will be doing. Look through and fix any minor issues you may find.\n\nNext, come up with small test cases and step through the code (not your algorithm!) with those sample input. What interviewers usually do after you have finished coding would be to get you to write tests. It is a huge plus if you write tests for your code even before they prompt you to do so. You should be emulating a debugger when stepping through and jot down or say out the values of the important variables as you step through the lines of code.\n\nIf there are huge duplicated chunks of code in your solution, it would be a good chance to refactor it and demonstrate to the interviewer that you are one who values code quality. Also look out for places where you can do [short-circuit evaluation](https://en.wikipedia.org/wiki/Short-circuit_evaluation).\n\nLastly, give the time/space complexity of your code and explain why it is such. You can even annotate certain chunks of your code with the various time/space complexities to demonstrate your understanding of your code and the APIs of your chosen programming language. Explain any trade-offs in your current approach vs alternative approaches, possibly in terms of time/space.\n\nIf your interviewer is happy with the solution, the interview usually ends here. It is also not uncommon that the interviewer asks you extension questions, such as how you would handle the problem if the whole input is too large to fit into memory, or if the input arrives as a stream. This is a common follow-up question at Google where they care a lot about scale. The answer is usually a divide-and-conquer approach‚Ää‚Äî‚Ääperform distributed processing of the data and only read certain chunks of the input from disk into memory, write the output back to disk, and combine them later on.\n","filetype":".md","index":9},{"title":"How To Apply","category":"_contents","id":"how-to-apply__contents","algorithm":"---\nid: how-to-apply\ntitle: How to Apply\n---\n\n## Apply Directly\n\nTODO\n\n## Referrals\n\nTODO\n\n## Agencies/Portals\n\nTODO\n","filetype":".md","index":10},{"title":"Interview Formats","category":"_contents","id":"interview-formats__contents","algorithm":"---\nid: interview-formats\ntitle: Interview Formats\n---\n\nInterviews are a multi-stage process and each stage can consist of vastly different formats.\n\n## Various formats\n\n### Pop quiz\n\nPop quizzes are meant to be a quick and dirty way of weeding out extremely weak (or even non-technical) candidates. They are structured questions and have clear-cut answers which makes them possible to be administered by recruiters/non-technical folks. It is not a very common interview format these days.\n\nExamples:\n\n- What is 4 & 5 (in binary)? Answer: 4\n- What is the time complexity of bubble sort? Answer: O(n^2)\n\n### Take home assignment\n\nThere has been numerous debates on whether asking algorithm questions are a good way of assessing individual abilities as they aren't exactly the most relevant skills needed for a job. Take home assignment is a format designed to address the shortcomings of the algorithm interview by getting candidates to work on larger projects which allow them to demonstrate software design skills.\n\nHowever, this interview format takes up more time from both the candidates and the company and hence it is not as commonly seen in large companies where they have a high volume of candidates. This format is more common among startups and small companies.\n\nExamples\n\n- Build a flights listing app\n- Build a snake game\n\n### Phone interview\n\nPhone interviews are the most common format and every candidate will face this at least once while interviewing. You will be asked to speak with an interviewer either over a phone call or VoIP (Skype/Hangout). A question will be given to you and you will work on that question using an online collaborative editor (CoderPad/CodePen/Google Docs).\n\nYou are usually not allowed to execute the code even if the editor supports execution. So don't rely on that for verifying the correctness of your solution. Formats would differ slightly depending on the roles you are applying to. Many companies like to use [CoderPad](https://coderpad.io/) for collaborative code editing. CoderPad supports running of the program, so it is possible that you will be asked to fix your code such that it can be run. For front end interviews, many companies like to use [CodePen](https://codepen.io/), and it will be worth your time to familiarize yourself with the user interfaces of such web-based coding environments.\n\n### Onsite\n\nIf you have made it to this stage, congratulations! This is usually the final stage before an offer decision. Candidates who made it to the onsite stage will be required to have an in-person interview at the office. If you are an overseas candidate, companies might even fly you in and pay for your accommodations!\n\nThe onsite stage usually consists of multiple rounds (coding, system design, behavioral) and is expected to last for a few hours. Since you are onsite, it is possible that you will be asked to do a whiteboard exercise with an interviewer, usually either solving an algorithm question or doing a system design question. It is also possible that you have to bring your own laptops and work on a project/solve a coding problem on the spot.\n\nFor onsite interviews at smaller (non-public) companies, most will allow (and prefer) that you use your own laptop. Hence it is important that you prepare your development environment in advance.\n\nIf the company provides lunch, you might also have a lunch session with an employee where you can find out more about the company culture.\n\n## Formats of famous companies\n\n### Airbnb\n\n- Recruiter phone screen\n- Technical phone interview:\n  - 1 or 2 x Algorithm/front end on CoderPad/CodePen\n- On-site (General):\n  - 2 x Algorithm coding on CoderPad\n  - 1 x System design/architecture\n  - 1 x Past experience/project\n  - 2 x Cross functional\n- On-site (Front End):\n  - 2 x Front end coding on CodePen. Use any framework/library\n  - 1 x General coding on your own laptop\n  - 1 x Past experience/project\n  - 2 x Cross functional\n- Tips:\n  - All sessions involve coding on your own laptop. Prepare your development environment in advance\n  - You are allowed to look up APIs if you need to\n  - They seem to place high emphasis on compilable, runnable code in all their coding rounds\n  - Cross functional interviews will involve getting Airbnb employees from any discipline to speak with you. These interviews are mostly non-technical but are extremely important to Airbnb because they place a high emphasis on cultural fit. Do look up the Airbnb section of the behavioral questions to know what sort of questions to expect\n\n### Asana\n\n- Recruiter phone screen\n- Technical phone interview\n- On-site (Product Engineer):\n  - 3 x Algorithm and system design on whiteboard within the same session\n  - 1 x Algorithm on laptop and system design. This session involves writing code on your own laptop to solve 3 well-defined algorithm problems in around 45 minutes after which an engineer will come in and review the code with you. You are not supposed to run the code while working on the problem\n- Tips:\n  - No front end questions were asked\n  - Asana places high emphasis on System Design and makes heavy use of the whiteboard. You do not necessarily have to write code for the algorithm question of the first three interviews\n  - All 4 sessions involve algorithms and system design. One of the sessions will be conducted by an Engineering Manager\n  - The last session will involve coding on your own laptop. Prepare your development environment in advance\n  - Regardless of Product Engineer or Engineering Generalist position, their interview format and questions are similar\n\n### Dropbox\n\n- Recruiter phone screen\n- Technical phone interviews:\n  - 2 x Algorithm/front end on CoderPad/CodePen\n- On-site (Front End):\n  - 2 x Front end on CodePen. Only Vanilla JS or jQuery allowed\n  - 1 x General coding on CoderPad\n  - 1 x All around. Meet with an Engineering Manager and discussing past experiences and working style\n- Tips:\n  - You can code on your own laptop and look up APIs\n  - Dropbox recruiters are very nice and will give you helpful information on what kind of questions to expect for the upcoming sessions\n  - One of the front end sessions involve coding up a pixel-perfect version of a real page on www.dropbox.com. You'll be given a spec of the desired page and you'll be asked to create a working version during the interview\n\n### Facebook\n\n- Recruiter phone screen\n- Technical phone interviews:\n  - 1 or 2 x Algorithm/front end on Skype/CoderPad\n- On-site (Front End):\n  - 2 x Technical coding interview on whiteboard (Ninja)\n  - 1 x Behavioural (Jedi). Meet with an Engineering Manager and discussing past experiences and working style\n  - 1 x Design/architecture on whiteboard (Pirate)\n- Tips:\n  - You are only allowed to use the whiteboard (or wall). No laptops involved\n  - For the Jedi round, you may be asked a technical question at the end of it. Front end candidates will be given a small HTML/CSS problem nearing the end of the session\n  - For the Ninja rounds, you may be asked one to two questions depending on how fast you progress through the question\n\n### Google\n\n- Recruiter phone screen\n- Technical phone interview:\n  - 1 or 2 x algorithm on Google Doc\n- On-site:\n  - 1 or 2 x Front end on whiteboard. May be required to use Vanilla JS (or at the most, jQuery) depending on the question. (Front End only)\n  - 2 to 4 x Algorithm on whiteboard\n  - 1 x General Cognitive Ability, Leadership and \"Googleyness\".\n- Team matching\n  - Speak with managers from different teams who are interested in your profile\n- Tips:\n  - In rare cases, candidates may even be allowed to skip the phone interview round and advanced to on-site directly\n  - For non-fresh grads, you only receive an offer if you are successfully matched with a team\n\n### Lyft\n\n- Recruiter phone screen\n- Technical phone interview:\n  - 1 x Algorithm/Front end over JSFiddle\n- On-site (Front End):\n  - 4 x Front end on Coderpad/your own laptop. Use any language/framework\n  - 1 x Behavioral. Meet with an Engineering Manager and go through candidate's resume\n- Tips:\n  - Can use whiteboard and/or laptop\n  - For front end coding, I opted to use React and had to set up the projects on the spot using `create-react-app`\n\n### Palantir\n\n- Recruiter phone screen\n- Technical phone interview:\n  - 1 x Algorithm over HackerRank CodePair and Skype\n- On-site (General):\n  - 2 x Algorithm on whiteboard\n  - 1 x Decomposition (system design) on whiteboard\n- On-site (Front End):\n  - 1 x Front end on your own laptop. This session lasts about 1.5 hours. Use any library/framework\n  - 1 x Decomposition (system design) on whiteboard\n- Tips:\n  - I opted to use React and had to set up projects on the spot using `create-react-app`\n  - You may be asked to meet with Engineering Managers after the technical sessions and it's not necessarily a good/bad thing\n\n### WhatsApp\n\n- Recruiter phone screen\n- Technical phone interview:\n  - 2 x Algorithm over CoderPad\n- On-site (Web Client Developer):\n  - 4 x Algorithm on whiteboard\n- Tips:\n  - No front end questions were asked\n  - 1 of the interviewers is an Engineering Manager\n  \n","filetype":".md","index":11},{"title":"Interviewer Cheatsheet","category":"_contents","id":"interviewer-cheatsheet__contents","algorithm":"---\nid: interviewer-cheatsheet\ntitle: Cheatsheet (Interviewer)\n---\n\nThis is a straight-to-the-point, distilled list of technical interview Do's and Don'ts **for interviewers**, mainly for algorithmic interviews. Some of these may apply to only phone screens or whiteboard interviews, but most will apply to both. I revise this list before each of my interviews as an interviewer to remind myself of them and eventually internalized all of them to the point I do not have to rely on it anymore.\n\n**If you are a candidate you probably do not need to know this section well. You may read this to get a better sense of what an interviewer is supposed to do during an interview.**\n\n#### Legend\n\n- ‚úÖ = Do\n- ‚ùå = Don't\n- ‚ö†Ô∏è = Situational\n\n### Before interview\n\n|  | Things |\n| --- | --- |\n| ‚úÖ | Make sure your surroundings are well-lit. |\n| ‚úÖ | Find a quiet environment with good Internet connection. |\n| ‚úÖ | Ensure webcam and audio are working. Test that your VC app is working well. |\n| ‚úÖ | Prepare two to three questions and be familiar with the different approaches for solving the questions. |\n| ‚úÖ | Familiarize yourself with the coding environment (CoderPad/CodePen). Set up the coding shortcuts, turn on autocompletion, tab spacing, etc. |\n\n### Introduction\n\n|  | Things |\n| --- | --- |\n| ‚úÖ | Check if candidate wants to use the restroom or take a break. |\n| ‚úÖ | Give an overview of the interview format (introduction, duration, programming languages available, 5 min at the end for Q&A). |\n| ‚úÖ | Do a self-introduction and get the candidate to introduce themselves. |\n| ‚úÖ | Explain to candidate that they do not have to finish all questions and you might interrupt them abruptly. |\n| ‚ùå | Allow the candidate to spend too long introducing themselves. |\n\n### Upon delivering the question\n\n|  | Things |\n| --- | --- |\n| ‚úÖ | Ask if the candidate has seen the question before. |\n| ‚úÖ | Give a small example for the question and the desired output. |\n| ‚úÖ | Get the candidate to talk through the solution first before diving into coding. |\n| ‚úÖ | Provide hints where appropriate. |\n| ‚úÖ | If candidate is still stuck after providing hints, provide the solution and move to coding so that you can get coding signals. |\n\n### During coding\n\n|  | Things |\n| --- | --- |\n| ‚úÖ | If whiteboard interview, stand alongside candidate but also giving them space, instead of being distant, e.g seated down. |\n| ‚úÖ | Take note of all the positive and negative signals. |\n| ‚ùå | Check the time in an overly-obvious manner. |\n\n### After coding\n\n|  | Things |\n| --- | --- |\n| ‚úÖ | Ask for candidate to provide test cases and run through the code with them. |\n| ‚úÖ | Point out edge cases candidate missed and ask the candidate to address them. |\n| ‚úÖ | Take note of the duration TC spent on each question to include in the feedback. |\n| ‚úÖ | Ask for time complexity and space analysis. |\n| ‚úÖ | Preserve the code somewhere - take a picture or copy the code out. |\n| ‚úÖ | Stop the candidate when there is 5 minutes left. e.g. (\"I'll stop you here and let's go to the next section\") |\n\n### Wrap up\n\n|  | Things |\n| --- | --- |\n| ‚úÖ | Allow candidate to ask questions and answer them to the best of your ability. |\n| ‚úÖ | Thank the candidate and wish them all the best. |\n\n### Post interview\n\n|     | Things                                                    |\n| --- | --------------------------------------------------------- |\n| ‚úÖ  | Write feedback as soon as possible to not forget details. |\n","filetype":".md","index":12},{"title":"Introduction","category":"_contents","id":"introduction__contents","algorithm":"---\nid: introduction\ntitle: Introduction\n---\n\n## What is this?\n\nThe **Tech Interview Handbook** contains carefully curated content to help you ace your next technical interview with a focus on algorithms. While there are a ton of interview resources on the internet, the best ones are either not free, or they do not cover the complete interview process, usually only focusing on algorithms.\n\n## Why do I want this?\n\nThis repository has **practical** content that covers all phases of a technical interview, from applying for a job to passing the interviews to offer negotiation. Technically competent candidates might still find the non-technical content helpful as well.\n\n## Who is this for?\n\nWhether you are a beginner to technical interviews or a seasoned engineer who have not been on the other side of the interviewing table in a while and want to get back into the game, the Tech Interview Handbook has got you covered.\n","filetype":".md","index":13},{"title":"Landscape","category":"_contents","id":"landscape__contents","algorithm":"---\nid: landscape\ntitle: Landscape\n---\n\nimport useBaseUrl from '@docusaurus/useBaseUrl';\n\nMost of the content covered here will be specific to the Bay Area. Landscape differences due to geographical location are mentioned briefly [below](#geographical-location).\n\n## Career prospects as a Software Engineer\n\n### High demand\n\nAlmost every domain leverages on technology, hence Software Engineers are needed in almost every industry. Demand for engineers is higher than supply, leading to generally high-paying jobs. Moreover, the demand is continuously growing.\n\n### Stable career\n\nComputer Science is rapidly gaining popularity and engineering is a highly-regarded professional career. Unlike the creative industry, you do not have to be the top 1% of the industry to lead a comfortable life. An engineer fresh out of college working at a Silicon Valley company (both large companies and startups) can expect to receive a starting salary of more than USD 100,000 and it just gets better from there.\n\n### Requires lifelong learning\n\nTechnology industry is an extremely fast-moving one. Many technologies used today didn't even exist/were popular a decade ago; in 2009, mobile app development and blockchain were pretty much unheard of. Engineers constantly need to upgrade their skills to stay relevant to the demands of the job market. Engineering is a great career for passionate individuals who like to learn.\n\n### Flexible\n\nA software engineering job is perhaps the most flexible job that exists in terms of hours, location and environment. Physical location is usually not an issue and there are many tech companies that are fully remote. There's no formal attire to be worn and working hours are generally flexible. Your co-workers would stare at you weirdly if you came to work wearing a shirt and tie.\n\n## Internships vs full-time\n\nIf you dream of working at a top-tier tech company one day, getting hired via an intern conversion is by far the easiest way to achieve that. Internship interviews are extremely short (usually just 2 rounds whereas interviews for full-time roles are usually 4-5 rounds). Internships allow you to work at a company over a short period of time (3 months or so) and helps in understanding the company and engineering culture better. Companies also tend to give higher return job offers to high performing interns as they have proven to be effective at the job and fits into the culture; hence hiring them is considered to be relatively low-risk.\n\nTop tech companies pay a ridiculous amount for interns:\n\n<div class=\"text--center\">\n\n<img src={useBaseUrl('/img/internship-salaries.jpg')} />\n\n_Salaries of top tech internships in 2016 ([source](https://twitter.com/rodneyfolz/status/724787290824798209))_\n\n</div>\n\n## Company size\n\nCompanies have different focuses depending on the stage they are at and the types of work to be done can also be vastly different. In the earlier stages where product-market fit hasn't been found, companies would be rapidly iterating on products and features, whereas larger companies that have already found the right product will focus on scaling their infrastructure and growing their users. Liquid compensation is also lower at early-stage companies due to the equity not being worth any money, but there is the chance of earning a lot more if/when the company IPOs or gets acquired.\n\n|  | Early-stage Startup | Late-stage Startup | Large Company |\n| --- | --- | --- | --- |\n| Company Size | <100 | 100-1000 | >1000 |\n| Compensation | Base salary is a bit higher than big companies. Higher equity amount but its value is hard to judge as the company's valuation is unclear and stocks are not worth money yet. | Base salary is a bit higher than big companies. Company valuation is clearer and stocks have higher chance of being worth money. | Depends on the prestige of the company. Compensation is usually market standard or better. Stocks are worth money if company has gone public. |\n| Types of Work | Mainly product development. Engineers have to wear multiple hats - Front End, Back End, DevOps, Design, etc. | Product development and some infra. | Diverse roles and specialized work; dedicated people for each role. Infra work is more common. Also more opportunities for internal transfers. |\n| Career Ladders | Unstructured. No (or very vague) career levels. No formal mentorship nor training. | Somewhat structured. | Very structured. Well-defined career levels. |\n| Iteration Speed | Extremely fast. Struggling to find product market fit. | Moderate. Has found product market fit, trying to grow user base. | Stable product with wide user base. Have to roll out changes incrementally and run experiments. |\n\n## Geographical location\n\n|  | US (Silicon Valley/NY) | Singapore |\n| --- | --- | --- |\n| Starting Pay | USD 100,000 | Monthly $4320 (Median), $5000 (75th percentile) |\n| Talent Access | Global talent, diverse nationalities and backgrounds | Usually regional, mostly Asians |\n| Types of Companies | HQ of large companies (Facebook, Amazon, Apple, Google, Microsoft, etc), Startups | Branch offices of large companies, Startups |\n| Types of Engineering Work | Depends on size of office/company | Both product and infra (building new programming languages, frameworks, and tools) |\n","filetype":".md","index":14},{"title":"Mock Interviews","category":"_contents","id":"mock-interviews__contents","algorithm":"---\nid: mock-interviews\ntitle: Mock Interviews\n---\n\nInterviewing is a skill that you can get better at. The steps mentioned above can be rehearsed over and over again until you have fully internalized them and following those steps become second nature to you. A good way to practice is to find a friend to partner with and the both of you can take turns to interview each other.\n\nA great resource for practicing mock coding interviews would be [interviewing.io](https://iio.sh/r/DMCa). interviewing.io provides free, anonymous practice technical interviews with Google and Facebook engineers, which can lead to real jobs and internships. By virtue of being anonymous during the interview, the inclusive interview process is de-biased and low risk. At the end of the interview, both interviewer and interviewees can provide feedback to each other for the purpose of improvement. Doing well in your mock interviews will unlock the jobs page and allow candidates to book interviews (also anonymously) with top companies like Uber, Lyft, Quora, Asana and more. For those who are totally new to technical interviews, you can even view [recorded interviews](https://interviewing.io/recordings) and see how phone interviews are like. Read more about them [here](https://techcrunch.com/2017/09/27/interviewing-io-hopes-to-close-the-engineer-diversity-gap-with-anonymous-interviews/).\n\nI have used interviewing.io both as an interviewer and an interviewee and found the experience to be really great! [Aline Lerner](https://twitter.com/alinelernerLLC), the CEO and co-founder of interviewing.io and her team are passionate about revolutionizing the technical interview process and helping candidates to improve their skills at interviewing. She has also published a number of technical interview-related articles on the [interviewing.io blog](http://blog.interviewing.io/). interviewing.io is still in beta now but I recommend signing up as early as possible to increase the likelihood of getting an invite.\n\nAnother platform that allows you to practice coding interviews is [Pramp](https://pramp.com/). Where interviewing.io matches potential job seekers with seasoned technical interviewers, Pramp takes a different approach. Pramp pairs you up with another peer who is also a job seeker and both of you take turns to assume the role of interviewer and interviewee. Pramp also prepares questions for you, along with suggested solutions and prompts to guide the interviewee.\n\nPersonally, I am not that fond of Pramp's approach because if I were to interview someone, I would rather choose a question I am familiar with. Also, many users of the platform do not have the experience of being interviewers and that can result in a horrible interview experience. There was once where my matched peer, as the interviewer, did not have the right understanding of the question and attempted to lead me down the wrong path of solving the question. However, this is more of a problem of the candidate than the platform though.\n","filetype":".md","index":15},{"title":"Negotiation","category":"_contents","id":"negotiation__contents","algorithm":"---\nid: negotiation\ntitle: Negotiation\n---\n\n## Always Negotiate\n\nIf you've received an offer (or even better, offers), congratulations! You may heave a huge sigh of relief and think that the toughest parts are over. Well yes, but not entirely! For most people, the reason they're finding a new job is to increase their salary, and salary negotiation is the last stretch in achieving that goal.\n\n**Here's something that recruiters don't want you to know:** In most cases, there's room for negotiation on your offer. The initial offer that you are given is not the best package that the company can offer. During my job hunting experience and having received offers from numerous top tech companies like Facebook, Google, Airbnb, Lyft, and Dropbox, I have found this to be true. In most cases, you could always negotiate for more money, and some aspects of your salary is easier to negotiate than the others.\n\nIf you haven't been negotiating your past offers, or are new to the negotiation game, worry not! [Moonchaser](https://www.moonchaser.io/?utm_source=techinterviewhandbook&utm_medium=referral&utm_content=website_negotiation) can help you with it. How it works is that you will be guided by their experienced team of professionals throughout the entire salary negotiation process. It's also risk-free because you don't have to pay anything unless they helped you to increase your offer. It's a **no-brainer decision** to get the help of Moonchaser during the offer process. Some increase is better than no increase. Don't leave money on the table!\n\n:::tip\n\nGet paid more. Receive risk-free salary negotiation help from [**Moonchaser**](https://www.moonchaser.io/?utm_source=techinterviewhandbook&utm_medium=referral&utm_content=website_negotiation), you pay nothing unless your offer is increased. Don't leave money on the table üí∞!\n\n:::\n\n## Ten Rules of Negotiation\n\nKey points extracted from \"Ten Rules for Negotiating a Job Offer\" [Part 1](http://haseebq.com/my-ten-rules-for-negotiating-a-job-offer/) and [Part 2](https://haseebq.com/how-not-to-bomb-your-offer-negotiation/) by Haseeb Qureshi.\n\n### Get everything in writing\n\nNote down EVERYTHING on your phone call with the recruiters as they may be helpful later on. Even if there are things that are not directly monetary, if they relate to the job, write them down. If they tell you \"we're working on porting the front-end to Angular,\" write that down. If they say they have 20 employees, write that down. You want as much information as you can. You'll forget a lot of this stuff, and it's going to be important in informing your final decision.\n\n### Always keep the door open\n\nNever give up your negotiating power until you're absolutely ready to make an informed, deliberate final decision. This means your job is to traverse as many of these decision points as possible without giving up the power to continue negotiating. Very frequently, your interlocutor will try to trick you into making a decision, or tie you to a decision you didn't commit to. You must keep verbally jiu-jitsu-ing out of these antics until you're actually ready to make your final decision.\n\n### Information is power\n\nTo protect your power in the negotiation, you must protect information as much as possible. A corollary of this rule is that you should not reveal to companies what you're currently making. So given this offer, don't ask for more money or equity or anything of the sort. Don't comment on any specific details of the offer except to clarify them. Companies will ask about your current compensation at different stages in the process‚Äîsome before they ever interview you, some after they decide to make you an offer. But be mindful of this, and protect information.\n\n> \"Yeah, [COMPANY_NAME] sounds great! I really thought this was a good fit, and I'm glad that you guys agree. Right now I'm talking with a few other companies so I can't speak to the specific details of the offer until I'm done with the process and get closer to making a decision. But I'm sure we'll be able to find a package that we're both happy with, because I really would love to be a part of the team.\"\n\n### Always be positive\n\nEven if the offer is bad, it's extremely important to remain positive and excited about the company. This is because your excitement is one of your most valuable assets in a negotiation.\n\nDespite whatever is happening in the negotiation, give the company the impression that 1) you still like the company, and that 2) you're still excited to work there, even if the numbers or the money or the timing is not working out. Generally the most convincing thing to signal this is to reiterate you love the mission, the team, or the problem they're working on, and really want to see things work out.\n\n### Don't be the decision maker\n\nEven if you don't particularly care what your friends/family/husband/mother thinks, by mentioning them, you're no longer the only person the recruiter needs to win over. There's no point in them trying to bully and intimidate you; the \"true decision-maker\" is beyond their reach. This is a classic technique in customer support and remediation. It's never the person on the phone's fault, they're just some poor schmuck doing their job. It's not their decision to make. This helps to defuse tension and give them more control of the situation.\n\n> I'll look over some of these details and discuss it with my [FAMILY/CLOSE_FRIENDS/SIGNIFICANT_OTHER]. I'll reach out to you if I have any questions. Thanks so much for sharing the good news with me, and I'll be in touch!\n\nIt's much harder to pressure someone if they're not the final decision-maker. So take advantage of that.\n\n### Have alternatives\n\nIf you're already in the pipeline with other companies (which you should be if you're doing it right), you should proactively reach out and let them know that you've just received an offer. Try to build a sense of urgency. Regardless of whether you know the expiration date, all offers expire at some point, so take advantage of that.\n\n> Hello [PERSON],\n>\n> I just wanted to update you on my own process. I've just received an offer from [COMPANY] which is quite strong. That said, I'm really excited about [YOUR AMAZING COMPANY] and really want to see if we can make it work. Since my timeline is now compressed, is there anything you can do to expedite the process?\n\nShould you specifically mention the company that gave you an offer? Depends. If it's a well-known company or a competitor, then definitely mention it. If it's a no-name or unsexy company, you should just say you received an offer. If it's expiring soon, you should mention that as well.\n\nEither way, send out a letter like this to every single company you're talking to. No matter how hopeless or pointless you think your application is, you want to send this signal to everyone who is considering you in the market.\n\nCompanies care that you've received other offers. They care because each company knows that their own process is noisy, and the processes of most other companies are also noisy. But a candidate having multiple offers means that they have multiple weak signals in their favor. Combined, these converge into a much stronger signal than any single interview. It's like knowing that a student has a strong SAT score, and GPA, and won various scholarships. Sure, it's still possible that they're a dunce, but it's much harder for that to be true.\n\nThis is not to say that companies respond proportionally to these signals, or that they don't overvalue credentials and brands. They do. But caring about whether you have other offers and valuing you accordingly is completely rational.\n\nTell other companies that you've received offers. Give them more signals so that they know you're a valued and compelling candidate. And understand why this changes their mind about whether to interview you.\n\nYour goal should be to have as many offers overlapping at the same time as possible. This will maximize your window for negotiating.\n\nHave a strong BATNA (Best Alternative To a Negotiated Agreement) and communicate it.\n\n> I 've received another offer from [OTHER CORP] that's very compelling on salary, but I really love the mission of [YOUR COMPANY] and think that it would overall be a better fit for me.\n\n> I'm also considering going back to grad school and getting a Master's degree in Postmodern Haberdashery. I'm excited about [YOUR COMPANY] though and would love to join the team, but the package has to make sense if I'm going to forego a life of ironic hatmaking.\n\n### Proclaim reasons for everything\n\nIt's kind of a brain-hack, both for yourself and for your negotiating partner. Just stating a reason (any reason) makes your request feel human and important. It's not you being greedy, it's you trying to fulfill your goals.\n\nThe more unobjectionable and sympathetic your reason, the better. If it's medical expenses, or paying off student loans, or taking care of family, you'll bring tears to their eyes.\n\nJust go with it, state a reason for everything, and you'll find recruiters more willing to become your advocate.\n\n### Be motivated by more than just money\n\nYou should be motivated by money too of course, but it should be one among many dimensions you're optimizing for. How much training you get, what your first project will be, which team you join, or even who your mentor will be‚Äîthese are all things you can and should negotiate.\n\nOf course, to negotiate well you need to understand the other side's preferences. You want to make the deal better for both of you.\n\n### Understand what they value\n\nRemember that you can always get salary raises as you continue to work at the company, but there's only one point at which you can get a signing bonus.\n\nThe easiest thing for a company to give though is stock (if the company offers stock). Companies like giving stock because it invests you in the company and aligns interests. It also shifts some of the risk from the company over to you and burns less cash.\n\n### Be winnable\n\nThis is more than just giving the company the impression that you like them (which you continually should). But more so that you must give any company you're talking to a clear path on how to win you. Don't bullshit them or play stupid games. Be clear and unequivocal with your preferences and timeline.\n\nDon't waste their time or play games for your own purposes. Even if the company isn't your dream company, you must be able to imagine at least some package they could offer you that would make you sign. If not, politely turn them down.\n\n:::tip\n\nGet risk-free salary negotiation help from [Moonchaser](https://www.moonchaser.io/?utm_source=techinterviewhandbook&utm_medium=referral&utm_content=website_negotiation), you pay nothing unless your offer is increased. Don't leave money on the table üí∞!\n\n:::\n","filetype":".md","index":16},{"title":"Picking A Language","category":"_contents","id":"picking-a-language__contents","algorithm":"---\nid: picking-a-language\ntitle: Picking a Language\n---\n\nBefore anything else, you need to pick a programming language to do your interviews in. Most companies will let you code in any language you want, the only exception I know being Google, where they only allow candidates to pick from Java, C++, JavaScript or Python for their algorithmic coding interviews.\n\n## Some languages are more suited for interviews\n\nThere are some languages which are more suitable than others for coding interviews and some languages you absolutely want to avoid. From my experience as an interviewer, most candidates pick Python or Java. Other commonly seen languages include JavaScript, Ruby and C++. I would absolutely avoid lower level languages like C or Go, simply because they lack many standard library functions and data structures and some may require manual memory management.\n\nPersonally, Python is my de facto choice for algorithm coding interviews because it is succinct and has a pretty huge library of functions and data structures available. One of my top reasons for recommending Python is that it uses consistent APIs that operate on different data structures, such as `len()`, `for ... in ...` and slicing notation on sequences (strings/lists/tuples). Getting the last element in a sequence is `arr[-1]` and reversing it is simply `arr[::-1]`. You can achieve a lot with minimal syntax in Python.\n\nJava is a decent choice too but having to constantly declare types in your code means extra keystrokes which results in slower coding/typing speed. This issue will be more apparent when you have to write on a whiteboard during on-site interviews. The reasons for choosing/not choosing C++ are similar to Java. Ultimately, Python, Java and C++ are decent choices of languages.\n\n## Use a language you are familiar with\n\nMost of the time, it is recommended that you use a language that you are extremely familiar with rather than picking up a new language just for doing interviews because the company uses that language heavily or just because you want to show that you are trendy.\n\nIf you are under time constraints, picking up a new language just for interviewing is hardly a good idea. Languages take time to master and if you are already spending most of your time and effort on mastering algorithms, there is barely spare effort left for mastering a new language. If you are familiar with using one of the mainstream languages, there isn't a strong reason to learn a new language just for interviewing.\n\nIf you have been using Java at work for a while now and do not have time to be comfortably familiar with another language, I would recommend just sticking to Java instead of picking up Python from scratch just for the sake of interviews. Doing so, you can avoid having to context switch between languages during work vs interviews. Most of the time, the bottleneck is in the thinking and not the writing. It takes some getting used to before one becomes fluent in a language and be able to wield it with ease.\n\n## The exception to the norm\n\nOne exception to the convention of allowing you to \"pick any programming language you want\" is when you are interviewing for a domain-specific position, such as Front End/iOS/Android Engineer roles, in which you would need to be familiar with coding in JavaScript, Objective-C/Swift and Java respectively. If you need to use a data structure that the language does not support, such as a Queue or Heap in JavaScript, perhaps try asking the interviewer whether you can assume that you have a data structure that implements certain methods with specified time complexities. If the implementation of that data structure is not crucial to solving the problem, the interviewer will usually allow this. In reality, being aware of existing data structures and selecting the appropriate ones to tackle the problem at hand is more important than knowing the intricate implementation details.\n","filetype":".md","index":17},{"title":"Psychological Tricks","category":"_contents","id":"psychological-tricks__contents","algorithm":"---\nid: psychological-tricks\ntitle: Psychological Tricks\n---\n\nHere are some psychological tricks that will help you ace a job interview.\n\n- Tailor your answers to the interviewer's age.\n  - Generation Y interviewers (between 20 and 30): Bring along visual samples of your work and highlight your ability to multitask.\n  - Generation X interviewers (between 30 and 50): Emphasize your creativity and mention how work/life balance contributes to your success.\n  - Baby Boomer interviewers (between 50 and 70): Show that you work hard and demonstrate respect for what they've achieved.\n- Hold your palms open or steeple your hands.\n- Find something in common with your interviewer.\n- Mirror the interviewer's body language.\n- Compliment the interviewer and the organization without self-promoting.\n  - Specifically, the students who ingratiated themselves praised the organization and indicated their enthusiasm for working there, and complimented the interviewer. They didn't play up the value of positive events they took credit for or take credit for positive events even if they weren't solely responsible.\n- Show confidence and deference simultaneously.\n  - In a job interview, that means showing deference to your interviewer, while also demonstrating self-confidence. One way to do that is to say something like, \"I love your work on [whatever area]. It reminds me of my work on [whatever area].\"\n- Emphasize how you took control of events in your previous jobs.\n  - To impress your interviewer, you should talk about past work experiences where you took initiative.\n- Be candid about your weaknesses.\n  - It's wiser to say something genuine like, \"I'm not always the best at staying organized,\" which sounds more honest, and could make your interviewer more inclined to recommend you for the position.\n- Speak expressively.\n- Showcase your potential.\n  - You might be tempted to tell your interviewer all about your past accomplishments ‚Äî but research suggests you should focus more on what you could do in the future, if the organization hires you.\n\n###### References\n\n- [Business Insider](http://www.businessinsider.com/psychological-tricks-to-ace-job-interview-2015-11)\n","filetype":".md","index":18},{"title":"Questions To Ask","category":"_contents","id":"questions-to-ask__contents","algorithm":"---\nid: questions-to-ask\ntitle: Questions To Ask\n---\n\nHere are some good questions to ask at the end of the interview, extracted from various sources. The ones in **bold** are the ones that tend to make the interviewer go \"That's a good question\" and pause and think for a bit.\n\n### General\n\n- **What are you most proud about in your career so far?**\n- **What is the most important/valuable thing you have learnt from working here?**\n- How do your clients and customers define success?\n- What would you change around here if you could?\n- What are some weaknesses of the organization?\n- What does a typical day look like for you?\n- What do you think the company can improve at?\n- How would you see yourself growing at this company in the next few years?\n- Was there a time where you messed up and how was it handled?\n- Why did you choose to come to this company?\n- When you were last interviewing, what were some of your other options, and what made you choose this company?\n- What was something you wish someone would have told you before you joined?\n- What was your best moment so far at the company?\n\n### Culture\n\n- **What is the most frustrating part about working here?**\n- **What is unique about working at this company that you have not experienced elsewhere?**\n- **What is something you wish were different about your job?**\n- How will the work I will be doing contribute to the organization's mission?\n- What do you like about working here?\n- What is your policy on working from home/remotely?\n- (If the company is a startup) When was the last time you interacted with a founder? What was it regarding? Generally how involved are the founders in the day-to-day?\n- Does the company culture encourage entrepreneurship? Could you give me any specific examples?\n\n### Technical\n\nThese questions are suitable for any technical role.\n\n- **What are the engineering challenges that the company/team is facing?**\n- **What has been the worst technical blunder that has happened in the recent past? How did you guys deal with it? What changes were implemented afterwards to make sure it didn't happen again?**\n- **What is the most costly technical decision made early on that the company is living with now?**\n- **What is the most fulfilling/exciting/technically complex project that you've worked on here so far?**\n- **I do / don't have experience in domain X. How important is this for me to be able to succeed?**\n- How do you evaluate new technologies? Who makes the final decisions?\n- How do you know what to work on each day?\n- How would you describe your engineering culture?\n- How has your role changed since joining the company?\n- What is your stack? What is the rationale for/story behind this specific stack?\n- Do you tend to roll your own solutions more often or rely on third party tools? What's the rationale in a specific case?\n- How does the engineering team balance resources between feature requests and engineering maintenance?\n- What do you measure? What are your most important product metrics?\n- What does the company do to nurture and train its employees?\n- How often have you moved teams? What made you join the team you're on right now? If you wanted to move teams, what would need to happen?\n- What resources does the company have for new hires to study its product and processes? Are there specifications, requirements, documentation?\n- There's \"C++\" (or Python, Swift or any other tech) in the job description. How will you estimate my proficiency in this tech in 3 months?\n- How do you think my expertise would be relevant to this team? What unique value can I add?\n\n### Product\n\n- Tell me about the main products of your company.\n- What is the current version of product? (If it is v1.0 or similar - there could be a lot of chaos to work with)\n- What products are your main competitors?\n- What makes your product competitive?\n- When are you planning to provide the next release? (If in several months, it would mean a lot of requirements specified in job description are not needed right now)\n- Is the team growing, and what sort of opportunities will there be in the next year/3 years?\n- What are your highest priorities right now? For example, new features, new products, solidifying existing code, reducing operations overhead?\n\n### Management\n\nThese questions are suitable for asking Engineering Managers, especially useful for the Team Matching phase of Google interviews or post-offer calls that your recruiters set up with the various team managers.\n\n- **How do you train/ramp up engineers who are new to the team?**\n- **What does success look like for your team/project?**\n- **What qualities do you look out for when hiring for this role?**\n- **What are the strengths and weaknesses of the current team? What is being done to improve upon the weaknesses?**\n- **Can you tell me about a time you resolved an interpersonal conflict?**\n- How did you become a manager?\n- How do your engineers know what to work on each day?\n- What is your team's biggest challenge right now?\n- How do you measure individual performance?\n- How often are 1:1s conducted?\n- What is the current team composition like?\n- What opportunities are available to switch roles? How does this work?\n- Two senior team members disagree over a technical issue. How do you handle it?\n- Have you managed a poor performer at some point in your career before? What did you do and how did it work?\n- Where do you spend more of your time, high performers or low performers?\n- Sometimes there's a trade-off between what's best for one of your team members and what's best for the team. Give an example of how you handled this and why.\n- Give an example of a time you faced a difficult mentoring/coaching challenge. What did you do and why?\n- What is your management philosophy?\n- What is the role of data and metrics in managing a team like ours?\n- What role does the manager play in making technical decisions?\n- What is an example of a change you have made in the team that improved the team?\n- What would be the most important problem you would want me to solve if I joined your team?\n- What opportunities for growth will your team provide?\n- What would I work on if I joined this team and who would I work most closely with?\n\n### Leadership\n\nThese questions are intended for senior level management, such as CEO, CTO, VPs. Candidates who interview with startups usually get to speak with senior level management.\n\n- How are you funded?\n- Are you profitable? If no, what's your plan for becoming profitable?\n- What assurance do you have that this company will be successful?\n- Tell me about your reporting structure.\n- How does the company decide on what to work on next?\n\n### HR\n\n- **How do you see this position evolving in the next three years?**\n- **Who is your ideal candidate and how can I make myself more like them?**\n- What concerns/reservations do you have about me for this position?\n- What can I help to clarify that would make hiring me an easy decision?\n- How does the management team deal with mistakes?\n- If you could hire anyone to join your team, who would that be and why?\n- How long does the average engineer stay at the company?\n- Why have the last few people left?\n- Have you ever thought about leaving? If you were to leave, where would you go?\n\n###### References\n\n- [Business Insider](http://www.businessinsider.sg/impressive-job-interview-questions-2015-3/)\n- [Lifehacker](http://lifehacker.com/ask-this-question-to-end-your-job-interview-on-a-good-n-1787624433)\n- [Fastcompany](https://www.fastcompany.com/40406730/7-questions-recruiters-at-amazon-spotify-and-more-want-you-to-ask)\n- [Questions I'm asking in interviews](http://jvns.ca/blog/2013/12/30/questions-im-asking-in-interviews/)\n- [How to interview your interviewers](http://blog.alinelerner.com/how-to-interview-your-interviewers/)\n- [How to Break Into the Tech Industry‚Äîa Guide to Job Hunting and Tech Interviews](https://haseebq.com/how-to-break-into-tech-job-hunting-and-interviews/)\n- [A developer's guide to interviewing](https://medium.freecodecamp.org/how-to-interview-as-a-developer-candidate-b666734f12dd)\n- [Questions I'm asking in interviews 2017](https://cternus.net/blog/2017/10/10/questions-i-m-asking-in-interviews-2017/)\n- [What are good questions to ask during a software developer interview when asked \"Do you have any questions now?\"](https://www.quora.com/What-are-good-questions-to-ask-during-a-software-developer-interview-when-asked-do-you-have-any-questions-now/answer/John-L-Miller)\n- [What are some good questions to ask when interviewing someone for a manager position?](https://www.quora.com/What-are-some-good-questions-to-ask-when-interviewing-someone-for-a-manager-position/answer/David-Seidman)\n","filetype":".md","index":19},{"title":"Resume","category":"_contents","id":"resume__contents","algorithm":"---\nid: resume\ntitle: Resume\n---\n\nThe following content is by Christina Ng and rephrased for the purpose of this handbook. You can follow her on [Medium](https://medium.com/@christinang89) or [Quora](https://www.quora.com/profile/Christina-Ng).\n\n## How your resume is screened\n\nWhile many engineers can be rather qualified for the role they are applying for, they miss out on getting a shot at the interview as they might never get past resume screening. The main issue was that they do not understand how recruiters worked.\n\nBefore writing your resume, it is important to understand the recruiting structure and how recruiting is done.\n\n### The skill set checklist\n\nBefore opening up a position/starting the search for candidates, I usually consult very closely with the team manager/decision maker to find out the specific skill sets that are relevant for the position. These skill sets are typically grouped into \"Must have\", \"Good to have\", and \"Special bonus\".\n\n- \"Must have\"‚Ää‚Äî‚ÄäTypically, most of the must-haves include a degree (or not) in a relevant technical field, some years (or not) of experience in a particular programming language or technology\n- \"Good to have\"‚Ää‚Äî‚ÄäIncludes experience/familiarity with secondary languages/technologies which may not be directly relevant to what the candidate would be working on, but could be required due to some interfacing with other components of the project. It could also include softer skills such as being a good team player, clear communication, etc\n- \"Special bonus\"‚Ää‚Äî‚ÄäRecognized skill sets/experiences which are difficult to come by. Probably not a requirement, but would definitely be useful for the position\n\nNow that I am armed with this list, the search for candidates begin.\n\nTypically, I do not seek that \"one perfect candidate\". What I seek for is the \"best fit candidate\". The search is essentially a numbers game. I know that for a specific job posting, there would perhaps be X applicants. At each stage of the interview process, some percentage of the candidates will be eliminated, leaving only a final Y% of the initial pool to choose from. Since Y tends to be a rather small number, recruiters will try to maximize X.\n\n### The 10 seconds glance\n\nWhen I am looking at your resume, I am doing a keyword match against the skill set checklist. If I see a good amount of the right keywords in your resume, it is a pass. If I need to spend more than 10 seconds trying to figure out what you are writing about, it is a fail. If I see an excessive amount of keywords (much looking like spam), it signals a red flag and goes into the \"maybe\". Depending on whether I think I have enough candidates for the day, you could eventually go into the pass or fail stack.\n\nThere are lots of articles writing about how recruiters only spend an average of about 10 seconds to screen each resume. The news is, this is true because resume screening is such a menial, robotic and repetitive task. In fact, many applicant tracking systems (ATS) now are so advanced that they can parse your resume automatically, search for specific keywords in your resume, and score your resume based on the weights pre-assigned to each keyword.\n\nFinding a job is a two-way fit‚Ää‚Äî‚Ääthe company wants someone with the relevant skills required, but it is also important for the applicant to fit in the company culture, and be able to gain something out of their stint. Hence, honesty is the single most important criteria in a resume.\n\nThere is a delicate balance between finding the right job vs. finding a job. Getting rejected does not always mean you are not good enough. Sometimes, it just means you are not a right fit for what the company is looking for.\n\nWhen hiring fresh grads, I know that many of them will not have as much experience as someone who has years of industry experience. Hence, I would look out more for soft skills, such as attention to detail, initiative, passion, ability to get things done, etc. Note: this applies only if you have met the minimum threshold of proficiency/competency in the skill set checklist.\n\n## 10 ways to improve your resume\n\nNow that you are aware of how recruiters screen your resume, here are 10 actionable ways you can do to improve your resume.\n\n### 1. Cover letter\n\nI've often received resumes with no cover letters, and I am perfectly fine with it. If you ask me, it is better to have no cover letter than to have a bad cover letter, especially if your cover letter is a \"templated\" content. An effective cover letter needs to highlight the fit between the job requirements and your skills/experiences. Do not just tell me what you have done in your cover letter; Tell me how it is a fit for what I am looking for.\n\nSome small nitpicks:\n\n- Make sure that the cover letter is addressed to the right person (either the name of the recruiter if it is known, or to a generic hiring manager) and company\n- Run a spell check\n\n### 2. Length of resume\n\nYour resume should be kept to 1 page or a MAXIMUM of 2 pages. Include only your most recent and relevant experiences.\n\nInformation that a recruiter wants to know:\n\n- Name, email, contact number\n- Objective statement\n- Education details: College, Major, GPA, Sample classes (optional, but if you list, make sure its classes that you scored well in and are relevant to your area of interest), academic awards, availability\n- If you have studied abroad, you can list that too\n- Projects that you have worked on\n- Work experience/co-curricular activities\n- Skills/other interests\n- Street cred - GitHub/Stack Overflow/LinkedIn profile (optional, but highly recommended)\n\nInformation nobody needs to know:\n\n- Your profile picture. In the US, it is illegal to discriminate based on age, gender, race, or appearance\n- Address, home phone number, gender, religion, race, marital status, etc etc\n- Elementary, middle, high school\n- Your low GPA\n- Anything less recent than 3-4 years unless they are valid job experiences\n- Anything about your parents/siblings, their names, occupation, etc\n- Your life story\n- Anything not relevant to the job you are applying for (e.g. that you have a driving license when you are applying to be a programmer)\n\nIdeally, keep it short, concise, but as detailed as possible.\n\n### 3. GPA does matter\n\nEveryone wants the cream of the crop. In the absence of a standardized test, GPA serves as that indicator. **While GPA may not necessarily be a good indication of how well you can code, a high GPA would definitely put you in a more favorable position to the recruiter.**\n\nIf your GPA is rather low, but you have loads of technical experiences, you can try not listing your GPA in the resume. This kinda \"forces\" the recruiter to read through your projects/job experience, and perhaps grant you a first interview. If you manage to impress them, who cares about your GPA? But if your GPA is low and you do not have skills for the job... maybe you should work on one of them and revisit job applications later.\n\nIn a different scenario, some students have low GPA, but it might be due to some irrelevant classes which they did badly in. E.g. Student X is scoring A for all his programming classes, but did not do well for his language classes. If I am hiring a developer, Student X would still be a suitable candidate despite his low GPA. In such cases, it might even be recommended to attach a transcript along with the resume.\n\nAlso, when you list your GPA/results, try to benchmark it. Instead of simply listing 4.6, write 4.6/5.0 (First Class Honors or Summa Cum Laude). To the recruiter, 4.6 does not mean anything if he/she is not familiar with your grading system.\n\n### 4. Be clear about your objectives\n\nAre you looking for a summer internship/full-time employment? What position are you applying for? Read the job description and know the job you are applying for!\n\n**\"Work experience\" does not mean any work experience; it means _relevant_ work experience.** If you are applying for a developer position, the recruiter is not interested to know that you were a student escort for girls walking back to their apartments at night, nor that you were a cashier at Starbucks. You would be better off writing about the project you did for some programming class - yes, even if it was just a school project. Tailor your experiences and projects according to the job you are applying for. Pick relevant details to emphasize on and do not be hesitant to drop stuff completely if they are totally irrelevant. Quality over quantity.\n\n- Make sure the description is comprehensive. Avoid writing \"Software engineering intern - write code\". You are better off not writing anything\n- Based on my experience, most fresh grads do not have extremely relevant job experience (unless you are lucky to have scored a really rewarding internship). For developer positions, I think it is ok to not have any job experience and just list projects\n\n### 5. Reverse chronological order\n\nAlways list your resume in reverse chronological order - the most recent at the top. Recruiters are more interested in what you have worked on recently than what you worked on 3 years ago. Chances are, you probably forgot the details too anyway.\n\n### 6. Make sure you are contactable\n\n- Get a proper email account with ideally your first name and last name, eg. \"john.doe@gmail.com\" instead of \"angrybirds88@gmail.com\"\n- If you are using your school's .edu email, try to have an alias like \"john.doe@xxx.edu\" instead of \"a002342342@xxx.edu\"\n- Avoid emails like \"me@christi.na\" or \"admin@[mycooldomain].com\" -- because it is very prone to typo errors\n- Make sure the number you have listed is the best way to reach you. The last thing you want is to miss the call from the recruiter because you typed the wrong number, or you are not available on that number during office hours (most probably the times the recruiter will call)\n\n### 7. Layout/Formatting/Design\n\n- Be consistent about the way you format your resume. Italics, underline, bold, and how they are used\n- Keep to a single standard font (avoid fancy fonts like Comic Sans or whatever) and do not have too many varying styles/font sizes/color\n- Be consistent about the way you list your dates (eg. May 2011 - Aug 2011). Avoid using numerals for both month and date due to the difference in style for MMDD and DDMM in different countries. Dates like \"Aug 2011 - June 12\" just show that you have zero attention to detail\n- Unless you are applying for a design job, just stick to the standard \"table\" style for the resume. There is nothing wrong with the standard style, and it helps the recruiter screen your resume more efficiently since they are trained through experience to read that format. It would also help in the automatic scoring by the ATS. The last thing you want is for your application to be rejected because the system could not parse your resume for it to be scored. That said, I am not discouraging you from coming up with your own design. It is nice to read something different. Just be aware of the risks you could be taking\n- Name your file `firstname_lastname_resume.pdf` instead of `resume.pdf` - it is easier for recruiters to search/forward\n- PDF preferred over Word doc\n- Be consistent about bullet points\n- Your resume should not look sparse. (Come on, it is only 1 page!) If you really have trouble filling it up, you are either not thinking hard enough, or not doing enough. In the case of the latter, consider working on your personal projects (i.e. stuff you can post on GitHub). That said, do not write stuff just to fill space. Read point 4\n- This should be common sense, but do not commit fraud, i.e. apply for the same job using a different name, or using your friend's resume to apply for the same job. Some ATS issues an indicator if they suspect the application to be a duplicate\n- It's important to note the layout of your resume. If you choose to quickly upload your resume via an auto-fill program, understand that the program will read your resume from top to bottom, left to right. This is good to keep in mind when developing the layout of your resume\n- Try to keep white space down to a minimum. This will also help reduce the length of your resume to one page. Reduce margins and paddings reasonably\n\n### 8. Listing your skills\n\nIt is useful to list your relevant skills in a quick summary section for easy reading/matching. However, many people make the mistake of listing as many skills/programming languages in the resume as possible. This may get you through the ATS scoring, but it definitely would not leave a good impression on the recruiter - the actual human reading your resume and deciding whether to call you up for an interview!\n\nIdeally, if your resume is good enough, the recruiter should already know what you are proficient in. The skills section is just a quick summary/reiteration. **Listing a bunch of technologies you claim you know without actually showing how you have worked with them is pointless.**\n\n### 9. Projects\n\n- Ideally, 1-2 lines about the project, 2-3 lines about your role, what technologies you used, what you did, your learning, etc etc. These can be Final Year Projects, Research projects, projects for a particular class, freelance projects, or just personal projects (ie. GitHub stuff)\n- Ideally, 2 to 3 projects that align with your interests/position you are applying for\n- Avoid using titles such as \"Project for [module code]\". Sorry, the recruiter has no idea what class is represented by the module code. Ideally, you want the project section to demonstrate your personality and skills, and be the talking point during the interview\n\n### 10. Online profile/other interests\n\nHere's the news - Recruiters do search for your name! Definitely pre-empt that by Googling/Facebook-ing/searching yourself on all forms of social media to see what turns up. Make sure your privacy settings are restricted so your online profile shows only the image you are trying to project.\n\nIf you have some space on your resume, it is good to list additional interests outside of coding. Eg. skiing, water sports, soccer, etc etc. Gives the interviewer something to talk to you about. It also shows that you are a well-rounded individual/cool person to hang out with.\n\n###### References\n\n- [Screening your resume is like playing word search](https://medium.com/@christinang89/screening-your-resume-is-like-playing-word-search-60f4d0e60840)\n- [10 tips to get past resume screening for College Students/Grads](https://christinang89.quora.com/10-tips-to-get-past-resume-screening-for-College-Students-Grads)\n","filetype":".md","index":20},{"title":"Self Introduction","category":"_contents","id":"self-introduction__contents","algorithm":"---\nid: self-introduction\ntitle: Self Introduction\n---\n\nInterviewers want to work with candidates they like. Leave a good/deep impression and it will increase your chances of success. Most of us are not strangers to self introductions as we meet new people now and then and have to introduce ourselves every once in a while. However, self introductions in interviews are slightly different from real life - you need to tweak it to your advantage - tailor the self introduction to the role and company you are applying for! Your self introduction evolves as you grow and are at a different stage of your life.\n\nYou can rephrase the question like this:\n\n> \"Tell me about your journey into tech. How did you get interested in coding, and why was web development (or replace with other job-specific skills) a good fit for you? How is that applicable to our role or company goals?\"\n\n## The elevator pitch\n\nAn \"elevator pitch\" originates from a journalist trying to pitch an idea to an editor. The only time to catch the editor was in the elevator and she had only around 30 seconds to do so. The key elements of elevator pitches include:\n\n- Short - You have limited time!\n- Direct - As you only have limited time, you should get to the point\n- Attention-grabbing - Present your most attractive ideas\n\nWhether you're at a job fair with hundreds of other candidates and you have limited time or you are simply explaining who you are to a potential connection or client, it is important to be able to clearly and accurately describe your knowledge and skillset quickly and succinctly. Your self introduction is an elevator pitch for yourself!\n\nHere are some tips to develop a good elevator pitch for yourself:\n\n### Short basic background information\n\nInclude who you are, who you work for (or school and major), and what you do.\n\n- For internships, you should mention the following: name, school and major, focus areas, past internships and/or noteworthy projects.\n- For full-time roles, you should mention the following: name, past companies, noteworthy projects (best if it's a public consumer product that they might have heard of).\n\nDoes this look familiar? It is similar to your resume! Your resume is a condensed version of your knowledge and experiences and your self introduction is essentially a condensed version of your resume. As you grow older, professional experience becomes more important and school background becomes less important. Hence your self introduction changes as you become more senior.\n\n### KISS (Keep It Simple and Sweet)\n\nTell them some highlights from your favorite/most impressive projects and including some numbers if they're impressive or challenges that you've overcome. Do not delve into the depths of how you reverse engineered a game and decrypted a packet to predict when to use your DKP on a drop. Tell them the executive summary: \"I reverse engineered X game by decrypting Y packet to predict Z.\" If this catches their interest, they _will_ ask further questions on their own.\n\n### Why do _they_ want _you_?\n\nTell the interviewer why you would make a good hire. Is your experience relevant to the company? Have you used a similar tech stack as the company or built relevant products? What unique talent(s) do you have that may give them confidence about your ability to contribute to the company?\n\n### Practice!\n\nLastly, you must practice your pitch! Having a great, succinct summary of your skills only helps if you can actually deliver it rapidly! You should practice keeping a quick but easy-to-follow pace that won't overwhelm them but won't bore them. It's a precarious balance, but can be ironed out with practice.\n\nAfter coming up with your self introduction, keep it somewhere where you can refer/tweak in future Memorize them and in future you can just use it when you need to But don‚Äôt sound like you‚Äôre recalling it from your memory when you‚Äôre actually saying it out. Sound natural!\n\nHaving an elevator pitch on hand is a great way to create a network and happen upon new job opportunities. There will often be times when you can't prepare for an interview or meeting, and it is incredibly handy to have a practiced pitch.\n\n## Format\n\nPrepare a self introduction that follows the following outline (inspired by \"Cracking the Coding Interview\" by Gayle McDowell):\n\n1. A sentence about your current or most recent role.\n1. A few sentences about your (academic) background. What did you focus on?\n1. Some sentences about your professional experience after school/university. Where did you work? What projects did you deal with? What were the typical challenges and tasks? Which technologies did you use?\n1. Finish with a statement saying why you are seeking a new job opportunity and why you are interested in the role you applied for.\n\n## Examples\n\n### Example 1: Front End Engineer at Facebook\n\n#### Self introduction\n\n> \"Hi I‚Äôm Yangshun and I graduated from National University of Singapore in 2015 with a degree in Computer Science. My interests are in Front End Engineering and I love to create beautiful performant products with delightful user experiences.\n>\n> Back in school, I designed and built a web application, NUSMods which solves a huge problem of class and timetable planning every semester. It receives over a million pageviews a month and is used by over 40,000 NUS students and even some professors. It is built using a modern web technology stack - React, Redux, Jest, Babel, Flow, webpack and is mobile-responsive.\"\n>\n> I'm interested in the Front End Engineer role at Facebook because I have been using Facebook Open Source Front End technologies for a while now and am inspired by Facebook's mission and Open Source culture.\n\n#### Breakdown\n\n- \"I love to create beautiful performant products with delightful user experiences.\"\n  - Qualities that a Front End engineer should possess\n- \"It receives over a million pageviews a month and is used by over 30,000 NUS undergraduates and even some professors.\"\n  - Mention something about the project which stands out\n- \"It is built using a modern web technology stack - React, Redux, Jest, Babel, Flow, webpack and is mobile-responsive.\"\n  - Facebook tech stack! Also hints that you are familiar with modern web technologies\n\n### Example 2: Front End Engineer at Lyft\n\n#### Self introduction\n\n> \"Hi I‚Äôm Yangshun and I graduated from National University of Singapore in 2015 with a degree in Computer Science. My interests are in Front End Engineering and I love to create beautiful performant products with delightful user experiences.\n>\n> I previously worked at Grab where I led the Grab for Work project. Grab for Work was a service for companies to make corporate transportation expenses convenient. Companies can create employee groups, set ride policies and share corporate payment methods with their employees. I built the project with another engineer over the period of 3 months on a React/Redux and Golang stack.\"\n>\n> I'm interested in the Front End Engineer role at Lyft because I like working in this ridesharing space and creating products for users to improve their life.\n\n#### Breakdown\n\n- \"I love to create beautiful performant products with delightful user experiences.\"\n  - Same as above, qualities that a Front End engineer should possess.\n- \"I previously worked at Grab where I led the Grab for Work project.\"\n  - Lyft is Grab's sister company! In fact they even had a partnership in the past. Most Lyft engineers would have heard of Grab before and mentioning this catches their attention.\n- \"I built the project with another engineer over the period of 4 months on a React/Redux and Golang stack.\"\n  - Acknowledge that you work with others. Building a non-trivial system with just 2 people in 3 months is quite good for a non-trivial system. Lyft also uses Golang for their high performance systems.\n","filetype":".md","index":21},{"title":"Star Format","category":"_contents","id":"star-format__contents","algorithm":"---\nid: star-format\ntitle: STAR Format\n---\n\n## What is STAR?\n\nThe [STAR](https://en.wikipedia.org/wiki/Situation,_task,_action,_result) format is a framework to help you organize your experience into sections that flows nicely. From Wikipedia:\n\n- **Situation** - The interviewer wants you to present a recent challenge and situation which you found yourself in\n- **Task** - What were you required to achieve? The interviewer will be looking to see what you were trying to achieve from the situation. Some performance development methods use \"Target\" rather than \"Task\". Job interview candidates who describe a \"Target\" they set themselves instead of an externally imposed \"Task\" emphasize their own intrinsic motivation to perform and to develop their performance\n- **Action** - What did you do? The interviewer will be looking for information on what you did, why you did it and what the alternatives were\n- **Results** - What was the outcome of your actions? What did you achieve through your actions and did you meet your objectives? What did you learn from this experience and have you used this learning since?\n\n## Example\n\nHere's an example of how the STAR format can be used to answer the question: **\"Tell me about a time in which you had a conflict and needed to influence somebody else\"**.\n\n#### Situation\n\n> \"I was the team lead of a school project about building a social network mobile web app. Our designer's mid-terms were approaching and didn't have time to produce the mockups. Our front end person was rushing him for the mockups so that he could proceed with his work and that was stressing the designer out. The atmosphere in the team was tense.\"\n\n#### Task\n\n> \"As the team lead, I had to resolve the tension between the front end developer and the designer so that the team could work together peacefully and complete the project on time.\"\n\n#### Action\n\n> \"I spoke to the front end developer to ask him why he was rushing the designer for the designs. He said that he wanted the designs early because it would be a waste of time rebuilding if the designer designed something different eventually. I explained to him that the mid-term dates were out of the designer's control and we had to be more understanding about each others' schedules.\n>\n> I spoke to the designer to get a rough idea of what he had in mind and asked him when he could commit to producing the high fidelity designs. He replied that he could start on them as soon as his mid-terms were over. I explained to him why the front end developer was pushing him for the mockups and that the front end developer had no ill intentions and simply wanted the project to succeed.\n>\n> As someone with some experience in UI/UX design, I came up with wireframe mocks, ran them by the designer for approval, then passed them to the front end developer to start building. I encouraged the front end developer to use placeholders and not be too concerned about the details for now. We could build the non-UI parts first (authentication, hook up with APIs) and tweak pixels and add polish later on. The front end developer agreed and went ahead with the approach. I explained to the front end developer that the designer will pass us the mockups after his mid-term, by &lt;DATE&gt;.\"\n\n#### Result\n\n> \"When our designer ended mid-terms, he came back with beautiful mockups that fit well into the wireframes. Our front end developer implemented them with great care to detail. We ended up scoring top marks for the project and became a great team.\"\n\n#### Qualities\n\nThrough the above, experienced interviewers can extract the following qualities from the mentioned behaviors.\n\n- **Empathy** - Empathize with both roles and made sure to understand each individuals‚Äô reasons\n- **Willingness** - to wear multiple hats: Picked up the role of the designer and came up with wireframes\n- **Project management** - Able to unblock the project by changing approaches midway to great effectiveness\n- **Conflict management** - Explain to parties involved in conflict and make sure no hard feelings remain\n- **Hold people accountable** - Get a confirmation date as to when the designer can produce the mockups and hold him accountable\n","filetype":".md","index":22},{"title":"Study And Practice","category":"_contents","id":"study-and-practice__contents","algorithm":"---\nid: study-and-practice\ntitle: Study and Practice\n---\n\n## Recap CS fundamentals\n\nIf you have been out of college for a while, it is highly advisable to review CS fundamentals‚Ää‚Äî‚ÄäAlgorithms and Data Structures. Personally, I prefer to review as I practice, so I scan through my college notes and review the various algorithms as I work on algorithm problems from LeetCode and Cracking the Coding Interview.\n\nThis [interviews repository](https://github.com/kdn251/interviews) by Kevin Naughton Jr. served as a quick refresher for me.\n\nThe Medium publication [basecs](https://medium.com/basecs) by [Vaidehi Joshi](https://medium.com/@vaidehijoshi) is also a great and light-hearted resource to recap on the various data structures and algorithms.\n\nYou can also find implementations of common data structures and algorithms using various popular languages at [TheAlgorithms](https://thealgorithms.github.io/).\n\n## Mastery through practice\n\nNext, gain familiarity and mastery of the algorithms and data structures in your chosen programming language.\n\n### Practice coding questions\n\nPractice coding algorithms using your chosen language. While [Cracking the Coding Interview](http://www.crackingthecodinginterview.com/) is a good resource for practice, I prefer being able to type code, run it and get instant feedback. There are various Online Judges such as [LeetCode](https://leetcode.com/), [HackerRank](https://www.hackerrank.com/) and [CodeForces](http://codeforces.com/) for you to practice questions online and get used to the language. From experience, LeetCode questions are the most similar to the kind of questions being asked in interviews whereas HackerRank and CodeForces questions resemble competitive programming questions. If you practice enough LeetCode questions, there is a good chance that you would have seen/done your actual interview question (or some variant) on LeetCode before. If you are more of a visual person, [Coderust](https://www.educative.io/collection/5642554087309312/5679846214598656) explains the common algorithm questions through step-by-step visualizations which makes understanding the solutions much easier.\n\n### Space/time complexities\n\nLearn and understand the time and space complexities of the common operations in your chosen language. For Python, this [page](https://wiki.python.org/moin/TimeComplexity) will come in handy. Also find out the underlying sorting algorithm that is being used in the language's `sort()` function and its time and space complexity (in Python its Timsort which is a hybrid sort). After completing a question on LeetCode, I usually add the time and space complexities of the written code as comments above the function body to remind myself to analyze the algorithm after I am done with the implementation.\n\n### Practice good coding style\n\nRead up on the recommended coding style for your language and stick to it. If you have chosen Python, refer to the PEP 8 Style Guide. If you have chosen Java, refer to Google's Java Style Guide.\n\n### Internalize the pitfalls\n\nFind out and be familiar with the common pitfalls and caveats of the language. If you point them out during the interview and intelligently avoid falling into them, you will usually impress the interviewer and that results in bonus points for your feedback, regardless of whether the interviewer is familiar with the language or not.\n\n### Broaden exposure\n\nGain a broad exposure to questions from various topics. In the second half of the article I mention algorithm topics and practice questions for each topic. Do around 100‚Äì200 LeetCode questions and you should be good.\n\nPractice, practice and more practice!\n","filetype":".md","index":23},{"title":"Understanding Compensation","category":"_contents","id":"understanding-compensation__contents","algorithm":"---\nid: understanding-compensation\ntitle: Understanding Compensation\n---\n\nCompensation is a huge factor when it comes to deciding between job offers. This section gives you a breakdown of the common components of compensation in the tech industry.\n\nIn most companies, your compensation will consist of base salary, a performance bonus and equity/stocks. For compensation data, check out [Levels.fyi](https://www.levels.fyi).\n\n### Base salary\n\nBase salary is a fixed amount of salary you get for showing up at work and is unaffected by how well the company is performing or the industry is doing. It is the only non-variable component of your compensation.\n\nFresh graduates in the Bay Area can usually expect to get a base salary of above USD 100,000 (before taxes). The salary for fresh graduates at Facebook/Google is known to be in the USD 100,000 - 150,000 range.\n\nStartups usually offer a bit higher for fresh graduate (USD 120,000 - 130,000) to make up for the lack of liquidity of the equity grant (not yet real cash).\n\nBase salary doesn't increase linearly as you become more senior; it will plateau off eventually. As employees become increasingly senior within the company, the higher the proportion of their compensation comes from company-dependent factors such as bonus and equity. This is because senior employees are expected to influence the people around them and drive the company forward. A senior employee's performance will be based on how well the company does as a whole; the individual factor will not be as much.\n\nThere are some exceptions to the system. Companies like Netflix pay top in the industry (sometimes even more than Facebook/Google) and give employees the option to receive their entire compensation as base salary, that is, to convert the equity component into their base. For the risk-adverse, this is a great choice.\n\n### Bonus\n\nBonuses are usually paid on a semi-annual basis and are typically dependent on a few factors - level of seniority, individual performance in that time period, company performance in that time period.\n\n- **Level of seniority** - This is usually a multiplier of the base salary, and the multiplier increases as the employee moves up the ranks\n- **Individual performance** - This is a multiplier of how well an employee performed in that time period. E.g. meeting expectations results in a 100% multiplier and exceeding expectations results in a >100% multiplier. Companies like Facebook and Apple reward their top performers handsomely, and the multiplier can go up to 300% for the extremely high-performing employees\n- **Company performance** - How well the company is doing. This multiplier will be the same for all employees\n\n#### Examples\n\n- Bob is a Software Engineer fresh out of college. His base salary is 100,000, is a fresh grad (seniority multiplier: 10%), crushed expectations for the half (individual performance multiplier: 200%) and his company did pretty well (company performance multiplier: 120%). For that half, his bonus will be as follows:\n\n  - **Bonus:** 100,000 x 50% (half a year) x 10% (seniority) x 200% (individual performance) x 120% (company performance) = 12000\n\n- Alice is an Engineering Manager with 10 years of professional experience. Her base salary is 220,000, is an experienced engineering manager (seniority multiplier: 20%), exceeded expectations for the half (individual performance multiplier: 150%) and her company did pretty awesome (company performance multiplier: 130%). For that half, her bonus will be as follows:\n\n  - **Bonus:** 220,000 x 50% (half a year) x 20% (seniority) x 150% (individual performance) x 130% (company performance) = 42900\n\nHence the amount of bonus you receive can be highly variable and senior employees get a higher proportion of their compensation from bonuses.\n\n### Equity/Stocks\n\nEquity is what differentiates a tech job from a non-tech one. Equity means a share of the company; this signifies ownership and motivates employees to work in the best interests of the company. They can be a significant portion of one's compensation, sometimes even more than the base salary, especially for senior employees.\n\nEquity usually vests (becomes available to you) over a period of time (typically 4 years) and can vest equally every month/quarter/year. A vesting cliff means the minimum period of time before your vesting begins. For example, if you are granted 4,800 shares over a 4 year schedule with a 1 year cliff, and monthly vesting, you will get 1,200 shares at the end of your first year and 100 shares every month thereafter for the subsequent 3 years.\n\nUntil the company goes public (IPO) or gets acquired, the equity is usually not worth anything. However, there are instances where you can sell your stocks internally even though the company hasn't gone public. Be mindful of what you are getting yourself into!\n\nNot all equity is treated equally. Depending on the company you join and which stage that company is at, you may receive one of the following types: stock options or stock grants.\n\n#### Stock options\n\nStock options are typically given by mid-stage companies. Stock options are different from stocks, which represents the immediate ownership of a company! Stock options are the **option/right** to purchase stocks at a given strike price, hence it's not free. However, the cost of each stock is usually quite low and fixed at a strike price, which is equal to the fair market value of the stock when it was granted to you. You are guaranteed to be able to purchase the stock at that price regardless of future increases.\n\nWhen you leave a company, there is an exercise window (deadline given for you to exercise your options before they are gone), so it is important to have enough liquid cash to purchase them when planning a departure.\n\n#### Stock grants\n\nA stock grant is commonly referred to as a Restricted Stock Unit (RSU) and it means you possess the stock immediately. If the company is public, you can sell them during defined trading windows.\n\nMore reading on the topic can be done [here](https://gist.github.com/yossorion/4965df74fd6da6cdc280ec57e83a202d).\n\n### Signing bonus\n\nThis is a one-time lump sum that is paid to you when you join a company. This amount is typically in the range of USD 10,000 to USD 20,000 but can even go up to USD 50,000 (Google) and USD 100,000 (Facebook).\n\nThere can be conditions attached to signing bonuses, such as having to return a pro-rated amount if an employee leaves before the one-year mark. Make sure you are aware of them before you sign the offer.\n\n### Misc bonuses/perks\n\nWhile these perks are not exactly cash, they can help you save money which is almost equivalent to getting compensated more. Do find out more about these from your recruiters if you get the chance.\n\n- Free meals - Food is not exactly cheap in the Bay Area and having some meals provided on weekdays can result in saving few thousand dollars a year\n- Relocation bonus - Helpful if you are moving from abroad, and this can partially offset costs due to relocating\n- Health and dental insurance/plans - Companies often partner with insurance companies to provide employees with health and dental plans. These can amount to a few thousand dollars worth annually and is especially useful in locations where healthcare is expensive\n- Shuttle service - Public transportation in the Bay Area is not that great and the most common form of commute is driving. Being able to take a shuttle service helps in saving money on gas, transport, and freeing up your mind to do other things during the commute\n","filetype":".md","index":24},{"title":"Algorithms","category":null,"id":"algorithms","index":25},{"title":"Array","category":"algorithms","id":"array_algorithms","algorithm":"---\nid: array\ntitle: Array\n---\n\n## Notes\n\nIs the array sorted or partially sorted? If it is, some form of binary search should be possible. This also usually means that the interviewer is looking for a solution that is faster than O(n).\n\nCan you sort the array? Sometimes sorting the array first may significantly simplify the problem. Make sure that the order of array elements do not need to be preserved before attempting a sort.\n\nFor questions where summation or multiplication of a subarray is involved, pre-computation using hashing or a prefix/suffix sum/product might be useful.\n\nIf you are given a sequence and the interviewer asks for O(1) space, it might be possible to use the array itself as a hash table. For example, if the array only has values from 1 to N, where N is the length of the array, negate the value at that index (minus one) to indicate presence of that number.\n\nAlso O(n) doesn't mean you can only traverse the array once. Sometimes traversing the array more than once can help you solve the problem easily.\n\n## Arrays are sequences\n\nAre there duplicate values in the array, would it affect the answer?\n\nWhen using an index to iterate through array elements, be careful not to go out of bounds.\n\nBe mindful about slicing or concatenating arrays in your code. Typically, slicing and concatenating arrays require O(n) time. Use start and end indices to demarcate a subarray/range where possible.\n\nSometimes you can traverse the array from the right rather than from the left.\n\nMaster the [sliding window technique](https://discuss.leetcode.com/topic/30941/here-is-a-10-line-template-that-can-solve-most-substring-problems) that applies to many subarray problems.\n\nWhen you are given two arrays to process, it is common to have one index per array (pointer) to traverse/compare the both of them. For example, we use the same approach to merge two sorted arrays.\n\n## Corner cases\n\n- Empty sequence\n- Sequence with 1 or 2 elements\n- Sequence with repeated elements\n\n## Recommended LeetCode questions\n\n- [Two Sum](https://leetcode.com/problems/two-sum/)\n- [Best Time to Buy and Sell Stock](https://leetcode.com/problems/best-time-to-buy-and-sell-stock/)\n- [Contains Duplicate](https://leetcode.com/problems/contains-duplicate/)\n- [Product of Array Except Self](https://leetcode.com/problems/product-of-array-except-self/)\n- [Maximum Subarray](https://leetcode.com/problems/maximum-subarray/)\n- [Maximum Product Subarray](https://leetcode.com/problems/maximum-product-subarray/)\n- [Find Minimum in Rotated Sorted Array](https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/)\n- [Search in Rotated Sorted Array](https://leetcode.com/problems/search-in-rotated-sorted-array/)\n- [3Sum](https://leetcode.com/problems/3sum/)\n- [Container With Most Water](https://leetcode.com/problems/container-with-most-water/)\n","filetype":".md","index":26},{"title":"Binary","category":"algorithms","id":"binary_algorithms","algorithm":"---\nid: binary\ntitle: Binary\n---\n\n## Study links\n\n- [Bits, Bytes, Building With Binary](https://medium.com/basecs/bits-bytes-building-with-binary-13cb4289aafa)\n\n## Notes\n\nQuestions involving binary representations and bitwise operations are asked sometimes and you must be absolutely familiar with how to convert a number from decimal form into binary form (and vice versa) in your chosen programming language.\n\nSome helpful utility snippets:\n\n- Test k<sup>th</sup> bit is set: `num & (1 << k) != 0`.\n- Set k<sup>th</sup> bit: `num |= (1 << k)`.\n- Turn off k<sup>th</sup> bit: `num &= ~(1 << k)`.\n- Toggle the k<sup>th</sup> bit: `num ^= (1 << k)`.\n- To check if a number is a power of 2, `(num & num - 1) == 0` or `(num & (-num)) == num`.\n\n## Corner cases\n\n- Be aware and check for overflow/underflow\n- Negative numbers\n\n## Recommended LeetCode questions\n\n- [Sum of Two Integers](https://leetcode.com/problems/sum-of-two-integers/)\n- [Number of 1 Bits](https://leetcode.com/problems/number-of-1-bits/)\n- [Counting Bits](https://leetcode.com/problems/counting-bits/)\n- [Missing Number](https://leetcode.com/problems/missing-number/)\n- [Reverse Bits](https://leetcode.com/problems/reverse-bits/)\n","filetype":".md","index":27},{"title":"Dynamic Programming","category":"algorithms","id":"dynamic-programming_algorithms","algorithm":"---\nid: dynamic-programming\ntitle: Dynamic Programming\n---\n\n## Study links\n\n- [Demystifying Dynamic Programming](https://medium.freecodecamp.org/demystifying-dynamic-programming-3efafb8d4296)\n- [Dynamic Programming ‚Äì 7 Steps to Solve any DP Interview Problem](https://dev.to/nikolaotasevic/dynamic-programming--7-steps-to-solve-any-dp-interview-problem-3870)\n\n## Notes\n\nDynamic Programming (DP) is usually used to solve optimization problems. The only way to get better at DP is to practice. It takes some amount of practice to be able to recognize that a problem can be solved by DP.\n\nSometimes you do not need to store the whole DP table in memory, the last two values or the last two rows of the matrix will suffice.\n\n## Recommended LeetCode questions\n\n- 0/1 Knapsack\n- [Climbing Stairs](https://leetcode.com/problems/climbing-stairs/)\n- [Coin Change](https://leetcode.com/problems/coin-change/)\n- [Longest Increasing Subsequence](https://leetcode.com/problems/longest-increasing-subsequence/)\n- [Longest Common Subsequence](https://leetcode.com/problems/longest-common-subsequence/)\n- [Word Break Problem](https://leetcode.com/problems/word-break/)\n- [Combination Sum](https://leetcode.com/problems/combination-sum-iv/)\n- [House Robber](https://leetcode.com/problems/house-robber/) and [House Robber II](https://leetcode.com/problems/house-robber-ii/)\n- [Decode Ways](https://leetcode.com/problems/decode-ways/)\n- [Unique Paths](https://leetcode.com/problems/unique-paths/)\n- [Jump Game](https://leetcode.com/problems/jump-game/)\n","filetype":".md","index":28},{"title":"Geometry","category":"algorithms","id":"geometry_algorithms","algorithm":"---\nid: geometry\ntitle: Geometry\n---\n\n## Notes\n\nWhen comparing euclidean distance between two pairs of points, using dx<sup>2</sup> + dy<sup>2</sup> is sufficient. It is unnecessary to square root the value.\n\nTo find out if two circles overlap, check that the distance between the two centers of the circles is less than the sum of their radii.\n\n## Sample questions\n\n- You have a plane with lots of rectangles on it, find out how many of them intersect.\n- Which data structure would you use to query the k-nearest points of a set on a 2D plane?\n- Given many points, find k points that are closest to the origin.\n- How would you triangulate a polygon?\n","filetype":".md","index":29},{"title":"Graph","category":"algorithms","id":"graph_algorithms","algorithm":"---\nid: graph\ntitle: Graph\n---\n\n## Study links\n\n- [From Theory To Practice: Representing Graphs](https://medium.com/basecs/from-theory-to-practice-representing-graphs-cfd782c5be38)\n- [Deep Dive Through A Graph: DFS Traversal](https://medium.com/basecs/deep-dive-through-a-graph-dfs-traversal-8177df5d0f13)\n- [Going Broad In A Graph: BFS Traversal](https://medium.com/basecs/going-broad-in-a-graph-bfs-traversal-959bd1a09255)\n\n## Notes\n\nBe familiar with the various graph representations, graph search algorithms and their time and space complexities.\n\nYou can be given a list of edges and tasked to build your own graph from the edges to perform a traversal on. The common graph representations are:\n\n- Adjacency matrix.\n- Adjacency list.\n- Hashmap of hashmaps.\n\nA tree-like diagram could very well be a graph that allows for cycles and a naive recursive solution would not work. In that case you will have to handle cycles and keep a set of visited nodes when traversing.\n\n## Graph search algorithms\n\n- **Common** - Breadth-first Search, Depth-first Search\n- **Uncommon** - Topological Sort, Dijkstra's algorithm\n- **Rare** - Bellman-Ford algorithm, Floyd-Warshall algorithm, Prim's algorithm, Kruskal's algorithm\n\nIn coding interviews, graphs are commonly represented as 2-D matrices where cells are the nodes and each cell can traverse to its adjacent cells (up/down/left/right). Hence it is important that you be familiar with traversing a 2-D matrix. When traversing the matrix, always ensure that your current position is within the boundary of the matrix and has not been visited before.\n\nA simple template for doing depth-first searches on a matrix goes like this:\n\n```py\ndef dfs(matrix):\n  # Check for an empty graph.\n  if not matrix:\n    return []\n\n  rows, cols = len(matrix), len(matrix[0])\n  visited = set()\n  directions = ((0, 1), (0, -1), (1, 0), (-1, 0))\n\n  def traverse(i, j):\n    if (i, j) in visited:\n      return\n\n    visited.add((i, j))\n    # Traverse neighbors.\n    for direction in directions:\n      next_i, next_j = i + direction[0], j + direction[1]\n      if 0 <= next_i < rows and 0 <= next_j < cols:\n        # Add in your question-specific checks.\n        traverse(next_i, next_j)\n\n  for i in range(rows):\n    for j in range(cols):\n      traverse(i, j)\n```\n\nA similar template for doing breadth-first searches on the matrix goes like this:\n\n```py\nfrom collections import deque\n\ndef bfs(matrix):\n  # Check for an empty graph.\n  if not matrix:\n    return []\n\n  rows, cols = len(matrix), len(matrix[0])\n  visited = set()\n  directions = ((0, 1), (0, -1), (1, 0), (-1, 0))\n\n  def traverse(i, j):\n    queue = deque([(i, j)])\n    while queue:\n      curr_i, curr_j = queue.popleft()\n      if (curr_i, curr_j) not in visited:\n        visited.add((curr_i, curr_j))\n        # Traverse neighbors.\n        for direction in directions:\n          next_i, next_j = curr_i + direction[0], curr_j + direction[1]\n          if 0 <= next_i < rows and 0 <= next_j < cols:\n            # Add in your question-specific checks.\n            queue.append((next_i, next_j))\n\n  for i in range(rows):\n    for j in range(cols):\n      traverse(i, j)\n```\n\n:::note\n\nWhile DFS is implemented using recursion in this sample, it could also be implemented iteratively similar to BFS. The key difference between the algorithms lies in the underlying data structure (BFS uses a queue while DFS uses a stack). The `deque` class in Python can function as both a stack and a queue\n\n:::\n\nFor additional tips on BFS and DFS, you can refer to this [LeetCode post](https://leetcode.com/problems/pacific-atlantic-water-flow/discuss/90774/Python-solution-with-detailed-explanation)\n\n## Corner cases\n\n- Empty graph\n- Graph with one or two nodes\n- Disjoint graphs\n- Graph with cycles\n\n## Recommended LeetCode questions\n\n- [Clone Graph](https://leetcode.com/problems/clone-graph/)\n- [Course Schedule](https://leetcode.com/problems/course-schedule/)\n- [Pacific Atlantic Water Flow](https://leetcode.com/problems/pacific-atlantic-water-flow/)\n- [Number of Islands](https://leetcode.com/problems/number-of-islands/)\n- [Longest Consecutive Sequence](https://leetcode.com/problems/longest-consecutive-sequence/)\n- [Alien Dictionary (LeetCode Premium)](https://leetcode.com/problems/alien-dictionary/)\n- [Graph Valid Tree (LeetCode Premium)](https://leetcode.com/problems/graph-valid-tree/)\n- [Number of Connected Components in an Undirected Graph (LeetCode Premium)](https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph/)\n","filetype":".md","index":30},{"title":"Hash Table","category":"algorithms","id":"hash-table_algorithms","algorithm":"---\nid: hash-table\ntitle: Hash Table\n---\n\n## Sample questions\n\n- Describe an implementation of a least-used cache, and big-O notation of it.\n- A question involving an API's integration with hash map where the buckets of hash map are made up of linked lists.\n- Implement data structure `Map` storing pairs of integers (key, value) and define following member functions in O(1) runtime: `void insert(key, value)`, `void delete(key)`, `int get(key)`, `int getRandomKey()`. [(Solution)](http://blog.gainlo.co/index.php/2016/08/14/uber-interview-question-map-implementation/)\n","filetype":".md","index":31},{"title":"Heap","category":"algorithms","id":"heap_algorithms","algorithm":"---\nid: heap\ntitle: Heap\n---\n\n## Study links\n\n- [Learning to Love Heaps](https://medium.com/basecs/learning-to-love-heaps-cef2b273a238)\n\n## Notes\n\nIf you see a top or lowest _k_ being mentioned in the question, it is usually a signal that a heap can be used to solve the problem, such as in [Top K Frequent Elements](https://leetcode.com/problems/top-k-frequent-elements/).\n\nIf you require the top _k_ elements use a Min Heap of size _k_. Iterate through each element, pushing it into the heap. Whenever the heap size exceeds _k_, remove the minimum element, that will guarantee that you have the _k_ largest elements.\n\n## Recommended LeetCode questions\n\n- [Merge K Sorted Lists](https://leetcode.com/problems/merge-k-sorted-lists/)\n- [Top K Frequent Elements](https://leetcode.com/problems/top-k-frequent-elements/)\n- [Find Median from Data Stream](https://leetcode.com/problems/find-median-from-data-stream/)\n","filetype":".md","index":32},{"title":"Interval","category":"algorithms","id":"interval_algorithms","algorithm":"---\nid: interval\ntitle: Interval\n---\n\n## Notes\n\nInterval questions are questions where you are given an array of two-element arrays (an interval) and the two values represent a start and an end value. Interval questions are considered part of the array family but they involve some common techniques hence they are extracted out to this special section of their own.\n\nAn example interval array: `[[1, 2], [4, 7]]`.\n\nInterval questions can be tricky to those who have not tried them before because of the sheer number of cases to consider when they overlap.\n\nDo clarify with the interviewer whether `[1, 2]` and `[2, 3]` are considered overlapping intervals as it affects how you will write your equality checks.\n\nA common routine for interval questions is to sort the array of intervals by each interval's starting value.\n\nBe familiar with writing code to check if two intervals overlap and merging two overlapping intervals:\n\n```py\ndef is_overlap(a, b):\n  return a[0] < b[1] and b[0] < a[1]\n\ndef merge_overlapping_intervals(a, b):\n  return [min(a[0], b[0]), max(a[1], b[1])]\n```\n\n## Corner cases\n\n- Single interval\n- Non-overlapping intervals\n- An interval totally consumed within another interval\n- Duplicate intervals\n\n## Recommended LeetCode questions\n\n- [Insert Interval](https://leetcode.com/problems/insert-interval/)\n- [Merge Intervals](https://leetcode.com/problems/merge-intervals/)\n- [Non-overlapping Intervals](https://leetcode.com/problems/non-overlapping-intervals/)\n- [Meeting Rooms (LeetCode Premium)](https://leetcode.com/problems/meeting-rooms/) and [Meeting Rooms II (LeetCode Premium)](https://leetcode.com/problems/meeting-rooms-ii/)\n","filetype":".md","index":33},{"title":"Introduction","category":"algorithms","id":"introduction_algorithms","algorithm":"---\nid: algorithms-introduction\ntitle: Introduction\n---\n\nThis section dives deep into practical tips for specific topics of algorithms and data structures which appear frequently in coding questions. Many algorithm questions involve techniques that can be applied to questions of similar nature. The more techniques you have in your arsenal, the higher the chances of passing the interview. They may lead you to discover corner cases you might have missed out or even lead you towards the optimal approach!\n\nFor each topic, study links are recommended to help you master the topic. There is a list of recommended common questions to practice which in my opinion is highly valuable for mastering the core concepts for the topic.\n\nIf you are interested in how data structures are implemented, check out [Lago](https://github.com/yangshun/lago), a Data Structures and Algorithms library for JavaScript. It is pretty much still WIP but I intend to make it into a library that is able to be used in production and also a reference resource for revising Data Structures and Algorithms.\n\n## General tips\n\nClarify any assumptions you made subconsciously. Many questions are under-specified on purpose.\n\nAlways validate input first. Check for invalid/empty/negative/different type input. Never assume you are given the valid parameters. Alternatively, clarify with the interviewer whether you can assume valid input (usually yes), which can save you time from writing code that does input validation.\n\nAre there any time/space complexity requirements/constraints?\n\nCheck for off-by-one errors.\n\nIn languages where there are no automatic type coercion, check that concatenation of values are of the same type: `int`/`str`/`list`.\n\nAfter finishing your code, use a few example inputs to test your solution.\n\nIs the algorithm meant to be run multiple times, for example in a web server? If yes, the input is likely to be preprocess-able to improve the efficiency in each call.\n\nUse a mix of functional and imperative programming paradigms:\n\n- Write pure functions as much as possible.\n- Pure functions are easier to reason about and can help to reduce bugs in your implementation.\n- Avoid mutating the parameters passed into your function especially if they are passed by reference unless you are sure of what you are doing.\n- However, functional programming is usually expensive in terms of space complexity because of non-mutation and the repeated allocation of new objects. On the other hand, imperative code is faster because you operate on existing objects. Hence you will need to achieve a balance between accuracy vs efficiency, by using the right amount of functional and imperative code where appropriate.\n- Avoid relying on and mutating global variables. Global variables introduce state.\n- If you have to rely on global variables, make sure that you do not mutate it by accident.\n\nGenerally, to improve the speed of a program, we can either: (1) choose a more appropriate data structure/algorithm; or (2) use more memory. The latter demonstrates a classic space vs. time tradeoff, but it is not necessarily the case that you can only achieve better speed at the expense of space. Also, note that there is often a theoretical limit to how fast your program can run (in terms of time complexity). For instance, a question that requires you to find the smallest/largest element in an unsorted array cannot run faster than O(N).\n\nData structures are your weapons. Choosing the right weapon for the right battle is the key to victory. Be very familiar about the strengths of each data structure and the time complexities for its various operations.\n\nData structures can be augmented to achieve efficient time complexities across different operations. For example, a hash map can be used together with a doubly-linked list to achieve O(1) time complexity for both the `get` and `put` operation in an [LRU cache](https://leetcode.com/problems/lru-cache/).\n\nHashmaps are probably the most commonly used data structure for algorithm questions. If you are stuck on a question, your last resort can be to enumerate through the common possible data structures (thankfully there aren't that many of them) and consider whether each of them can be applied to the problem. This has worked for me sometimes.\n\nIf you are cutting corners in your code, state that out loud to your interviewer and say what you would do in a non-interview setting (no time constraints). E.g., I would write a regex to parse this string rather than using `split()` which may not cover all cases.\n\n###### References\n\n- http://blog.triplebyte.com/how-to-pass-a-programming-interview\n- https://quip.com/q41AA3OmoZbC\n- http://www.geeksforgeeks.org/must-do-coding-questions-for-companies-like-amazon-microsoft-adobe/\n- https://medium.com/basecs\n","filetype":".md","index":34},{"title":"Linked List","category":"algorithms","id":"linked-list_algorithms","algorithm":"---\nid: linked-list\ntitle: Linked List\n---\n\n## Notes\n\nLike arrays, linked lists are used to represent sequential data. The benefit of linked lists is that insertion and deletion of a node in the list (given its location) is O(1) whereas in arrays the following elements will have to be shifted.\n\nAdding a dummy node at the head and/or tail might help to handle many edge cases where operations have to be performed at the head or the tail. The presence of dummy nodes essentially ensures that operations will never have be done on the head or the tail, thereby removing a lot of headache in writing conditional checks to dealing with null pointers. Be sure to remember to remove them at the end of the operation.\n\nSometimes linked lists problem can be solved without additional storage. Try to borrow ideas from reverse a linked list problem.\n\nFor deletion in linked lists, you can either modify the node values or change the node pointers. You might need to keep a reference to the previous element.\n\nFor partitioning linked lists, create two separate linked lists and join them back together.\n\nLinked lists problems share similarity with array problems, think about how you would do it for an array and try to apply it to a linked list.\n\nTwo pointer approaches are also common for linked lists. For example:\n\n- Getting the k<sup>th</sup> from last node - Have two pointers, where one is k nodes ahead of the other. When the node ahead reaches the end, the other node is k nodes behind\n- Detecting cycles - Have two pointers, where one pointer increments twice as much as the other, if the two pointers meet, means that there is a cycle\n- Getting the middle node - Have two pointers, where one pointer increments twice as much as the other. When the faster node reaches the end of the list, the slower node will be at the middle\n\n## Common Routines\n\nBe familiar with the following routines because many linked list questions make use of one or more of these routines in the solution:\n\n- Counting the number of nodes in the linked list\n- Reversing a linked list in-place\n- Finding the middle node of the linked list using fast/slow pointers\n- Merging two lists together\n\n## Corner cases\n\n- Single node\n- Two nodes\n- Linked list has cycle. **Tip:** Clarify with the interviewer whether there can be a cycle in the list. Usually the answer is no\n\n## Recommended LeetCode questions\n\n- [Reverse a Linked List](https://leetcode.com/problems/reverse-linked-list/)\n- [Detect Cycle in a Linked List](https://leetcode.com/problems/linked-list-cycle/)\n- [Merge Two Sorted Lists](https://leetcode.com/problems/merge-two-sorted-lists/)\n- [Merge K Sorted Lists](https://leetcode.com/problems/merge-k-sorted-lists/)\n- [Remove Nth Node From End Of List](https://leetcode.com/problems/remove-nth-node-from-end-of-list/)\n- [Reorder List](https://leetcode.com/problems/reorder-list/)\n","filetype":".md","index":35},{"title":"Math","category":"algorithms","id":"math_algorithms","algorithm":"---\nid: math\ntitle: Math\n---\n\n## Notes\n\nIf code involves division or modulo, remember to check for division or modulo by 0 case.\n\nWhen a question involves \"a multiple of a number\", perhaps modulo might be useful.\n\nCheck for and handle overflow/underflow if you are using a typed language like Java and C++. At the very least, mention that overflow/underflow is possible and ask whether you need to handle it.\n\nConsider negative numbers and floating point numbers. This may sound obvious, but under interview pressure, many obvious cases go unnoticed.\n\nIf the question asks to implement an operator such as power, squareroot or division and want it to be faster than O(n), binary search is usually the approach to go.\n\n#### Some common formulas:\n\n- Sum of 1 to N = (n+1) \\* n/2\n- Sum of GP = 2<sup>0</sup> + 2<sup>1</sup> + 2<sup>2</sup> + 2<sup>3</sup> + ... 2<sup>n</sup> = 2<sup>n+1</sup> - 1\n- Permutations of N = N! / (N-K)!\n- Combinations of N = N! / (K! \\* (N-K)!)\n\n## Recommended LeetCode questions\n\n- [Pow(x, n)](https://leetcode.com/problems/powx-n/)\n- [Sqrt(x)](https://leetcode.com/problems/sqrtx/)\n- [Integer to English Words](https://leetcode.com/problems/integer-to-english-words/)\n","filetype":".md","index":36},{"title":"Matrix","category":"algorithms","id":"matrix_algorithms","algorithm":"---\nid: matrix\ntitle: Matrix\n---\n\n## Notes\n\nA matrix is a 2-dimensional array. Questions involving matrices are usually related to dynamic programming or graph traversal.\n\nFor questions involving traversal or dynamic programming, you almost always want to make a copy of the matrix with the same dimensions that is initialized to empty values to store the visited state or dynamic programming table. Be familiar with such a routine:\n\n```py\nrows, cols = len(matrix), len(matrix[0])\ncopy = [[0 for _ in range(cols)] for _ in range(rows)]\n```\n\nMany grid-based games can be modeled as a matrix, such as Tic-Tac-Toe, Sudoku, Crossword, Connect 4, Battleship, etc. It is not uncommon to be asked to verify the winning condition of the game. For games like Tic-Tac-Toe, Connect 4 and Crosswords, where verification has to be done vertically and horizontally, one trick is to write code to verify the matrix for the horizontal cells, transpose the matrix and reuse the logic for horizontal verification to verify originally vertical cells (which are now horizontal).\n\nTransposing a matrix in Python is simply:\n\n```py\ntransposed_matrix = zip(*matrix)\n```\n\n## Corner cases\n\n- Empty matrix. Check that none of the arrays are 0 length\n- 1 x 1 matrix\n- Matrix with only one row or column\n\n## Recommended LeetCode questions\n\n- [Set Matrix Zeroes](https://leetcode.com/problems/set-matrix-zeroes/)\n- [Spiral Matrix](https://leetcode.com/problems/spiral-matrix/)\n- [Rotate Image](https://leetcode.com/problems/rotate-image/)\n- [Word Search](https://leetcode.com/problems/word-search/)\n","filetype":".md","index":37},{"title":"Oop","category":"algorithms","id":"oop_algorithms","algorithm":"---\nid: oop\ntitle: Object-Oriented Programming\n---\n\n## Sample questions\n\n- How would you design a chess game? What classes and objects would you use? What methods would they have?\n- How would you design the data structures for a book keeping system for a library?\n- Explain how you would design a HTTP server? Give examples of classes, methods, and interfaces. What are the challenges here?\n- Discuss algorithms and data structures for a garbage collector?\n- How would you implement an HR system to keep track of employee salaries and benefits?\n- How would you implement an Elevator system?\n","filetype":".md","index":38},{"title":"Permutation","category":"algorithms","id":"permutation_algorithms","algorithm":"---\nid: permutation\ntitle: Permutation\n---\n\n## Sample questions\n\n- You are given a 7 digit phone number, and you should find all possible letter combinations based on the digit-to-letter mapping on numeric pad and return only the ones that have valid match against a given dictionary of words.\n- Give all possible letter combinations from a phone number.\n- Generate all subsets of a string.\n- Print all possible `N` pairs of balanced parentheses.\n  - E.g. when `N` is `2`, the function should print `(())` and `()()`.\n  - E.g. when `N` is `3`, we should get `((()))`, `(()())`, `(())()`, `()(())`, `()()()`.\n  - [Source](http://blog.gainlo.co/index.php/2016/12/23/uber-interview-questions-permutations-parentheses/)\n- Given a list of arrays, return a list of arrays, where each array is a combination of one element in each given array.\n  - E.g. If the input is `[[1, 2, 3], [4], [5, 6]]`, the output should be `[[1, 4, 5], [1, 4, 6], [2, 4, 5], [2, 4, 6], [3, 4, 5], [3, 4, 6]]`.\n","filetype":".md","index":39},{"title":"Queue","category":"algorithms","id":"queue_algorithms","algorithm":"---\nid: queue\ntitle: Queue\n---\n\n## Sample questions\n\n- Implement a Queue class from scratch with an existing bug, the bug is that it cannot take more than 5 elements.\n- Implement a Queue using two stacks. You may only use the standard `push()`, `pop()`, and `peek()` operations traditionally available to stacks. You do not need to implement the stack yourself (i.e. an array can be used to simulate a stack).\n","filetype":".md","index":40},{"title":"Recursion","category":"algorithms","id":"recursion_algorithms","algorithm":"---\nid: recursion\ntitle: Recursion\n---\n\n## Notes\n\nRecursion is useful for permutation, because it generates all combinations and tree-based questions. You should know how to generate all permutations of a sequence as well as how to handle duplicates.\n\nRemember to always define a base case so that your recursion will end.\n\nRecursion implicitly uses a stack. Hence all recursive approaches can be rewritten iteratively using a stack. Beware of cases where the recursion level goes too deep and causes a stack overflow (the default limit in Python is 1000). You may get bonus points for pointing this out to the interviewer. Recursion will never be O(1) space complexity because a stack is involved, unless there is [tail-call optimization](https://stackoverflow.com/questions/310974/what-is-tail-call-optimization) (TCO). Find out if your chosen language supports TCO.\n\n## Recommended LeetCode questions\n\n- [Subsets](https://leetcode.com/problems/subsets/) and [Subsets II](https://leetcode.com/problems/subsets-ii/)\n- [Strobogrammatic Number II (LeetCode Premium)](https://leetcode.com/problems/strobogrammatic-number-ii/)\n","filetype":".md","index":41},{"title":"Sorting Searching","category":"algorithms","id":"sorting-searching_algorithms","algorithm":"---\nid: sorting-searching\ntitle: Sorting and Searching\n---\n\n## Tips\n\nWhen a given sequence is in a sorted order (be it ascending or descending), using binary search should be one of the first things that come to your mind.\n\n## Sample questions\n\n- Sorting search results on a page given a certain set of criteria.\n- Sort a list of numbers in which each number is at a distance `K` from its actual position.\n- Given an array of integers, sort the array so that all odd indexes are greater than the even indexes.\n- Given users with locations in a list and a logged-in user with locations, find their travel buddies (people who shared more than half of your locations).\n- Search for an element in a sorted and rotated array.\n  - [Source](http://blog.gainlo.co/index.php/2017/01/12/rotated-array-binary-search/)\n- Merge two sorted lists together.\n- Give 3 distinct algorithms to find the K largest values in a list of N items.\n- Find the minimum element in a sorted rotated array in faster than O(n) time.\n- Write a function that takes a number as input and outputs the biggest number with the same set of digits.\n  - [Source](http://blog.gainlo.co/index.php/2017/01/20/arrange-given-numbers-to-form-the-biggest-number-possible/)\n","filetype":".md","index":42},{"title":"Stack","category":"algorithms","id":"stack_algorithms","algorithm":"---\nid: stack\ntitle: Stack\n---\n\n## Sample questions\n\n- Implementation of an interpreter for a small language that does multiplication/addition/etc.\n- Design a `MinStack` data structure that supports a `min()` operation that returns the minimum value in the stack in O(1) time.\n- Write an algorithm to determine if all of the delimiters in an expression are matched and closed.\n  - E.g. `{ac[bb]}`, `[dklf(df(kl))d]{}` and `{[[[]]]}` are matched. But `{3234[fd` and `{df][d}` are not.\n  - [Source](http://blog.gainlo.co/index.php/2016/09/30/uber-interview-question-delimiter-matching/)\n- Sort a stack in ascending order using an additional stack.\n","filetype":".md","index":43},{"title":"String","category":"algorithms","id":"string_algorithms","algorithm":"---\nid: string\ntitle: String\n---\n\n## Tips\n\nAsk about input character set and case sensitivity. Usually the characters are limited to lowercase Latin characters, for example a to z.\n\nWhen you need to compare strings where the order isn‚Äôt important (like anagram), you may consider using a HashMap as a counter. If your language has a built-in Counter class like Python, ask to use that instead.\n\nIf you need to keep a counter of characters, a common mistake is to say that the space complexity required for the counter is O(n). The space required for a counter is O(1) not O(n). This is because the upper bound is the range of characters, which is usually a fixed constant of 26. The input set is just lowercase Latin characters.\n\nCommon data structures for looking up strings efficiently are\n\n- [Trie/Prefix Tree](https://en.wikipedia.org/wiki/Trie)\n- [Suffix Tree](https://en.wikipedia.org/wiki/Suffix_tree)\n\nCommon string algorithms are\n\n- [Rabin Karp](https://en.wikipedia.org/wiki/Rabin%E2%80%93Karp_algorithm) for efficient searching of substring using a rolling hash\n- [KMP](https://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm) for efficient searching of substring\n\n## Strings are sequences\n\nA string is a sequence of characters. Many tips that apply to arrays also apply to strings.\n\nAre there duplicate characters in the string, would it affect the answer?\n\nWhen using an index to iterate through characters, be careful not to go out of bounds.\n\nBe mindful about slicing or concatenating strings in your code. Typically, slicing and concatenating strings require O(n) time. Use start and end indices to demarcate a substring where possible.\n\nSometimes you can traverse the string from the right rather than from the left.\n\nMaster the [sliding window technique](https://discuss.leetcode.com/topic/30941/here-is-a-10-line-template-that-can-solve-most-substring-problems) that applies to many substring problems.\n\nWhen you are given two strings to process, it is common to have one index per string (pointer) to traverse/compare the both of them. For example, we use the same approach to merge two sorted arrays.\n\n## Common question topics\n\nMany string questions fall into one of these buckets.\n\n### Non-repeating Characters\n\n- Use a 26-bit bitmask to indicate which lower case latin characters are inside the string.\n\n```py\nmask = 0\nfor c in set(word):\n  mask |= (1 << (ord(c) - ord('a')))\n```\n\nTo determine if two strings have common characters, perform & on the two bitmasks. If the result is non-zero, `mask_a & mask_b > 0`, then the two strings have common characters.\n\n### Anagram\n\nAn anagram is word switch or word play. It is the result of re-arranging the letters of a word or phrase to produce a new word or phrase, while using all the original letters only once. In interviews, usually we are only bothered with words without spaces in them.\n\nTo determine if two strings are anagrams, there are a few plausible approaches:\n\n- Sorting both strings should produce the same resulting string. This takes O(nlgn) time and O(lgn) space.\n- If we map each character to a prime number and we multiply each mapped number together, anagrams should have the same multiple (prime factor decomposition). This takes O(n) time and O(1) space.\n- Frequency counting of characters will help to determine if two strings are anagrams. This also takes O(n) time and O(1) space.\n\n### Palindrome\n\nA palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward, such as _madam_ or _racecar_.\n\nHere are ways to determine if a string is a palindrome:\n\n- Reverse the string and it should be equal to itself.\n- Have two pointers at the start and end of the string. Move the pointers inward till they meet. At any point in time, the characters at both pointers should match.\n\nThe order of characters within the string matters, so HashMaps are usually not helpful.\n\nWhen a question is about counting the number of palindromes, a common trick is to have two pointers that move outward, away from the middle. Note that palindromes can be even or odd length. For each middle pivot position, you need to check it twice: Once that includes the character and once without the character.\n\n- For substrings, you can terminate early once there is no match.\n- For subsequences, use dynamic programming as there are overlapping subproblems. Check out [this question](https://leetcode.com/problems/longest-palindromic-subsequence/).\n\n## Corner cases\n\n- Empty string\n- String with 1 or 2 characters\n- String with repeated characters\n- Strings with only one distinct character\n\n## Recommended LeetCode questions\n\n- [Longest Substring Without Repeating Characters](https://leetcode.com/problems/longest-substring-without-repeating-characters/)\n- [Longest Repeating Character Replacement](https://leetcode.com/problems/longest-repeating-character-replacement/)\n- [Minimum Window Substring](https://leetcode.com/problems/minimum-window-substring/description/)\n- [Valid Anagram](https://leetcode.com/problems/valid-anagram)\n- [Group Anagrams](https://leetcode.com/problems/group-anagrams/)\n- [Valid Parentheses](https://leetcode.com/problems/valid-parentheses)\n- [Valid Palindrome](https://leetcode.com/problems/valid-palindrome/)\n- [Longest Palindromic Substring](https://leetcode.com/problems/longest-palindromic-substring/)\n- [Palindromic Substrings](https://leetcode.com/problems/palindromic-substrings/)\n- [Encode and Decode Strings (LeetCode Premium)](https://leetcode.com/problems/encode-and-decode-strings/)\n","filetype":".md","index":44},{"title":"Topics","category":"algorithms","id":"topics_algorithms","algorithm":"---\nid: topics\ntitle: Topics\n---\n\n## Arrays\n\n## Strings\n\n- Prefix trees (Tries)\n- Suffix trees\n- Suffix arrays\n- KMP\n- Rabin-Karp\n- Boyer-Moore\n\n## Sorting\n\n- Bubble sort\n- Insertion sort\n- Merge sort\n- Quick sort\n- Selection sort\n- Bucket sort\n- Radix sort\n- Counting sort\n\n## Linked Lists\n\n## Stacks\n\n## Queues\n\n## Hash tables\n\n- Collision resolution algorithms\n\n## Trees\n\n- BFS\n- DFS (inorder, postorder, preorder)\n- Height\n\n## Binary Search Trees\n\n- Insert node\n- Delete a node\n- Find element in BST\n- Find min, max element in BST\n- Get successor element in tree\n- Check if a binary tree is a BST or not\n\n## Heaps / Priority Queues\n\n- Insert\n- Bubble up\n- Extract max\n- Remove\n- Heapify\n- Heap sort\n\n## Graphs\n\n- Various implementations\n  - Adjacency matrix\n  - Adjacency list\n  - Adjacency map\n- Single-source shortest path\n- Dijkstra\n- Bellman-Ford\n- Topo sort\n- MST\n- Prim algorithm\n- Kruskal's algorithm\n- Union Find Data Structure\n- Count connected components in a graph\n- List strongly connected components in a graph\n- Check for bipartite graph\n\n## Dynamic Programming\n\n- Count Change\n- 0-1 Knapsack\n\n## System Design\n\n- http://www.hiredintech.com/system-design/\n- https://www.quora.com/How-do-I-prepare-to-answer-design-questions-in-a-technical-interview?redirected_qid=1500023\n- http://blog.gainlo.co/index.php/2015/10/22/8-things-you-need-to-know-before-system-design-interviews/\n- https://github.com/donnemartin/system-design-primer\n- https://github.com/jwasham/coding-interview-university/blob/master/extras/cheat%20sheets/system-design.pdf\n","filetype":".md","index":45},{"title":"Tree","category":"algorithms","id":"tree_algorithms","algorithm":"---\nid: tree\ntitle: Tree\n---\n\n## Study links\n\n- [Leaf It Up To Binary Trees](https://medium.com/basecs/leaf-it-up-to-binary-trees-11001aaf746d)\n\n## Notes\n\nA tree is an undirected and connected acyclic graph.\n\nRecursion is a common approach for trees. When you notice that the subtree problem can be used to solve the entire problem, try using recursion.\n\nWhen using recursion, always remember to check for the base case, usually where the node is `null`.\n\nWhen you are asked to traverse a tree by level, use breadth-first search.\n\nSometimes it is possible that your recursive function needs to return two values.\n\nIf the question involves summation of nodes along the way, be sure to check whether nodes can be negative.\n\nYou should be very familiar with writing pre-order, in-order, and post-order traversal recursively. As an extension, challenge yourself by writing them iteratively. Sometimes interviewers ask candidates for the iterative approach, especially if the candidate finishes writing the recursive approach too quickly.\n\nDo check out the section on [Trie](trie.md), which is an advanced tree.\n\n## Corner cases\n\n- Empty tree\n- Single node\n- Two nodes\n- Very skewed tree (like a linked list)\n\n## Special Trees\n\n### Binary Tree\n\nIn-order traversal of a binary tree is insufficient to uniquely serialize a tree. Pre-order or post-order traversal is also required.\n\n### Binary Search Tree (BST)\n\nIn-order traversal of a BST will give you all elements in order.\n\nBe very familiar with the properties of a BST and validating that a binary tree is a BST. This comes up more often than expected.\n\nWhen a question involves a BST, the interviewer is usually looking for a solution which runs faster than O(n).\n\n## Recommended LeetCode questions\n\n- [Maximum Depth of Binary Tree](https://leetcode.com/problems/maximum-depth-of-binary-tree/)\n- [Same Tree](https://leetcode.com/problems/same-tree/)\n- [Invert/Flip Binary Tree](https://leetcode.com/problems/invert-binary-tree/)\n- [Binary Tree Maximum Path Sum](https://leetcode.com/problems/binary-tree-maximum-path-sum/)\n- [Binary Tree Level Order Traversal](https://leetcode.com/problems/binary-tree-level-order-traversal/)\n- [Serialize and Deserialize Binary Tree](https://leetcode.com/problems/serialize-and-deserialize-binary-tree/)\n- [Subtree of Another Tree](https://leetcode.com/problems/subtree-of-another-tree/)\n- [Construct Binary Tree from Preorder and Inorder Traversal](https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/)\n- [Validate Binary Search Tree](https://leetcode.com/problems/validate-binary-search-tree/)\n- [Kth Smallest Element in a BST](https://leetcode.com/problems/kth-smallest-element-in-a-bst/)\n- [Lowest Common Ancestor of BST](https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/)\n","filetype":".md","index":46},{"title":"Trie","category":"algorithms","id":"trie_algorithms","algorithm":"---\nid: trie\ntitle: Trie\n---\n\n## Study links\n\n- [Trying to Understand Tries](https://medium.com/basecs/trying-to-understand-tries-3ec6bede0014)\n- [Implement Trie (Prefix Tree)](https://leetcode.com/articles/implement-trie-prefix-tree/)\n\n## Notes\n\nTries are special trees (prefix trees) that make searching and storing strings more efficient. Tries have many practical applications, such as conducting searches and providing autocomplete. It is helpful to know these common applications so that you can easily identify when a problem can be efficiently solved using a trie.\n\nSometimes preprocessing a dictionary of words (given in a list) into a trie, will improve the efficiency of searching for a word of length k, among n words. Searching becomes O(k) instead of O(n).\n\nBe familiar with implementing, from scratch, a `Trie` class and its `add`, `remove` and `search` methods.\n\n## Recommended LeetCode questions\n\n- [Implement Trie (Prefix Tree)](https://leetcode.com/problems/implement-trie-prefix-tree)\n- [Add and Search Word](https://leetcode.com/problems/add-and-search-word-data-structure-design)\n- [Word Search II](https://leetcode.com/problems/word-search-ii/)\n","filetype":".md","index":47},{"title":"Experimental","category":null,"id":"experimental","index":48},{"title":"Design","category":"experimental","id":"design","index":49},{"title":"Readme","category":"design","id":"README_design","algorithm":"# Design Questions\n\n## Guides\n\n- [Grokking the System Design Interview](https://www.educative.io/collection/5668639101419520/5649050225344512)\n- https://github.com/donnemartin/system-design-primer\n- https://github.com/checkcheckzz/system-design-interview\n- https://github.com/shashank88/system_design\n- https://gist.github.com/vasanthk/485d1c25737e8e72759f\n- http://www.puncsky.com/blog/2016/02/14/crack-the-system-design-interview/\n- https://www.palantir.com/2011/10/how-to-rock-a-systems-design-interview/\n- http://blog.gainlo.co/index.php/2017/04/13/system-design-interviews-part-ii-complete-guide-google-interview-preparation/\n\n## Flow\n\n#### A. Understand the problem and scope\n\n- Define the use cases, with interviewer's help.\n- Suggest additional features.\n- Remove items that interviewer deems out of scope.\n- Assume high availability is required, add as a use case.\n\n#### B. Think about constraints\n\n- Ask how many requests per month.\n- Ask how many requests per second (they may volunteer it or make you do the math).\n- Estimate reads vs. writes percentage.\n- Keep 80/20 rule in mind when estimating.\n- How much data written per second.\n- Total storage required over 5 years.\n- How much data reads per second.\n\n#### C. Abstract design\n\n- Layers (service, data, caching).\n- Infrastructure: load balancing, messaging.\n- Rough overview of any key algorithm that drives the service.\n- Consider bottlenecks and determine solutions.\n\nSource: https://github.com/jwasham/coding-interview-university#system-design-scalability-data-handling\n\n## Grading Rubrics\n\n- Problem Solving - How systematic is your approach to solving the problem step-by-step? Break down a problem into its core components.\n- Communication - How well do you explain your idea and communicate it with others?\n- Evaluation - How do you evaluate your system? Are you aware of the trade-offs made? How can you optimize it?\n- Estimation - How fast does your system need to be? How much space does it need? How much load will it experience?\n\n## Specific Topics\n\n- URL Shortener\n  - http://stackoverflow.com/questions/742013/how-to-code-a-url-shortener\n  - http://blog.gainlo.co/index.php/2016/03/08/system-design-interview-question-create-tinyurl-system/\n  - https://www.interviewcake.com/question/python/url-shortener\n- Collaborative Editor\n  - http://blog.gainlo.co/index.php/2016/03/22/system-design-interview-question-how-to-design-google-docs/\n- Photo Sharing App\n  - http://blog.gainlo.co/index.php/2016/03/01/system-design-interview-question-create-a-photo-sharing-app/\n- Social Network Feed\n  - http://blog.gainlo.co/index.php/2016/02/17/system-design-interview-question-how-to-design-twitter-part-1/\n  - http://blog.gainlo.co/index.php/2016/02/24/system-design-interview-question-how-to-design-twitter-part-2/\n  - http://blog.gainlo.co/index.php/2016/03/29/design-news-feed-system-part-1-system-design-interview-questions/\n- Trending Algorithm\n  - http://blog.gainlo.co/index.php/2016/05/03/how-to-design-a-trending-algorithm-for-twitter/\n- Facebook Chat\n  - http://blog.gainlo.co/index.php/2016/04/19/design-facebook-chat-function/\n- Key Value Store\n  - http://blog.gainlo.co/index.php/2016/06/14/design-a-key-value-store-part-i/\n  - http://blog.gainlo.co/index.php/2016/06/21/design-key-value-store-part-ii/\n- Recommendation System\n  - http://blog.gainlo.co/index.php/2016/05/24/design-a-recommendation-system/\n- Cache System\n  - http://blog.gainlo.co/index.php/2016/05/17/design-a-cache-system/\n- E-commerce Website\n  - http://blog.gainlo.co/index.php/2016/08/22/design-ecommerce-website-part/\n  - http://blog.gainlo.co/index.php/2016/08/28/design-ecommerce-website-part-ii/\n- Web Crawler\n  - http://blog.gainlo.co/index.php/2016/06/29/build-web-crawler/\n  - http://www.makeuseof.com/tag/how-do-search-engines-work-makeuseof-explains/\n  - https://www.quora.com/How-can-I-build-a-web-crawler-from-scratch/answer/Chris-Heller\n- YouTube\n  - http://blog.gainlo.co/index.php/2016/10/22/design-youtube-part/\n  - http://blog.gainlo.co/index.php/2016/11/04/design-youtube-part-ii/\n- Hit Counter\n  - http://blog.gainlo.co/index.php/2016/09/12/dropbox-interview-design-hit-counter/\n- Facebook Graph Search\n- Design [Lyft Line](https://www.lyft.com/line).\n- Design a promo code system (with same promo code, randomly generated promo code, and promo code with conditions).\n- Model a university.\n- How would you implement Pacman?\n- Sketch out an implementation of Asteroids.\n- Implement a spell checker.\n- Design the rubik cube.\n- Design a high-level interface to be used for card games (e.g. poker, blackjack etc).\n","filetype":".md","index":50},{"title":"Collaborative Editor","category":"design","id":"collaborative-editor_design","algorithm":"# Collaborative Document Editor\n\n## Variants\n\n- Design Google docs.\n- Design a collaborative code editor like Coderpad/Codepile.\n- Design a collaborative markdown editor.\n\n## Requirements Gathering\n\n- What is the intended platform?\n  - Web\n- What features are required?\n  - Creating a document\n  - Editing a document\n  - Sharing a document\n- Bonus features\n  - Document revisions and reverting\n  - Searching\n  - Commenting\n  - Chatting\n  - Executing code (in the case of code editor)\n- What is in a document?\n  - Text\n  - Images\n- Which metrics should we optimize for?\n  - Loading time\n  - Synchronization\n  - Throughput\n\n## Core Components\n\n- Front end\n  - WebSockets/long polling for real-time communication between front end and back end.\n- Back end services behind a reverse proxy.\n  - Reverse proxy will proxy the requests to the right server.\n  - Split into a few services for different purposes.\n  - The benefit of this is that each service can use different languages that best suits its purpose.\n- API servers for non-collaborative features and endpoints.\n  - Ruby/Rails/Django for the server that deals with CRUD operations on data models where performance is not that crucial.\n- WebSocket servers for handling document edits and publishing updates to listeners.\n  - Possibly Node/Golang for WebSocket server which will need high performance as updates are frequent.\n- Task queue to persist document updates to the database.\n- ELB in front of back end servers.\n- MySQL database.\n- S3 and CDN for images.\n\n## Data Modeling\n\n- What kind of database to use?\n  - Data is quite structured. Would go with SQL.\n- Design the necessary tables, its columns and its relations.\n  - `users`\n    - `id`\n    - `name`\n  - `document`\n    - `id`\n    - `owner_id`\n  - `permissions`\n    - `id`\n    - `name`\n  - `document_permissions`\n    - `id`\n    - `document_id`\n    - `user_id`\n\n## Collaborative Editing - Client\n\n- Upon loading of the page and document, the client should connect to the WebSocket server over the WebSocket protocol `ws://`.\n- Upon connection, perform a time sync with the server, possibly via Network Time Protocol (NTP).\n- The most straightforward way is to send the whole updated document content to the back end, and all users currently viewing the document will receive the updated document. However, there are a few problems with this approach:\n  - Race condition. If two users editing the document at the same time, the last one to edit will overwrite the changes by the previous user. One workaround is to lock the document when a user is currently editing it, but that will not make it real-time collaborative.\n  - A large payload (the whole document) is being sent to servers and published to users on each change, and the user is likely to already have most of the content. A lot of redundant data being sent.\n- A feasible approach would be to use operational transforms and send just the action deltas to the back end. The back end publishes the action deltas to the listeners. What is considered an action delta?\n  - (a) Changing a character/word, (b) inserting a character/word/image, (c) deleting a character/word.\n  - With this approach, the payload will contain only small amount of data, such as (a) type of change, (b) character/word, (c) position in document: line/column, (d) timestamp. Why is the timestamp needed? Read on to find out.\n- Updates can also be throttled and batched, to avoid flooding the web server with requests. For example, if a user inserts a\n\n## Back End\n\nThe back end is split into a few portions: WebSocket server for receiving and broadcasting document updates, CRUD server for reading and writing non-document-related data, and a task queue for persistence of the document.\n\n## WebSocket Server\n\n- Languages and frameworks that support async requests and non-blocking I/O will be suitable for the collaborative editor server. Node and Golang comes to my mind.\n- However, the WebSocket server is not stateless, so is it not that straightforward to scale horizontally. One approach would be for a Load Balancer to use Redis to maintain a map of the client to the WebSocket server instance IP, such that subsequent requests from the same client will be routed to the same server.\n- Each document corresponds to a room (more of namespace). Users can subscribe to the events happening within a room.\n- When a action delta is being received, blast it out to the listeners within the room and add it to the task queue.\n\n## CRUD Server\n\n- Provides APIs for reading and writing non-document-related data, such as users, permissions.\n\n## Task Queue + Worker Service\n\n- Worker service retrieves messages from the task queue and writes the updated documents to the database in an async fashion.\n- Batch the actions together and perform one larger write that consists of multiple actions. For example, instead of persisting to the database once per addition of a word, combine these additions and write them into the database at once.\n- Publish the save completion event to the WebSocket server to be published to the listeners, informing that the latest version of the document is being saved.\n- Benefit of using a task queue is that as the amount of tasks in the queue goes up, we can scale up the number of worker services to clear the backlog of work faster.\n\n## Document Persistence\n\nTODO\n\n###### References\n\n- http://blog.gainlo.co/index.php/2016/03/22/system-design-interview-question-how-to-design-google-docs/\n","filetype":".md","index":51},{"title":"News Feed","category":"design","id":"news-feed_design","algorithm":"# News Feed\n\n## Variants\n\n- Design Facebook news feed.\n- Design Twitter news feed.\n- Design Quora feed.\n- Design Instagram feed.\n\n## Requirements Gathering\n\n- What is the intended platform?\n  - Mobile (mobile web or native)? Web? Desktop?\n- What features are required?\n  - CRUD posts.\n  - Commenting on posts.\n  - Sharing posts.\n  - Trending posts?\n  - Tag people?\n  - Hashtags?\n- What is in a news feed post?\n  - Author.\n  - Content.\n  - Media.\n  - Tags?\n  - Hashtags?\n  - Comments/Replies.\n  - Operations:\n    - CRUD\n    - Commenting/replying to a post.\n- What is in a news feed?\n  - Sequence of posts.\n  - Query pattern: query for a user's ranked news feed.\n  - Operations:\n    - Append - Fetch more posts.\n    - Delete - I don't want to see this.\n- Which metrics should we optimize for?\n  - User retention.\n  - Ads revenue.\n  - Fast loading time.\n  - Bandwidth.\n  - Server costs.\n\n## Core Components\n\nTODO\n\n## Data modeling\n\n- What kind of database to use?\n  - Data is quite structured. Would go with SQL.\n- Design the necessary tables, its columns and its relations.\n  - `users`\n  - `posts`\n  - `likes`\n  - `follows`\n  - `comments`\n\n> There are two basic objects: user and feed. For user object, we can store userID, name, registration date and so on so forth. And for feed object, there are feedId, feedType, content, metadata etc., which should support images and videos as well.\n>\n> If we are using a relational database, we also need to model two relations: user-feed relation and friend relation. The former is pretty straightforward. We can create a user-feed table that stores userID and corresponding feedID. For a single user, it can contain multiple entries if he has published many feeds.\n>\n> For friend relation, adjacency list is one of the most common approaches. If we see all the users as nodes in a giant graph, edges that connect nodes denote friend relation. We can use a friend table that contains two userIDs in each entry to model the edge (friend relation). By doing this, most operations are quite convenient like fetch all friends of a user, check if two people are friends.\n>\n> The system will first get all userIDs of friends from friend table. Then it fetches all feedIDs for each friend from user-feed table. Finally, feed content is fetched based on feedID from feed table. You can see that we need to perform 3 joins, which can affect performance.\n>\n> A common optimization is to store feed content together with feedID in user-feed table so that we don't need to join the feed table any more. This approach is called denormalization, which means by adding redundant data, we can optimize the read performance (reducing the number of joins).\n>\n> The disadvantages are obvious:\n>\n> - Data redundancy. We are storing redundant data, which occupies storage space (classic time-space trade-off).\n> - Data consistency. Whenever we update a feed, we need to update both feed table and user-feed table. Otherwise, there is data inconsistency. This increases the complexity of the system.\n> - Remember that there's no one approach always better than the other (normalization vs denormalization). It's a matter of whether you want to optimize for read or write.\n\n## Feed Display\n\n- The most straightforward way is to fetch posts from all the people you follow and render them sorted by time.\n- There can be many posts to fetch. How many posts should you fetch?\n- What are the pagination approaches and the pros and cons of each approach?\n- Offset by page size\n- Offset by time\n- What data should the post contain when you initially fetch them?\n- Lazy loading approach for loading associated data: media, comments, people who liked the post.\n- Media\n  - If the post contains media such as images and videos, how should they be handled? Should they be loaded on the spot?\n  - A better way would be to fetch images only when they are about to enter the viewport.\n  - Videos should not autoplay. Only fetch the thumbnail for the video, and only play the video when user clicks play.\n  - If the content is being refetched, the media should be cached and not fetched over the wire again. This is especially important on mobile connections where data can be expensive.\n- Comments\n  - Should you fetch all the comments for a post? For posts by celebrities, they can contain a few hundred or thousand comments.\n  - Maybe fetch the top few comments and display them under the post, and the user is given the choice to \"show all comments\".\n- How does the user request for new content?\n  - Infinite scrolling.\n  - User has to tap next page.\n\n## Feed Ranking\n\n- First select features/signals that are relevant and then figure out how to combine them to calculate a final score.\n- How do you show the relevant posts that the user is interested in?\n  - Chronological - While a chronological approach works, it may not be the most engaging approach. For example, if a person posts 30 times within the last hour, his followers will have their news feed clogged up with his posts. Maybe set a cap on the number of time a person's posts can appear within the feed.\n  - Popularity - How many likes and comments does the post have? Does the user usually like posts by that person?\n- How do you determine which are the more important posts? A user might be more interested in a few-hour old post from a good friend than a very recent post from an acquaintance.\n- A common strategy is to calculate a post score based on various features and rank posts by its score.\n- Prior to 2013, Facebook was using the [EdgeRank](https://www.wikiwand.com/en/EdgeRank) algorithm to determine what articles should be displayed in a user's News Feed.\n- Edge Rank basically is using three signals: affinity score, edge weight and time decay.\n  - Affinity score (u) - For each news feed, affinity score evaluates how close you are with this user. For instance, you are more likely to care about feed from your close friends instead of someone you just met once.\n  - Edge weight (e) - Edge weight basically reflects importance of each edge. For instance, comments are worth more than likes.\n  - Time decay (d) - The older the story, the less likely users find it interesting.\n- Affinity score\n  - Various factors can be used to reflect how close two people are. First of all, explicit interactions like comment, like, tag, share, click etc. are strong signals we should use. Apparently, each type of interaction should have different weight. For instance, comments should be worth much more than likes.\n  - Secondly, we should also track the time factor. Perhaps you used to interact with a friend quite a lot, but less frequent recently. In this case, we should lower the affinity score. So for each interaction, we should also put the time decay factor.\n- A good ranking system can improve some core metrics - user retention, ads revenue, etc.\n\n## Feed Publishing\n\nTODO. Refer to http://blog.gainlo.co/index.php/2016/04/05/design-news-feed-system-part-2/.\n\n## Additional Features\n\n#### Tagging feature\n\n- Have a `tags` table that stores the relation between a post and the people tagged in it.\n\n#### Sharing feature\n\n- Add a column to `posts` table called `original_post_id`.\n- What should happen when the original post is deleted?\n  - The shared `posts` have to be deleted too.\n\n#### Notifications feature\n\n- When should notifications happen?\n- Can the user subscribe to only certain types of notifications?\n\n#### Trending feature\n\n- What constitutes trending? What signals would you look at? What weight would you give to each signal?\n- Most frequent hashtags over the last N hours.\n- Hottest search queries.\n- Fetch the recent most popular feeds and extract some common words or phrases.\n\n#### Search feature\n\n- How would you index the data?\n\n## Scalability\n\n- Master-slave replication.\n  - Write to master database and read from replica databases/in-memory data store.\n  - Post contents are being read more than they are updated. It is acceptable to have a slight lag between a user updating a post and followers seeing the updated content. Tweets are not even editable.\n- Data for real-time queries should be in memory, disk is for writes only.\n- Pre-computation offline.\n- Tracking number of likes and comments.\n  - Expensive to do a `COUNT` on the `likes` and `comments` for a post.\n  - Use Redis/Memcached for keeping track of how many likes/comments a post has. Increment when there's new activity, decrement when someone unlikes/deletes the comment.\n- Load balancer in front of your API servers.\n- Partitioning the data.\n\n###### References\n\n- [Design News Feed System (Part 1)](http://blog.gainlo.co/index.php/2016/03/29/design-news-feed-system-part-1-system-design-interview-questions/)\n- [Design News Feed System (Part 1)](http://blog.gainlo.co/index.php/2016/04/05/design-news-feed-system-part-2/)\n- [Etsy Activity Feeds Architecture](https://www.slideshare.net/danmckinley/etsy-activity-feeds-architecture)\n- [Big Data in Real-Time at Twitter](https://www.slideshare.net/nkallen/q-con-3770885)\n","filetype":".md","index":52},{"title":"Search Engine","category":"design","id":"search-engine_design","algorithm":"# Search Engine\n\n###### References\n\n- [How Do Search Engines Work?](http://www.makeuseof.com/tag/how-do-search-engines-work-makeuseof-explains/)\n","filetype":".md","index":53},{"title":"Domain","category":"experimental","id":"domain","index":54},{"title":"Async Loading","category":"domain","id":"async-loading","index":55},{"title":"Index","category":"async-loading","id":"index_async-loading","algorithm":"<!doctype html>\n<head>\n  <style>\n    body {\n      font-family: 'Helvetica', sans-serif;\n    }\n  </style>\n</head>\n<body>\n  <div>\n    <div id=\"chapters\">\n    </div>\n  </div>\n  <script>\n    (() => {\n      const DOM = {\n        $chapters: document.getElementById('chapters'),\n      };\n      const URL = 'https://raw.githubusercontent.com/googlesamples/web-fundamentals/gh-pages/fundamentals/getting-started/primers';\n\n      function getJSON(url) {\n        return new Promise((resolve, reject) => {\n          const req = new XMLHttpRequest();\n          req.open('GET', url);\n          req.onload = () => {\n            if (req.status === 200) {\n              resolve(JSON.parse(req.response));\n              return;\n            }\n            reject(req.responseText);\n          }\n          req.onerror = (err) => {\n            reject(err);\n          }\n          req.send();\n        });\n      }\n\n      function init() {\n        getJSON(`${URL}/story.json`).then(story => {\n          const $heading = document.createRange().createContextualFragment(story.heading);\n          DOM.$chapters.before($heading);\n          return Promise.all(story.chapterUrls.map((url, index) => {\n            return getJSON(`${URL}/${url}`);\n          }));\n        }).then(chapters => {\n          const $chapters = document.createDocumentFragment();\n          chapters.forEach(chapter => {\n            $chapters.appendChild(document.createRange().createContextualFragment(chapter.html));\n          });\n          DOM.$chapters.appendChild($chapters);\n        }).catch(err => {\n          console.warn(err);\n        });\n      }\n\n      document.addEventListener('DOMContentLoaded', init);\n    })();\n  </script>\n</body>\n</html>\n","filetype":".html","index":56},{"title":"Databases","category":"domain","id":"databases_domain","algorithm":"# Databases\n\n## General\n\n- How should you store passwords in a database?\n  - http://www.geeksforgeeks.org/store-password-database/\n  - https://nakedsecurity.sophos.com/2013/11/20/serious-security-how-to-store-your-users-passwords-safely/\n","filetype":".md","index":57},{"title":"Networking","category":"domain","id":"networking_domain","algorithm":"# Networking\n\n- Given an IPv4 IP address p and an integer n, return a list of CIDR strings that most succinctly represents the range of IP addresses from p to (p + n).\n- Describe what happens when you enter a url in the web browser.\n- Define UDP/TCP and give an example of both.\n","filetype":".md","index":58},{"title":"Pagination Sorting","category":"domain","id":"pagination-sorting","index":59},{"title":"Index","category":"pagination-sorting","id":"index_pagination-sorting","algorithm":"<!doctype html>\n<head>\n  <style>\n    body {\n      font-family: 'Helvetica', sans-serif;\n    }\n  </style>\n</head>\n<body>\n  <h1>People</h1>\n  <table class=\"js-table\">\n    <tr class=\"js-table-header\">\n      <th data-field=\"name\">Name</th>\n      <th data-field=\"age\">Age</th>\n      <th data-field=\"email\">Email</th>\n    </tr>\n    <tbody class=\"js-table-body\">\n    </tbody>\n  </table>\n  <button class=\"js-page-button button-prev\" data-type=\"prev\">Prev</button>\n  Page <span class=\"js-current-page\"></span> / <span class=\"js-total-page\"></span>\n  <button class=\"js-page-button button-next\" data-type=\"next\">Next</button>\n\n  <script type=\"text/javascript\" src=\"data.js\"></script>\n  <script>\n    (() => {\n      function init() {\n        const DOM = {\n          $pageButtons: document.querySelectorAll('.js-page-button'),\n          $prevButton: document.querySelector('.js-page-button.button-prev'),\n          $nextButton: document.querySelector('.js-page-button.button-next'),\n          $tableHeader: document.querySelector('.js-table-header'),\n          $tableBody: document.querySelector('.js-table-body'),\n          $currentPage: document.querySelector('.js-current-page'),\n          $totalPages: document.querySelector('.js-total-page'),\n        };\n\n        const PAGE_SIZE = 10;\n        function initialState() {\n          return {\n            currentPage: 0,\n            totalPages: 0,\n            sortField: 'name',\n            sortOrder: 'asc',\n            data,\n          };\n        }\n        let state = initialState();\n        state.totalPages = Math.ceil(state.data.length / PAGE_SIZE);\n\n        function navigatePages(type) {\n          let newCurrentPage = state.currentPage + (type === 'prev' ? -1 : 1);\n          newCurrentPage = Math.max(0, newCurrentPage);\n          newCurrentPage = Math.min(newCurrentPage, state.totalPages - 1);\n          state.currentPage = newCurrentPage;\n        }\n\n        function setSortField(field) {\n          state.currentPage = 0;\n          if (state.sortField !== field) {\n            state.sortField = field;\n            state.sortOrder = 'asc';\n          } else {\n            state.sortOrder = state.sortOrder === 'asc' ? 'desc' : 'asc';\n          }\n        }\n\n        function attachEventListeners() {\n          // Pagination.\n          DOM.$pageButtons.forEach(el => {\n            el.addEventListener('click', function () {\n              navigatePages(this.getAttribute('data-type'));\n              render();\n            });\n          });\n\n          // Sorting.\n          DOM.$tableHeader.addEventListener('click', function (event) {\n            const el = event.target;\n            const field = el.getAttribute('data-field');\n            if (el.tagName !== 'TH' || !field) {\n              return;\n            }\n            setSortField(field);\n            render();\n          });\n        }\n\n        function render() {\n          DOM.$tableBody.innerHTML = '';\n\n          // Sort data.\n          const sortField = state.sortField;\n          state.data.sort((a, b) => {\n            switch (sortField) {\n              case 'name':\n              case 'email':\n                return a[sortField] > b[sortField] ? 1 : -1;\n              case 'age':\n                return a[sortField] - b[sortField];\n            }\n          });\n          if (state.sortOrder === 'desc') {\n            state.data.reverse();\n          }\n\n          // Create table rows.\n          const pageData = state.data.slice(state.currentPage * PAGE_SIZE, state.currentPage * PAGE_SIZE + PAGE_SIZE);\n          const $tableRowsFragment = document.createDocumentFragment();\n          pageData.forEach(person => {\n            const $tableRow = document.createElement('tr');\n            ['name', 'age', 'email'].forEach(field => {\n              const $tableCell = document.createElement('td');\n              $tableCell.textContent = person[field];\n              $tableRow.appendChild($tableCell);\n            });\n            $tableRowsFragment.appendChild($tableRow);\n          });\n          DOM.$tableBody.appendChild($tableRowsFragment);\n\n          // Pagination buttons disabled states.\n          DOM.$currentPage.textContent = state.currentPage + 1;\n          DOM.$totalPages.textContent = state.totalPages;\n          if (state.currentPage === 0) {\n            DOM.$prevButton.setAttribute('disabled', true);\n          } else {\n            DOM.$prevButton.removeAttribute('disabled');\n          }\n          if (state.currentPage === state.totalPages - 1) {\n            DOM.$nextButton.setAttribute('disabled', true);\n          } else {\n            DOM.$nextButton.removeAttribute('disabled');\n          }\n        }\n\n        render();\n        attachEventListeners();\n      }\n\n      document.addEventListener('DOMContentLoaded', init);\n    })();\n  </script>\n</body>\n</html>\n","filetype":".html","index":60},{"title":"Security","category":"domain","id":"security_domain","algorithm":"# Security\n\n## Encryption\n\n#### Symmetric Encryption\n\n- Symmetric encryption is a type of encryption where the same key is used to encrypt plaintext messages and to decrypt ciphertext.\n- Symmetric encryption is usually much less computationally expensive as compared to asymmetric encryption.\n- Often called \"shared secret\" encryption, or \"secret key\" encryption.\n- To use a symmetric encryption scheme, the sender and receiver must securely share a key in advance. This sharing can be done via asymmetric encryption or established through a key exchange algorithm like [Diffie Hellman key exchange](https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange).\n\n#### Asymmetric Encryption\n\n- A pair of keys are required: a **private key** and a **public key**. Public keys can be shared with anyone while private keys should be kept secret and known only to the owner.\n- A private key can be used to decrypt a message encrypted by the corresponding public key. A successful decryption verifies that the holder possesses the private key.\n- Also known as public-key cryptography.\n\n## Public Key Infrastructure\n\nA public key infrastructure (PKI) is a system for the creation, storage, and distribution of digital certificates which are used to verify that a particular public key belongs to a certain entity. The PKI creates digital certificates which map public keys to entities, securely stores these certificates in a central repository and revokes them if needed.\n\n###### References\n\n- https://www.wikiwand.com/en/Public_key_infrastructure\n\n## SSH\n\nAn SSH session consists of two stages, **Negotiating Encryption** and **User Authentication**.\n\n#### Negotiating Encryption\n\nThe goal of this stage is for the client and server to agree upon and establish encryption to protect future communication, by generating an identical session key. One possible algorithm to generate the session key is the Diffie‚ÄìHellman key exchange scheme. Each party generates a public/private key pair and exchanges the public key. After obtaining an authentic copy of each other's public keys, each party can compute a shared secret offline.\n\nThe basis of this procedure for classic Diffie-Hellman is:\n\n1. Both parties agree on a large prime number, which will serve as a seed value.\n1. Both parties agree on an encryption generator (typically AES), which will be used to manipulate the values in a predefined way.\n1. Independently, each party comes up with another prime number which is kept secret from the other party. This number is used as the private key for this interaction (different than the private SSH key used for authentication).\n1. The generated private key, the encryption generator, and the shared prime number are used to generate a public key that is derived from the private key, but which can be shared with the other party.\n1. Both participants then exchange their generated public keys.\n1. The receiving entity uses their own private key, the other party's public key, and the original shared prime number to compute a shared secret key.\n1. Although this is independently computed by each party, using opposite private and public keys, it will result in the same shared secret key.\n1. The shared secret is then used to encrypt all communication that follows.\n\nThe purpose of the shared secret key is to wrap all further communication in an encrypted tunnel that cannot be deciphered by outsiders.\n\n#### User Authentication\n\nThe goal of this stage is to authenticate the user and discover whether access to the server should be granted. There are two approaches for authenticating, either by using passwords, or SSH key pairs.\n\nFor password authentication, the server simply prompts the client for the password of the account they are attempting to login with. The password is sent through the negotiated encryption, so it is secure from outside parties.\n\nAuthentication using SSH key pairs begins after the symmetric encryption has been established as described in the last section. The procedure happens like this:\n\n1. The client begins by sending an ID for the key pair it would like to authenticate with to the server.\n1. The server check's the `authorized_keys` file of the account that the client is attempting to log into for the key ID.\n1. If a public key with matching ID is found in the file, the server generates a random number and uses the public key to encrypt the number.\n1. The server sends the client this encrypted message.\n1. If the client actually has the associated private key, it will be able to decrypt the message using that key, revealing the original number.\n1. The client combines the decrypted number with the shared session key that is being used to encrypt the communication, and calculates the MD5 hash of this value.\n1. The client then sends this MD5 hash back to the server as an answer to the encrypted number message.\n1. The server uses the same shared session key and the original number that it sent to the client to calculate the MD5 value on its own. It compares its own calculation to the one that the client sent back. If these two values match, it proves that the client was in possession of the private key and the client is authenticated.\n\n###### References\n\n- https://www.digitalocean.com/community/tutorials/understanding-the-ssh-encryption-and-connection-process\n","filetype":".md","index":61},{"title":"Snake Game","category":"domain","id":"snake-game","index":62},{"title":"Snake Game","category":"snake-game","id":"snake-game_snake-game","algorithm":"# Snake Game\n\nDesign a snake game that is to be played in web browser.\n\nClient: React + Redux\n\nRendering:\nPixel-based graphics. Depending on the intended resolution, can divide the screen into N \\* M pixels. Can dynamically calculate the size of each pixel.\n\nFruit: One pixel.\nSnake body: One pixel width made up of connected pixels.\n\nModel:\n\n```js\n{\n  fruit: {\n    x, y\n  },\n  snake: {\n    points: [(x, y), ...] # head is at index 0\n    direction: north/south/east/west\n  }\n  speed: 500,\n  points: 0\n}\n```\n\n```js\nfunction update() {\n  next_loc = points[0] + (x, y) # Depends on the direction\n  if (snake.points.find(next_loc) > 0) {\n     // die\n  }\n  let pts = snake.points;\n  if (!isEqual(next_loc, fruit)) {\n    pts = points.removeLast();\n  } else {\n    generateFruit();\n    points++;\n  }\n  snake.points = [next_loc, ...pts];\n\n  // Boundary checking ->  die\n}\n```\n\n```js\nfunction generateFruit() {\n  // Cannot generate on my own body.\n\n  // First approach: while on body, generate\n  let next_fruit_location = random_location();\n  while (snake.points.find(next_fruit_location) > 0) {\n    next_fruit_location = random_location();\n  }\n  fruit = next_fruit_location;\n\n  // Second approach: brute force\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      let point = { x: i, y: j };\n      if (snake.points.find(next_fruit_location) === -1) {\n        fruit = point;\n      }\n    }\n  }\n\n  // Third approach: brute force with random\n  const available_points = [];\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      let point = { x: i, y: j };\n      if (snake.points.find(next_fruit_location) === -1) {\n        available_points.push(point);\n      }\n    }\n  }\n  fruit = _.sample(available_points);\n}\n\nsetInterval(update, speed);\n```\n","filetype":".md","index":63},{"title":"Software Engineering","category":"domain","id":"software-engineering_domain","algorithm":"# Software Engineering\n\n## What is the difference between an interface and abstract class?\n\n**Abstract Class**\n\n- For an abstract class, a method must be declared as abstract. An abstract method doesn't have an implementation.\n- The Abstract methods can be declared with Access modifiers like public, internal, protected, etc. When implementing these methods in a subclass, you must define them with the same (or a less restricted) visibility.\n- Abstract classes can contain variables and concrete methods.\n- A class can Inherit only one Abstract class. Hence multiple inheritance is not possible for an Abstract class.\n- Abstract is object-oriented. It offers the basic data an 'object' should have and/or functions it should be able to do. It is concerned with the object's basic characteristics: what it has and what it can do. Hence objects which inherit from the same abstract class share the basic characteristics (generalization).\n- Abstract class establishes \"is a\" relation with concrete classes.\n\n**Interface**\n\n- For an interface, all the methods are abstract by default. So one cannot declare variables or concrete methods in interfaces.\n- All methods declared in an interface must be public.\n- Interfaces cannot contain variables and concrete methods except constants.\n- A class can implement many interfaces. Hence multiple interface inheritance is possible.\n- Interface is functionality-oriented. It defines functionalities an object should have. Regardless what object it is, as long as it can do these functionalities, which are defined in the interface, it's fine. It ignores everything else. An object/class can contain several (groups of) functionalities; hence it is possible for a class to implement multiple interfaces.\n- Interface provides \"has a\" capability for classes.\n","filetype":".md","index":64},{"title":"Tic Tac Toe","category":"domain","id":"tic-tac-toe","index":65},{"title":"Index","category":"tic-tac-toe","id":"index_tic-tac-toe","algorithm":"<!doctype html>\n<head>\n  <style>\n    body {\n      font-family: 'Helvetica', sans-serif;\n    }\n\n    .board-cell {\n      border: 1px solid #666;\n      box-sizing: border-box;\n      display: inline-block;\n      font-size: 32px;\n      height: 100px;\n      line-height: 100px;\n      text-align: center;\n      width: 100px;\n    }\n\n    .board-cell .content {\n      display: inline-block;\n      vertical-align: middle;\n    }\n  </style>\n</head>\n<body>\n  <h1>Tic Tac Toe</h1>\n  <p>Current player turn: <span class=\"js-current-player\"></span></p>\n  <div class=\"js-board\"></div>\n  <button class=\"js-reset\">Reset</button>\n  <script>\n    // We will spend the next 45 minutes building a single-page web app that implements a Tic-Tac-Toe game. jQuery has been included for you. We'll implement the following features in order:\n\n    // 1. Render a 3x3 board. You can hardcode some X and O values within the cell for starters.\n    // 2. Implement the add symbol functionality that adds a X or O into a cell whenever the player clicks on it.\n    // 3. Rotate between the players whenever a move is made. Update the current player display.\n    // 4. Check for end game conditions after each move and display the winner if any.\n    // horizontally, vertically, diagonally\n    // 5. After a winner has been determined, disable further moves on the board.\n    // 6. Add a button to reset the game state.\n    (() => {\n      function init() {\n        const DOM = {\n          $currentPlayer: document.querySelector('.js-current-player'),\n          $board: document.querySelector('.js-board'),\n          $resetButton: document.querySelector('.js-reset'),\n        };\n        const SIZE = 3;\n        function initialState() {\n          return {\n            boardModel: Array(SIZE).fill(null).map(_ => Array(SIZE).fill(null)),\n            players: ['X', 'O'],\n            currentPlayer: 0,\n            gameEnded: false,\n            turn: 0,\n          };\n        }\n        let state = initialState();\n\n        function renderBoard() {\n          DOM.$currentPlayer.textContent = state.players[state.currentPlayer];\n          // Assuming SIZE > 0.\n          DOM.$board.innerHTML = '';\n          for (let i = 0; i < SIZE; i++) {\n            const $row = document.createElement('div');\n            $row.classList.add('board-row');\n            for (let j = 0; j < SIZE; j++) {\n              const $cell = document.createElement('div');\n              $cell.classList.add('board-cell');\n              $cell.setAttribute('data-i', i);\n              $cell.setAttribute('data-j', j);\n              const $content  = document.createElement('span');\n              $content.classList.add('content');\n              $content.textContent = state.boardModel[i][j];\n              $cell.appendChild($content);\n              $row.appendChild($cell);\n            }\n            DOM.$board.appendChild($row);\n          }\n        }\n\n        function checkWinning(board, player) {\n          // Check horizontal.\n          for (let i = 0; i < SIZE; i++) {\n            if (board[i].every(cell => cell === player)) {\n              return true;\n            }\n          }\n\n          // Check vertical.\n          for (let j = 0; j < SIZE; j++) {\n            let verticalAllPlayer = true;\n            for (let i = 0; i < SIZE; i++) {\n              if (board[i][j] !== player) {\n                verticalAllPlayer = false;\n                break;\n              }\n            }\n            if (verticalAllPlayer) {\n              return verticalAllPlayer;\n            }\n          }\n\n          // Check diagonal South-East.\n          let diagonalAllPlayer = true;\n          for (let i = 0; i < SIZE; i++) {\n            if (board[i][i] !== player) {\n              diagonalAllPlayer = false;\n              break;\n            }\n          }\n          if (diagonalAllPlayer) {\n            return diagonalAllPlayer;\n          }\n\n          // Check diagonal North-East.\n          diagonalAllPlayer = true;\n          for (let i = SIZE - 1, j = 0; i >= 0; i--, j++) {\n            if (board[i][j] !== player) {\n              diagonalAllPlayer = false;\n              break;\n            }\n          }\n          if (diagonalAllPlayer) {\n            return diagonalAllPlayer;\n          }\n\n          return false;\n        }\n\n        function attachEventListeners() {\n          DOM.$board.addEventListener('click', (event) => {\n            if (state.gameEnded) {\n              return;\n            }\n            if (!event.target.classList.contains('board-cell')) {\n              return;\n            }\n            const $cell = event.target;\n            const i = parseInt($cell.getAttribute('data-i'), 10);\n            const j = parseInt($cell.getAttribute('data-j'), 10);\n            if (state.boardModel[i][j] !== null) {\n              alert('Cell has already been taken!');\n              return;\n            }\n            const player = state.players[state.currentPlayer];\n            state.boardModel[i][j] = player;\n            const winningMove = checkWinning(state.boardModel, player);\n            state.turn++;\n            if (!winningMove) {\n              state.currentPlayer = (state.currentPlayer + 1) % 2;\n              renderBoard();\n              if (state.turn === SIZE * SIZE) {\n                alert('It\\'s a draw!');\n              }\n            } else {\n              renderBoard();\n              state.gameEnded = true;\n              alert(`Player ${player} wins!`);\n            }\n          });\n\n          DOM.$resetButton.addEventListener('click', () => {\n            if (confirm('Start a new game?')) {\n              state = initialState();\n              renderBoard();\n            }\n          });\n        }\n\n        renderBoard();\n        attachEventListeners();\n      }\n\n      document.addEventListener('DOMContentLoaded', init);\n    })();\n  </script>\n</body>\n</html>\n","filetype":".html","index":66},{"title":"Interviewers","category":"experimental","id":"interviewers","index":67},{"title":"Basics","category":"interviewers","id":"basics_interviewers","algorithm":"# Basics\n\n## Disclaimer\n\nAll these items will change based on your specific company and needs but these items area are the starting point.\n\n## Items To Consider\n\n- **Timeliness** - The interviewee should show up on time, but of course things happen and we must all be understanding that things outside of their control may happen. Try to give a few minutes leeway.\n- **Strengths** - Ask the interviewee what they would consider to be their strengths and maybe rate themselves. This gives you a good idea where to start asking technical questions and sets a baseline for expected knowledge of each subject.\n- **Keep Things Loose** - This is of course dependent on your industry but try to keep make the interviewee comfortable. Many people get nervous when trying to perform at their best for others and a technical interview is no different. A suggestion is to start with a personal question such as \"What are some of your hobbies?\" or \"What do you like to do for fun?\" These types of questions can help relax an interviewee and allows them to perform better.\n- **Understand The Position** - Understand that a junior level candidate isn't going to have as much knowledge about languages and frameworks as a senior candidate will.\n- **Save Time For Questions** - The interviewee may have questions for you! Give them the ability to ask. Maybe offer up a few questions if they have none, (ie. \"What is the typical day here like for my position?\", \"What is your favorite part about working at \\_\\_?\")\n\n## Tech Question Technique\n\n- **Tools** - Using a text editor such as Sublime or Atom will give the interviewee syntax highlighting but doesn't show compiler errors which can be a help.\n- **Nitpicking** - Sometimes pseudocode is okay. If testing in C# do you really need the interviewee to write `Console.WriteLine()` or is `Print()` good enough? -**Keep Dialog Open** - Don't leave the interviewee alone or sit quietly by as they attempt to code. Give some subtle hints like \"I see you're doing \\_\\_\\_\\_, can you think of any other ways to accomplish this?\" It's unlikely that the interviewee will be working in a silo should they get the job, is there any reason they should be during the interview?\n","filetype":".md","index":68},{"title":"Utilities","category":"experimental","id":"utilities","index":69},{"title":"Javascript","category":"utilities","id":"javascript","index":70},{"title":"Bintoint","category":"javascript","id":"binToInt_javascript","algorithm":"// Does not handle negative binary numbers.\nfunction binToInt(binary) {\n  let res = 0;\n  for (let i = 0; i < binary.length; i++) {\n    res = res * 2 + +binary[i];\n  }\n  return res;\n}\n\nconsole.log(binToInt('0') === parseInt('0', 2) && parseInt('0', 2) === 0);\nconsole.log(binToInt('1') === parseInt('1', 2) && parseInt('1', 2) === 1);\nconsole.log(binToInt('10') === parseInt('10', 2) && parseInt('10', 2) === 2);\nconsole.log(binToInt('11') === parseInt('11', 2) && parseInt('11', 2) === 3);\nconsole.log(binToInt('101') === parseInt('101', 2) && parseInt('101', 2) === 5);\nconsole.log(\n  binToInt('1100011') === parseInt('1100011', 2) &&\n    parseInt('1100011', 2) === 99,\n);\n","filetype":".js","index":71},{"title":"Binarysearch","category":"javascript","id":"binarySearch_javascript","algorithm":"function binarySearch(arr, target) {\n  let left = 0;\n  let right = arr.length - 1;\n  while (left <= right) {\n    const mid = left + Math.floor((right - left) / 2);\n    if (arr[mid] === target) {\n      return mid;\n    }\n    if (arr[mid] < target) {\n      left = mid + 1;\n    } else {\n      right = mid - 1;\n    }\n  }\n  return -1;\n}\n\nconsole.log(binarySearch([1, 2, 3, 10], 1) === 0);\nconsole.log(binarySearch([1, 2, 3, 10], 2) === 1);\nconsole.log(binarySearch([1, 2, 3, 10], 3) === 2);\nconsole.log(binarySearch([1, 2, 3, 10], 10) === 3);\nconsole.log(binarySearch([1, 2, 3, 10], 9) === -1);\nconsole.log(binarySearch([1, 2, 3, 10], 4) === -1);\nconsole.log(binarySearch([1, 2, 3, 10], 0) === -1);\nconsole.log(binarySearch([1, 2, 3, 10], 11) === -1);\nconsole.log(binarySearch([5, 7, 8, 10], 3) === -1);\n","filetype":".js","index":72},{"title":"Deepequal","category":"javascript","id":"deepEqual_javascript","algorithm":"function deepEqual(val1, val2) {\n  if (typeof val1 !== typeof val2) {\n    return false;\n  }\n\n  // Array comparison.\n  if (Array.isArray(val1) && Array.isArray(val2)) {\n    if (val1.length !== val2.length) {\n      return false;\n    }\n    for (let i = 0; i < val1.length; i++) {\n      if (!deepEqual(val1[i], val2[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // Object comparison.\n  if (\n    typeof val1 === 'object' &&\n    typeof val2 === 'object' &&\n    val1 !== null &&\n    val2 !== null\n  ) {\n    const keys1 = Object.keys(val1),\n      keys2 = Object.keys(val2);\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n    for (let i = 0; i < keys1.length; i++) {\n      if (!deepEqual(val1[keys1[i]], val2[keys2[i]])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // Primitive comparison.\n  return val1 === val2;\n}\n\nmodule.exports = deepEqual;\n","filetype":".js","index":73},{"title":"Graphtoposort","category":"javascript","id":"graphTopoSort_javascript","algorithm":"function graphTopoSort(numberNodes, edges) {\n  const nodes = new Map();\n  const order = [];\n  const queue = [];\n  for (let i = 0; i < numberNodes; i++) {\n    nodes.set(i, {in: 0, out: new Set()});\n  }\n\n  edges.forEach(edge => {\n    const [node_id, pre_id] = edge;\n    nodes.get(node_id).in += 1;\n    nodes.get(pre_id).out.add(node_id);\n  });\n\n  for (let [node_id, value] of nodes.entries()) {\n    if (value.in === 0) {\n      queue.push(node_id);\n    }\n  }\n\n  while (queue.length) {\n    const node_id = queue.shift();\n    for (let outgoing_id of nodes.get(node_id).out) {\n      nodes.get(outgoing_id).in -= 1;\n      if (nodes.get(outgoing_id).in === 0) {\n        queue.push(outgoing_id);\n      }\n    }\n    order.push(node_id);\n  }\n\n  return order.length == numberNodes ? order : [];\n}\n\nconsole.log(graphTopoSort(3, [[0, 1], [0, 2]]));\n","filetype":".js","index":74},{"title":"Inttobin","category":"javascript","id":"intToBin_javascript","algorithm":"// Does not handle negative numbers.\nfunction intToBin(number) {\n  if (number === 0) {\n    return '0';\n  }\n  let res = '';\n  while (number > 0) {\n    res = String(number % 2) + res;\n    number = parseInt(number / 2, 10);\n  }\n  return res;\n}\n\nconsole.log(intToBin(0) === (0).toString(2) && (0).toString(2) === '0');\nconsole.log(intToBin(1) === (1).toString(2) && (1).toString(2) === '1');\nconsole.log(intToBin(2) === (2).toString(2) && (2).toString(2) === '10');\nconsole.log(intToBin(3) === (3).toString(2) && (3).toString(2) === '11');\nconsole.log(intToBin(5) === (5).toString(2) && (5).toString(2) === '101');\nconsole.log(\n  intToBin(99) === (99).toString(2) && (99).toString(2) === '1100011',\n);\n","filetype":".js","index":75},{"title":"Intervalsintersect","category":"javascript","id":"intervalsIntersect_javascript","algorithm":"// Interval: [start, end].\nfunction intervalsIntersect(a, b) {\n  return a[0] < b[1] && b[0] < a[1];\n}\n\nconsole.log(intervalsIntersect([1, 2], [3, 4]) === false);\nconsole.log(intervalsIntersect([1, 2], [2, 4]) === false);\nconsole.log(intervalsIntersect([1, 2], [1, 4]) === true);\nconsole.log(intervalsIntersect([1, 2], [0, 4]) === true);\nconsole.log(intervalsIntersect([1, 2], [0, 2]) === true);\nconsole.log(intervalsIntersect([1, 2], [0, 1.5]) === true);\nconsole.log(intervalsIntersect([3, 4], [1, 2]) === false);\nconsole.log(intervalsIntersect([2, 4], [1, 2]) === false);\nconsole.log(intervalsIntersect([1, 4], [1, 2]) === true);\nconsole.log(intervalsIntersect([0, 4], [1, 2]) === true);\nconsole.log(intervalsIntersect([0, 2], [1, 2]) === true);\nconsole.log(intervalsIntersect([0, 1.5], [1, 2]) === true);\n","filetype":".js","index":76},{"title":"Intervalsmerge","category":"javascript","id":"intervalsMerge_javascript","algorithm":"// Interval: [start, end].\n// Merges two overlapping intervals into one.\nfunction intervalsMerge(a, b) {\n  return [Math.min(a[0], b[0]), Math.max(a[1], b[1])];\n}\n\nconst deepEqual = require('./deepEqual');\n\nconsole.log(deepEqual(intervalsMerge([1, 2], [1, 4]), [1, 4]));\nconsole.log(deepEqual(intervalsMerge([1, 2], [0, 4]), [0, 4]));\nconsole.log(deepEqual(intervalsMerge([1, 2], [0, 2]), [0, 2]));\nconsole.log(deepEqual(intervalsMerge([1, 2], [0, 1.5]), [0, 2]));\nconsole.log(deepEqual(intervalsMerge([1, 4], [1, 2]), [1, 4]));\nconsole.log(deepEqual(intervalsMerge([0, 4], [1, 2]), [0, 4]));\nconsole.log(deepEqual(intervalsMerge([0, 2], [1, 2]), [0, 2]));\nconsole.log(deepEqual(intervalsMerge([0, 1.5], [1, 2]), [0, 2]));\n","filetype":".js","index":77},{"title":"Issubsequence","category":"javascript","id":"isSubsequence_javascript","algorithm":"function isSubsequence(s, t) {\n  if (s.length > t.length) {\n    return false;\n  }\n  let matchedLength = 0;\n  for (let i = 0; i < t.length; i++) {\n    if (matchedLength < s.length && s[matchedLength] === t[i]) {\n      matchedLength += 1;\n    }\n  }\n  return matchedLength === s.length;\n}\n\nconsole.log(isSubsequence('abc', 'abcde') === true);\nconsole.log(isSubsequence('abd', 'abcde') === true);\nconsole.log(isSubsequence('abf', 'abcde') === false);\nconsole.log(isSubsequence('abef', 'abcde') === false);\nconsole.log(isSubsequence('abcdef', 'abcde') === false);\nconsole.log(isSubsequence('a', 'abcde') === true);\n","filetype":".js","index":78},{"title":"Matrixclone","category":"javascript","id":"matrixClone_javascript","algorithm":"function matrixClone(matrix, defaultValue) {\n  return matrix.map(row => {\n    return defaultValue === undefined\n      ? row.slice(0)\n      : Array(row.length).fill(defaultValue);\n  });\n}\n\nconst deepEqual = require('./deepEqual');\n\n// Test clone.\nconst a = [[1, 2], [1, 4]];\nconsole.log(deepEqual(matrixClone(a), [[1, 2], [1, 4]]));\na[0][0] = 4;\nconsole.log(deepEqual(matrixClone(a), [[1, 2], [1, 4]]) === false);\nconsole.log(deepEqual(matrixClone([[1]]), [[1]]));\n\n// Test clone with default value.\nconsole.log(deepEqual(matrixClone([[1, 2], [1, 4]], 1), [[1, 1], [1, 1]]));\nconsole.log(\n  deepEqual(matrixClone([[1, 2], [1, 4]], null), [[null, null], [null, null]]),\n);\n","filetype":".js","index":79},{"title":"Matrixtranspose","category":"javascript","id":"matrixTranspose_javascript","algorithm":"function matrixTranspose(matrix) {\n  return matrix[0].map((col, i) => matrix.map(row => row[i]));\n}\n\nconst deepEqual = require('./deepEqual');\n\nconsole.log(deepEqual(matrixTranspose([[1]]), [[1]]));\nconsole.log(deepEqual(matrixTranspose([[1, 2]]), [[1], [2]]));\nconsole.log(deepEqual(matrixTranspose([[1, 2], [1, 4]]), [[1, 1], [2, 4]]));\nconsole.log(\n  deepEqual(matrixTranspose([[1, 2, 3], [4, 5, 6]]), [[1, 4], [2, 5], [3, 6]]),\n);\n","filetype":".js","index":80},{"title":"Matrixtraverse","category":"javascript","id":"matrixTraverse_javascript","algorithm":"function traverse(matrix) {\n  const DIRECTIONS = [[0, 1], [0, -1], [1, 0], [-1, 0]];\n  const rows = matrix.length;\n  const cols = matrix[0].length;\n  const visited = matrix.map(row => Array(row.length).fill(false));\n  function dfs(i, j) {\n    if (visited[i][j]) {\n      return;\n    }\n    visited[i][j] = true;\n    DIRECTIONS.forEach(dir => {\n      const row = i + dir[0],\n        col = j + dir[1];\n      // Boundary check.\n      if (row < 0 || row >= rows || col < 0 || col >= cols) {\n        return;\n      }\n      // Valid neighbor check.\n      if (matrix[row][col] !== 1) {\n        return;\n      }\n      dfs(row, col);\n    });\n  }\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      dfs(i, j);\n    }\n  }\n}\n","filetype":".js","index":81},{"title":"Mergesort","category":"javascript","id":"mergeSort_javascript","algorithm":"function mergeSort(arr) {\n  if (arr.length < 2) {\n    // Arrays of length 0 or 1 are sorted by definition.\n    return arr;\n  }\n\n  const left = arr.slice(0, Math.floor(arr.length / 2));\n  const right = arr.slice(Math.floor(arr.length / 2), Math.floor(arr.length));\n\n  return merge(mergeSort(left), mergeSort(right));\n}\n\nfunction merge(arr1, arr2) {\n  const merged = [];\n  let i = 0,\n    j = 0;\n\n  while (i < arr1.length && j < arr2.length) {\n    if (arr1[i] <= arr2[j]) {\n      merged.push(arr1[i]);\n      i++;\n    } else if (arr2[j] < arr1[i]) {\n      merged.push(arr2[j]);\n      j++;\n    }\n  }\n\n  merged.push(...arr1.slice(i), ...arr2.slice(j));\n  return merged;\n}\n\nconst deepEqual = require('./deepEqual');\n\nconsole.log(deepEqual(mergeSort([]), []));\nconsole.log(deepEqual(mergeSort([1]), [1]));\nconsole.log(deepEqual(mergeSort([2, 1]), [1, 2]));\nconsole.log(deepEqual(mergeSort([7, 2, 4, 3, 1, 2]), [1, 2, 2, 3, 4, 7]));\nconsole.log(deepEqual(mergeSort([1, 2, 3, 4, 5, 0]), [0, 1, 2, 3, 4, 5]));\nconsole.log(\n  deepEqual(mergeSort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]), [\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n  ]),\n);\nconsole.log(\n  deepEqual(mergeSort([98322, 3242, 876, -234, 34, 12331]), [\n    -234,\n    34,\n    876,\n    3242,\n    12331,\n    98322,\n  ]),\n);\n","filetype":".js","index":82},{"title":"Treeequal","category":"javascript","id":"treeEqual_javascript","algorithm":"function treeEqual(node1, node2) {\n  if (!node1 && !node2) {\n    return true;\n  }\n  if (!node1 || !node2) {\n    return false;\n  }\n  return (\n    node1.val == node2.val &&\n    treeEqual(node1.left, node2.left) &&\n    treeEqual(node1.right, node2.right)\n  );\n}\n","filetype":".js","index":83},{"title":"Treemirror","category":"javascript","id":"treeMirror_javascript","algorithm":"function treeMirror(node) {\n  if (!node) {\n    return;\n  }\n  let temp = node.left;\n  node.left = node.right;\n  node.right = temp;\n  treeMirror(node.left);\n  treeMirror(node.right);\n}\n","filetype":".js","index":84},{"title":"Python","category":"utilities","id":"python","index":85},{"title":"Binary search","category":"python","id":"binary_search_python","algorithm":"def binary_search(arr, target):\n    left = 0;\n    right = len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2;\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\ndef bisect_left(arr, target):\n    \"\"\"Returns the leftmost position that `target` should\n    go to such that the sequence remains sorted.\"\"\"\n    left = 0\n    right = len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n\ndef bisect_right(arr, target):\n    \"\"\"Returns the rightmost position that `target` should\n    go to such that the sequence remains sorted.\"\"\"\n    left = 0\n    right = len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] > target:\n            right = mid\n        else:\n            left = mid + 1\n    return left\n\nprint(binary_search([1, 2, 3, 10], 1) == 0)\nprint(binary_search([1, 2, 3, 10], 2) == 1)\nprint(binary_search([1, 2, 3, 10], 3) == 2)\nprint(binary_search([1, 2, 3, 10], 10) == 3)\nprint(binary_search([1, 2, 3, 10], 9) == -1)\nprint(binary_search([1, 2, 3, 10], 4) == -1)\nprint(binary_search([1, 2, 3, 10], 0) == -1)\nprint(binary_search([1, 2, 3, 10], 11) == -1)\nprint(binary_search([5, 7, 8, 10], 3) == -1)\n\nprint(bisect_left([1, 2, 3, 3, 10], 1) == 0)\nprint(bisect_left([1, 2, 3, 3, 10], 2) == 1)\nprint(bisect_left([1, 2, 3, 3, 10], 3) == 2) # First \"3\" is at index 2\nprint(bisect_left([1, 2, 3, 3, 10], 10) == 4)\n\n# These return a valid index despite target not being in array.\nprint(bisect_left([1, 2, 3, 3, 10], 9) == 4)\nprint(bisect_left([1, 2, 3, 3, 10], 0) == 0) # Insert \"0\" at front\nprint(bisect_left([1, 2, 3, 3, 10], 11) == 5) # Insert \"5\" at back\n\nprint(bisect_right([1, 2, 3, 3, 10], 1) == 1)\nprint(bisect_right([1, 2, 3, 3, 10], 2) == 2)\nprint(bisect_right([1, 2, 3, 3, 10], 3) == 4) # Last \"3\" is at index 3, so insert new \"3\" at index 4\nprint(bisect_right([1, 2, 3, 3, 10], 10) == 5)\n\n# These return a valid index despite target not being in array.\nprint(bisect_right([1, 2, 3, 3, 10], 9) == 4)\nprint(bisect_right([1, 2, 3, 3, 10], 0) == 0) # Insert \"0\" at front\nprint(bisect_right([1, 2, 3, 3, 10], 11) == 5) # Insert \"5\" at back\n","filetype":".py","index":86},{"title":"Char prime map","category":"python","id":"char_prime_map_python","algorithm":"# For mapping a lowercase character to a prime number.\n# Useful for checking whether two strings are anagram or permutations of each other.\nprimes = {\n    'a': 2, 'b': 3, 'c': 5, 'd': 7, 'e': 11, 'f': 13,\n    'g': 17, 'h': 19, 'i': 23, 'j': 29, 'k': 31, 'l': 37,\n    'm': 41, 'n': 43, 'o': 47, 'p': 53, 'q': 59, 'r': 61,\n    's': 67, 't': 71, 'u': 73, 'v': 79, 'w': 83, 'x': 89,\n    'y': 97, 'z': 101, ' ': 103,\n}\n\nimport functools\n\ndef mul(seq):\n    return functools.reduce(lambda a, b: a * b, seq, 1)\n\ndef prime_value_of_string(string):\n    return mul([primes[c] for c in string])\n\nprint(prime_value_of_string('abcde'))\n","filetype":".py","index":87},{"title":"Graph dfs","category":"python","id":"graph_dfs_python","algorithm":"def graph_dfs(matrix):\n    rows, cols = len(matrix), len(matrix[0])\n    visited = set()\n    directions = ((0, 1), (0, -1), (1, 0), (-1, 0))\n    def dfs(i, j):\n        if (i, j) in visited:\n            return\n        visited.add((i, j))\n        # Traverse neighbors.\n        for direction in directions:\n            next_i, next_j = i + direction[0], j + direction[1]\n            if 0 <= next_i < rows and 0 <= next_j < cols: # Check boundary.\n                # Add any other checking here ^\n                dfs(next_i, next_j)\n\n    for i in range(rows):\n        for j in range(cols):\n            dfs(i, j)\n\n# Follow up:\n# 1) Diagonal cells are considered neighbors\n# 2) View the matrix like Earth, right boundary is adjacent to the left boundary, top adjacent to left, etc.\ndef graph_dfs_diagonals_and_boundary_wrap(matrix):\n    rows, cols = len(matrix), len(matrix[0])\n    visited = set()\n    # Change 1: Add 4 more diagonal directions.\n    directions = ((0, 1), (0, -1), (1, 0), (-1, 0), (-1, -1), (1, 1), (1, -1), (-1, 1))\n    def dfs(i, j):\n        if (i, j) in visited:\n            return\n        visited.add((i, j))\n        for direction in directions:\n            # Change 2: No more boundary, use modulo to allow traversal that exceed boundaries to wrap around.\n            next_i, next_j = (i + direction[0] + rows) % rows, (j + direction[1] + cols) % cols\n            dfs(next_i, next_j)\n\n    for i in range(rows):\n        for j in range(cols):\n            dfs(i, j)\n\ngraph_dfs([\n    [1, 2, 3, 4],\n    [5, 6, 7, 8],\n    [9, 10, 11, 12],\n])\n","filetype":".py","index":88},{"title":"Graph topo sort","category":"python","id":"graph_topo_sort_python","algorithm":"def graph_topo_sort(num_nodes, edges):\n    from collections import deque\n    nodes, order, queue = {}, [], deque()\n    for node_id in range(num_nodes):\n        nodes[node_id] = { 'in': 0, 'out': set() }\n    for node_id, pre_id in edges:\n        nodes[node_id]['in'] += 1\n        nodes[pre_id]['out'].add(node_id)\n    for node_id in nodes.keys():\n        if nodes[node_id]['in'] == 0:\n            queue.append(node_id)\n    while len(queue):\n        node_id = queue.pop()\n        for outgoing_id in nodes[node_id]['out']:\n            nodes[outgoing_id]['in'] -= 1\n            if nodes[outgoing_id]['in'] == 0:\n                queue.append(outgoing_id)\n        order.append(node_id)\n    return order if len(order) == num_nodes else []\n\nprint(graph_topo_sort(3, [[0, 1], [0, 2]]))\n","filetype":".py","index":89},{"title":"Heap","category":"python","id":"heap_python","algorithm":"# Implements a min-heap. For max-heap, simply reverse all comparison orders.\n#\n# Note on alternate subroutine namings (used in some textbooks):\n#     - _bubble_up = siftdown\n#     - _bubble_down = siftup\n\ndef _bubble_up(heap, i):\n    while i > 0:\n        parent_i = (i - 1) // 2\n        if heap[i] < heap[parent_i]:\n            heap[i], heap[parent_i] = heap[parent_i], heap[i]\n            i = parent_i\n            continue\n        break\n\ndef _bubble_down(heap, i):\n    startpos = i\n    newitem = heap[i]\n    left_i = 2 * i + 1\n    while left_i < len(heap):\n        # Pick the smaller of the L and R children\n        right_i = left_i + 1\n        if right_i < len(heap) and not heap[left_i] < heap[right_i]:\n            child_i = right_i\n        else:\n            child_i = left_i\n\n        # Break if heap invariant satisfied\n        if heap[i] < heap[child_i]:\n            break\n        \n        # Move the smaller child up.\n        heap[i], heap[child_i] = heap[child_i], heap[i]\n        i = child_i\n        left_i = 2 * i + 1\n\ndef heapify(lst):\n    for i in reversed(range(len(lst) // 2)):\n        _bubble_down(lst, i)\n\ndef heappush(heap, item):\n    heap.append(item)\n    _bubble_up(heap, len(heap) - 1)\n\ndef heappop(heap):\n    if len(heap) == 1:\n        return heap.pop()\n    min_value = heap[0]\n    heap[0] = heap[-1]\n    del heap[-1]\n    _bubble_down(heap, 0)\n    return min_value\n\n\n\n# Example usage\nheap = [3, 2, 1, 0]\nheapify(heap)\nprint('Heap(0, 1, 2, 3):', heap)\nheappush(heap, 4)\nheappush(heap, 7)\nheappush(heap, 6)\nheappush(heap, 5)\nprint('Heap(0, 1, 2, 3, 4, 5, 6, 7):', heap)\n\nsorted_list = [heappop(heap) for _ in range(8)]\nprint('Heap-sorted list:', sorted_list)\n\n# Large test case, for randomized tests\nimport random\n\n# Heapify 0 ~ 99\nheap = list(range(100))\nrandom.shuffle(heap)\nheapify(heap)\n\n# Push 100 ~ 199 in random order\nnew_elems = list(range(100, 200))\nrandom.shuffle(new_elems)\nfor elem in new_elems:\n    heappush(heap, elem)\n\nsorted_list = [heappop(heap) for _ in range(200)]\nprint(sorted_list == sorted(sorted_list))\n","filetype":".py","index":90},{"title":"Is subsequence","category":"python","id":"is_subsequence_python","algorithm":"def is_subsequence(s, t):\n    \"\"\"\n    :type s: str\n    :type t: str\n    :rtype: bool\n    \"\"\"\n    if len(s) > len(t):\n        return False\n    matched_s = 0\n    for char in t:\n        if matched_s < len(s) and s[matched_s] == char:\n            matched_s += 1\n    return matched_s == len(s)\n","filetype":".py","index":91},{"title":"Linked list","category":"python","id":"linked_list_python","algorithm":"# Singly-Linked List\n#\n# The linked list is passed around as a variable pointing to the\n# root node of the linked list, or None if the list is empty.\n\nclass LinkedListNode:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n\ndef linked_list_append(linked_list, value):\n    '''Appends a value to the end of the linked list'''\n    node = linked_list\n    insert_node = LinkedListNode(value)\n    if not node:\n        return insert_node\n    while node.next:\n        node = node.next\n    node.next = insert_node\n    return linked_list\n\ndef linked_list_insert_index(linked_list, value, index):\n    '''Inserts a value at a particular index'''\n    node = linked_list\n    insert_node = LinkedListNode(value)\n    \n    # Check if inserting at head\n    if index == 0:\n        insert_node.next = node\n        return insert_node\n\n    # Skip ahead\n    for _ in range(index - 1):\n        node = node.next\n        if not node:\n            raise ValueError\n    insert_node.next = node.next\n    node.next = insert_node\n    return linked_list\n\ndef linked_list_delete(linked_list, value):\n    '''Deletes the first occurrence of a value in the linked list'''\n    node = linked_list\n    \n    # Check if deleting at head\n    if node.value == value:\n        return node.next\n\n    # Skip ahead\n    while node.next:\n        if node.next.value == value:\n            node.next = node.next.next\n            return linked_list\n        node = node.next\n    raise ValueError\n\ndef linked_list_delete_index(linked_list, index):\n    '''Deletes the element at a particular index in the linked list'''\n    node = linked_list\n    \n    # Check if deleting at head\n    if index == 0:\n        return node.next\n\n    # Skip ahead\n    for _ in range(index - 1):\n        node = node.next\n        if not node:\n            raise ValueError\n    if not node.next:\n        raise ValueError\n    node.next = node.next.next\n    return linked_list\n\ndef linked_list_iter(linked_list):\n    '''Lazy iterator over each node in the linked list'''\n    node = linked_list\n    while node is not None:\n        yield node\n        node = node.next\n\n\n# Append to back\nlinked_list = None    # Start with an empty linked list\nlinked_list = linked_list_append(linked_list, 1)\nlinked_list = linked_list_append(linked_list, 2)\nlinked_list = linked_list_append(linked_list, 4)\nprint([node.value for node in linked_list_iter(linked_list)])\n\n# Insert by index\nlinked_list = linked_list_insert_index(linked_list, 0, 0) # Front\nprint([node.value for node in linked_list_iter(linked_list)])\nlinked_list = linked_list_insert_index(linked_list, 3, 3) # Back\nprint([node.value for node in linked_list_iter(linked_list)])\n\n# Delete \"3\"\nlinked_list = linked_list_delete(linked_list, 3)\nprint([node.value for node in linked_list_iter(linked_list)])\n\n# Delete by index\nlinked_list = linked_list_delete_index(linked_list, 0)\nprint([node.value for node in linked_list_iter(linked_list)])\nlinked_list = linked_list_delete_index(linked_list, 1)\nprint([node.value for node in linked_list_iter(linked_list)])\n\n# Delete until empty\nlinked_list = linked_list_delete_index(linked_list, 0)\nlinked_list = linked_list_delete_index(linked_list, 0)\nprint([node.value for node in linked_list_iter(linked_list)])\n","filetype":".py","index":92},{"title":"Quick select","category":"python","id":"quick_select_python","algorithm":"## QuickSelect -- Linear-time k-th order statistic\n## (i.e. select the k-th smallest element in an unsorted array)\n## https://en.wikipedia.org/wiki/Quickselect\n\ndef partition(array, start, end, pivot):\n    \"\"\"Partitions by a pivot value, which might not necessarily be in the array.\n    This variant is useful when you want to bound your recursion depth by the\n    range of the input values, and not the length of the array.\"\"\"\n    pivot_index = start\n    for i in range(start, end):\n        if array[i] <= pivot:\n            array[i], array[pivot_index] = array[pivot_index], array[i]\n            pivot_index += 1\n    return pivot_index\n\nimport random\ndef partition_first(array, start, end):\n    \"\"\"Selects the first element as pivot. Returns the index where the pivot went to.\n    In this variant, we can guarantee that the pivot will be in its final sorted position.\n    We need this guarantee for QuickSelect.\"\"\"\n    if start + 1 == end:\n        return start\n    pivot = array[start]\n    pivot_index = start + 1\n    for i in range(start + 1, end):\n        if array[i] <= pivot:\n            array[i], array[pivot_index] = array[pivot_index], array[i]\n            pivot_index += 1\n    # Move pivot to front\n    array[start], array[pivot_index - 1] = array[pivot_index - 1], array[start]\n    return pivot_index - 1\n\ndef quick_select(array, k):\n    \"\"\"NOTE: k-th smallest element counts from 0!\"\"\"\n    left = 0\n    right = len(array)\n    while True:\n        random_index = random.sample(range(left, right), 1)[0]\n        array[left], array[random_index] = array[random_index], array[left]\n        pivot_index = partition_first(array, left, right)\n        if k == pivot_index:\n            return array[pivot_index]\n        if k < pivot_index:\n            right = pivot_index\n        else:\n            left = pivot_index + 1\n\n\n\nprint(quick_select([0], 0) == 0)\nprint(quick_select([0, 1, 2, 3, 4], 2) == 2)\nprint(quick_select([4, 3, 2, 1, 0], 2) == 2)\nprint(quick_select([1, 3, 4, 2, 0], 2) == 2)\n\n# Large test case, for randomized tests\nlst = list(range(1000))\nfor _ in range(10):\n    k = random.randint(0, 999)\n    random.shuffle(lst)\n    print(quick_select(lst, k) == k)\n","filetype":".py","index":93},{"title":"Rabin karp hash","category":"python","id":"rabin_karp_hash_python","algorithm":"## Rabin-Karp Rolling Hash\n## Implementation of: https://en.wikipedia.org/wiki/Rabin%E2%80%93Karp_algorithm#Hash_function_used\n##\n## This rolling hash function is useful when you need to compute the hash of successive substrings\n## of text. E.g. note that going from 'abcd' to 'bcde', we drop the 'a' from the back and add an 'e'\n## on the right. The rolling hash function thus allows us to update the hash in-place O(1) instead of\n## recomputing the full hash of the substring O(m), where m is the length of the substring.\n##\n## NOTE: The implementation below takes in a tuple of integers, to be as general as possible. For use\n## with strings, simply take the ASCII value of each character before passing into the functions.\n\nBASE = 101  # Arbitrary prime number\n\ndef rk_hash_init(tpl):\n    '''Initializes the hash with a tuple of integers.'''\n    return sum(n * BASE ** i for i, n in enumerate(reversed(tpl)))\n\ndef rk_hash_update(curr_hash, size, add_n, rem_n):\n    '''Updates the hash by removing an integer from the left and appending\n    an integer to the right.\n\n    curr_hash: The previous hash\n    size: The size of the rolling window\n    add_n: The integer appended to the right\n    rem_n: The integer removed from the left'''\n    return (curr_hash - (rem_n * BASE ** (size - 1))) * BASE + add_n\n\n\n\nabc_hash = rk_hash_init(tuple(map(ord, 'abc')))     # Init the hash with 'abc'\nprint('abc:', abc_hash)\nbcd_hash_1 = rk_hash_update(abc_hash, 3, ord('d'), ord('a'))    # Add a 'd' to the right, remove an 'a' from the left\nprint('bcd 1:', bcd_hash_1)\n\nzbc_hash = rk_hash_init(tuple(map(ord, 'zbc')))     # Init the hash with 'zbc'\nprint('zbc:', zbc_hash)\nbcd_hash_2 = rk_hash_update(zbc_hash, 3, ord('d'), ord('z'))    # Add a 'd' to the right, remove a 'z' from the left\nprint('bcd 2:', bcd_hash_2)\n\n# Notice that both hash values are the same despite arriving via different paths\nprint(bcd_hash_1 == bcd_hash_2)\n","filetype":".py","index":94},{"title":"Tree equal","category":"python","id":"tree_equal_python","algorithm":"def tree_equal(node1, node2):\n    if not node1 and not node2:\n        return True\n    if not node1 or not node2:\n        return False\n    return node1.val == node2.val and \\\n        tree_equal(node1.left, node2.left) and \\\n        tree_equal(node1.right, node2.right)\n","filetype":".py","index":95},{"title":"Tree mirror","category":"python","id":"tree_mirror_python","algorithm":"def tree_mirror(node):\n    if not node:\n        return\n    node.left, node.right = node.right, node.left\n    tree_mirror(node.left)\n    tree_mirror(node.right)\n","filetype":".py","index":96},{"title":"Tree traversal","category":"python","id":"tree_traversal_python","algorithm":"# Various iterative ways of traversing a tree.\ndef inorder_traversal(root):\n    \"\"\"\n    :type root: TreeNode\n    :rtype: List[int]\n    \"\"\"\n    if not root:\n      return []\n    result = []\n    stack = [root]\n    while len(stack) > 0:\n        curr_node = stack.pop()\n        if curr_node.left:\n            stack.append(curr_node)\n            stack.append(curr_node.left)\n            curr_node.left = None\n        else:\n            result.append(curr_node.val)\n            if curr_node.right:\n                stack.append(curr_node.right)\n    return result\n\ndef preorder_traversal(root):\n    \"\"\"\n    :type root: TreeNode\n    :rtype: List[int]\n    \"\"\"\n    if not root:\n        return []\n    result = []\n    stack = [root]\n    while len(stack) > 0:\n        curr_node = stack.pop()\n        result.append(curr_node.val)\n        if curr_node.right:\n            stack.append(curr_node.right)\n        if curr_node.left:\n            stack.append(curr_node.left)\n    return result\n\ndef postorder_traversal(root):\n    \"\"\"\n    :type root: TreeNode\n    :rtype: List[int]\n    \"\"\"\n    if not root:\n        return []\n    result = []\n    stack = [root]\n    while len(stack) > 0:\n        curr_node = stack.pop()\n        if curr_node.left:\n            stack.append(curr_node)\n            stack.append(curr_node.left)\n            curr_node.left = None\n        elif curr_node.right:\n            stack.append(curr_node)\n            stack.append(curr_node.right)\n            curr_node.right = None\n        else:\n            result.append(curr_node.val)\n    return result\n","filetype":".py","index":97},{"title":"Trie","category":"python","id":"trie_python","algorithm":"class Trie(object):\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.d = {}\n\n    def insert(self, word):\n        \"\"\"\n        Inserts a word into the trie.\n        :type word: str\n        :rtype: void\n        \"\"\"\n        curr = self.d\n        for char in word:\n            if char not in curr:\n                curr[char] = {}\n            curr = curr[char]\n        curr['#'] = {} # Using an empty dict rather than a boolean value makes recursive traversal easier.\n\n    def search(self, word):\n        \"\"\"\n        Returns if the word is in the trie.\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        curr = self.d\n        for char in word:\n            if char in curr:\n                curr = curr[char]\n            else:\n                return False\n        return '#' in curr\n\n    def startsWith(self, prefix):\n        \"\"\"\n        Returns if there is any word in the trie that starts with the given prefix.\n        :type prefix: str\n        :rtype: bool\n        \"\"\"\n        curr = self.d\n        for char in prefix:\n            if char in curr:\n                curr = curr[char]\n            else:\n                return False\n        return True\n\n    def searchRegex(self, word):\n        \"\"\"\n        Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        def traverse(node, index):\n            if len(word) == index:\n                return '#' in node\n            char = word[index]\n            if char == '.':\n                for key in node.keys():\n                    if traverse(node[key], index+1):\n                        return True\n                return False\n            else:\n                if char not in node:\n                    return False\n                return traverse(node[char], index + 1)\n        return traverse(self.d, 0)\n\n# Example\ntrie = Trie()\ntrie.insert('hello')\nprint(trie.search('hello') == True)\nprint(trie.startsWith('hello') == True)\nprint(trie.startsWith('hel') == True)\nprint(trie.search('world') == False)\nprint(trie.startsWith('wor') == False)\nprint(trie.searchRegex('..llo') == True)\nprint(trie.searchRegex('..llx') == False)\nprint(trie.searchRegex('..') == False)\n","filetype":".py","index":98},{"title":"Union find","category":"python","id":"union_find_python","algorithm":"## Union-Find data structure\n## https://en.wikipedia.org/wiki/Disjoint-set_data_structure\n\nparents = [0, 1, 2, 3, 4, 5, 6] # parent[i] is the parent of i\nweights = [1, 1, 1, 1, 1, 1, 1]\n\ndef find_root(parents, p):\n    '''Average: O(log n)'''\n    root = p\n    while parents[root] != root:\n        root = parents[root]\n    # Flatten tree\n    while parents[p] != p:\n        parents[p], p = root, parents[p]\n    return root\n\ndef union(parents, p, q):\n    '''Average: O(log n)'''\n    p = find_root(parents, p)\n    q = find_root(parents, q)\n    # Link the smaller node to the larger node\n    if weights[p] > weights[q]:\n        parents[q] = p\n        weights[p] += weights[q]\n    else:\n        parents[p] = q\n        weights[q] += weights[p]\n\n\n\n# Start with all elements separate\n# -> [0], [1], [2], [3], [4], [5], [6]\nprint(find_root(parents, 2) == 2)\n\n# Merge 1, 2, 3 and 4, 5, 6\n# -> [0], [1, 2, 3], [4, 5, 6]\nunion(parents, 1, 2)\nunion(parents, 2, 3)\nunion(parents, 4, 5)\nunion(parents, 4, 6)\n\n# Roots of 1, 2, 3 and 4, 5, 6 are the same\nprint(find_root(parents, 0))\nprint(list(find_root(parents, i) for i in (1, 2, 3)))\nprint(list(find_root(parents, i) for i in (4, 5, 6)))\n\n# Merge 2, 4\n# -> [0], [1, 2, 3, 4, 5, 6]\nunion(parents, 2, 4)\nprint(list(find_root(parents, i) for i in (1, 2, 3, 4, 5, 6)))\n","filetype":".py","index":99}]